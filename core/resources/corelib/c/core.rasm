/* struct RasmPointer {
        void *address;
        int count;
   }
*/

pub type RasmPointer(false, "void *");

pub native exitMain(status: i32) /{
    exit($status);
}/

pub native argc() -> i32 /{
    return argc_;
}/

pub native argv(i: i32) -> Option<str> /{
    if (i >= argc_) {
        $enumDeclaration(result_)
        $enumVariantDeclaration(v_, None)
        result_->variant_num = 1;
        result_->variant = v_;
        return result_;
    } else {
        return
        $call(Option::Some, argv_[$i]:str)
        ;
    }

}/

pub native rasmMalloc(size: i32) -> RasmPointer /{
    $include(<stdlib.h>)

    void *address_to_free;
    while ((address_to_free = rc_remove_zero(rasm_rc_table)) != NULL) {
        if (RASM_DEBUG) {
            printf("free(%p).\n", address_to_free);
        }
        free(address_to_free);
    }

    void *result = malloc(size);
    if (RASM_DEBUG) {
        printf("allocated(%p)\n", result);
    }
    return result;
}/

pub native deref(address: RasmPointer) /{
    $include(<stdlib.h>)

    if (address == NULL) {
        if (RASM_DEBUG) {
            printf("NULL address\n");
        }
        return;
    }

    if (RASM_DEBUG) {
        printf("deref(%p)", address);
    }

    int count;
    if ((count = rc_dec(rasm_rc_table, address)) == INT_MIN) {
        printf("Error in rc_dec.\n");
    } else if (RASM_DEBUG) {
        printf(" count %d\n", count);
    }

    // printf("Cannot find reference!!\n");
    // $call(exitMain, 1)
    return;

}/

pub native addRef(address: RasmPointer) /{
    $include(<stdlib.h>)

    if (address == NULL) {
        if (RASM_DEBUG) {
            printf("NULL address\n");
        }
        return;
    }

    if (RASM_DEBUG) {
        printf("addRef(%p)", address);
    }
    int count;
    if ((count = rc_inc(rasm_rc_table, address)) == INT_MIN) {
        printf("Error in rc_inc.\n");
    } else if (RASM_DEBUG) {
        printf(" count %d\n", count);
    }
}/

pub native freeReferences() /{
    rc_deep_free(rasm_rc_table);
}/

pub native initRasmReferences() /{
    rasm_rc_table = rc_table(100000, 50);
}/