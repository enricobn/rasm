/* struct RasmPointer_ {
        void *address;
        int count;
        struct RCList* zero;
   };
*/

pub type RasmPointer(false, "struct RasmPointer_ *");

pub native exitMain(status: i32) /{
    exit($status);
}/

pub native argc() -> i32 /{
    return argc_;
}/

pub native argv(i: i32) -> Option<str> /{
    if (i >= argc_) {
        struct RasmPointer_ *result__ = rasmMalloc(sizeof(struct Enum));
        struct Enum *result_ = (struct Enum *)result__->address;
        $enumVariantDeclaration(v_, None)
        result_->variant_num = 1;
        result_->variant = v__;
        return result__;
    } else {
        return
        $call(Option::Some, argv_[$i]:str)
        ;
    }

}/

pub native deref(address: RasmPointer) /{
    $include(<stdlib.h>)

    #ifdef __RASM_DEBUG__
    if ($address == NULL) {
        printf("NULL address\n");
        return;
    }

    printf("deref(%p)", $address->address);
    #endif

    if (--$address->count == 0) {
        push_zero($address);
    }
}/

pub native addRef(address: RasmPointer) /{
    $include(<stdlib.h>)

    #ifdef __RASM_DEBUG__
    if ($address == NULL) {
        printf("NULL address\n");
        return;
    }

    printf("addRef(%p)", $address->address);
    #endif

    if (++$address->count == 1) {
        if ($address->zero != NULL) {
            remove_from_zero_list($address->zero);
            $address->zero = NULL;
        }
    }
}/

pub native freeReferences() /{
    free_zero();
}/