extern "exit"

/*
 *  Creates the "struct" that holds the count and the arguments
 *  address:    the target pointer to the "struct" that holds the count and then the pointers (to the allocation table) to the arguments
 *  esp:        the pointer to the initial esp, where in the first slot (dword) there is the count of arguments and in
 *              the subsequent slots there are the pointers to the strings
 */
pub native createCmdLineArguments(address: i32,esp: i32) -> i32 /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx,$esp
    %ifdef LIBC
    add     ebx,4
    %endif
    mov     dword ecx,[ebx]     ; the counter
    mov     dword edx,$address
    mov     dword [edx],ecx
    %ifdef LIBC
    add     ebx,4
    mov     dword ebx,[ebx]
    sub     ebx,4
    %endif
    add     ecx,1

.loop:
    add     ebx,4
    add     edx,4
    sub     ecx,1
    jz      .end
    $call(addStaticStringToHeap,[ebx])
    mov     dword [edx],eax
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

pub native exitMain(status: i32) /{
    %ifdef LIBC
    push    dword $status
    call    exit
    %else
    push    dword ebx
    mov     ebx, $status    ; Arg one: the status
    mov     eax, 1          ; Syscall number: 1
    int     0x80
    pop     ebx
    %endif
}/

pub native argc() -> i32 /{
    mov     eax,[_rasm_args]
}/

// TODO unsafe use Option
pub native argv(i: i32) -> str /{
    push edx ; since the mul function stores the result even in edx
    push ebx
    push ecx
    mov ebx, _rasm_args
    mov ecx,4           ; i add 4*i to the base address (_rasm_args)
    mov eax,$i
    inc eax             ; we skip the length (argc)
    mul ecx
    add ebx,eax
    mov eax,[ebx]
    pop ecx
    pop ebx
    pop edx
}/

pub native memcopy(source: i32, dest: i32, len: i32) /{
    push    ecx
    push    esi
    push    edi

    mov     esi, $source
    mov     edi, $dest
    mov     ecx, $len
    rep     movsb

    pop     edi
    pop     esi
    pop     ecx
}/

pub native rasmalloc(size: i32, descr: str) -> i32 /{
    push    ebx
    push    ecx
    push    edx

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "start malloc ")
    $call(print, 1:File, $size)
    $call(print, 1:File, ", ")
    $call(print, 1:File, $descr)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword ecx, _reusable_heap_table

    %ifdef LOG_DEBUG
    push    eax
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,ecx
    $call(print, 1:File, "  reusable size ")
    $call(print, 1:File, ebx)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov dword ebx,$size
    mov dword edx,[_reusable_heap_table_next]
.reusable_loop:
    cmp     dword ecx,edx
    je      .allocation

    mov     eax,[ecx]
    cmp     dword [eax + 8],ebx
    je     .reusable_good
    add     ecx,4
    jmp    .reusable_loop
.reusable_good:
    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  reusing address ")
    $call(print, 1:File, eax)
    $call(print, 1:File, ", size ")
    $call(print, 1:File, [eax + 8])
    $call(print, 1:File, "\n")
    ; $call(checkAddress,eax)
    pop eax
    %endif

    $call(removeFromReused,ecx)
    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 12], 0     ; count
    mov     dword [eax + 16], 0     ; reusable table
    jmp     .end

.allocation:
    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  allocation ")
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword eax,[_heap_table_next]; the pointer to the heap table
    mov     dword edx,[_heap_table_size]
    add     dword edx,_heap_table
    cmp     dword eax,edx
    jb     .loop_ok
    $call(print, 1:File, "Out of heap space")
    $call(print, 1:File, "\n")
    $call(exitMain, 1)

.loop_ok:
    mov     dword eax,[_heap_table_next]
    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  new address")
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword ecx,[_heap]
    sub     ecx,_heap_buffer
    add     ecx, $size
    cmp     ecx,[_heap_size]
    jb      .new_address_ok
    $call(print, 1:File, "Out of memory")
    $call(print, 1:File, "\n")
    $call(exitMain, 1)

.new_address_ok:
    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  newAddress Ok")
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword ecx,[_heap]
    mov     dword [eax],ecx
    mov     dword edx, $size
    add     ecx, edx
    mov     dword [_heap],ecx
    mov     dword [eax + 5 * 4],0 ; to be sure that the next slot is considered free

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  allocate")
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 8], edx    ; size
    mov     dword [eax + 12], 0     ; count
    mov     dword [eax + 16], 0     ; reusable table
    add     eax, 20
    mov     [_heap_table_next],eax
    sub     eax, 20

.end:
    ;mov     dword eax,[eax]

    %ifdef LOG_DEBUG
    push   eax
    $call(print, 1:File, "  ")
    $call(print, 1:File, eax)
    $call(print, 1:File, "\n")
    $call(print, 1:File, "end malloc")
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    pop     edx
    pop     ecx
    pop     ebx
}/

pub native addStaticStringToHeap(s: i32) -> i32 /{
    push    ebx
    push    ecx
    push    edx

    ; we can't print here
    ; mov     dword eax,[_heap_table_next]; the pointer to the heap table
    ; mov     dword edx,[_heap_table_size]
    ; add     edx,_heap_table
    ; cmp     eax,edx
    ; jb     .ok
    ; $call(println, "Out of heap space")
    ; $call(exitMain, 1)

.ok:
    mov     dword eax,[_heap_table_next]

    mov     dword ecx,$s
    mov     dword [eax],ecx
    mov     dword [eax + 5 * 4],0 ; to be sure that the next slot is considered free

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 8], 0      ; size
    mov     dword [eax + 12], 1     ; count
    mov     dword [eax + 16], 0     ; reusable table
    add     eax, 20
    mov     [_heap_table_next],eax
    sub     eax, 20

.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native deref(address: i32, descr: str) -> i32 /{
    push    eax
    push    ebx

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "start deref ")
    $call(print, 1:File, $address)
    $call(print, 1:File, "\n")
    $call(print, 1:File, "  ")
    $call(print, 1:File, $descr)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    %ifdef LOG_DEBUG
    push    eax
    mov     dword eax, _reusable_heap_table
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,eax
    $call(print, 1:File, "  reusable size ")
    $call(print, 1:File, ebx: i32)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    %ifdef LOG_DEBUG
    ; we check if the address is valid
    mov     dword eax,_heap_table
    cmp     dword $address,eax
    jb     .invalid_address
    add     eax,[_heap_table_size]
    cmp     dword $address,eax
    jg      .invalid_address
    %endif

    mov     dword eax,$address
    mov     dword ebx,[eax + 12] ; the count

    %ifdef LOG_DEBUG
    test    ebx,ebx
    jz      .negative_count
    %endif

    sub     ebx,1

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  ref count: ")
    $call(print, 1:File, ebx: i32)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword [eax + 12],ebx
    test    ebx,ebx
    jnz     .end

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  deallocated ")
    $call(print, 1:File, eax)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword [eax + 4],0; allocated false
    mov     dword ebx,[_reusable_heap_table_next]
    mov     dword [eax + 16],ebx; reusable table
    mov     dword [ebx],eax

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  add reused ");
    $call(print, 1:File, ebx);
    $call(print, 1:File, " with value ");
    $call(print, 1:File, [ebx]);
    pop     eax
    %endif

    add     ebx,4
    mov     dword [_reusable_heap_table_next],ebx

    jmp     .end
.negative_count:
    $call(print, 1:File, "Negative allocation count: ");
    $call(print, 1:File, $descr)
    $call(print, 1:File, "\n")
    $call(exitMain, 1);
.invalid_address:
    $call(invalidAddress)
.end:
    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "end deref\n")
    pop     eax
    %endif

    pop     ebx
    pop     eax
}/

/**
 * given an address in the allocation table, dereferences that entry and adds it to the reusable table
 */
pub native freeMem(address: i32) /{
    push    ebx
    push    eax

    mov     eax, $address
    mov     dword [eax + 4],0; allocated false
    mov     dword ebx,[_reusable_heap_table_next]
    mov     dword [eax + 16],ebx; reusable table
    mov     dword [ebx],eax
    add     ebx,4
    mov     dword [_reusable_heap_table_next],ebx

    pop     eax
    pop     ebx
}/

pub native addRef(address: i32, descr: str) /{
    push    eax
    push    ebx

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "start addRef ")
    $call(print, 1:File, $address)
    $call(print, 1:File, "\n")
    $call(print, 1:File, "  ")
    $call(print, 1:File, $descr)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    %ifdef LOG_DEBUG
    push    eax
    push    ecx
    mov     dword ecx, _reusable_heap_table
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,ecx
    $call(print, 1:File, "  reusable size ")
    $call(print, 1:File, ebx)
    $call(print, 1:File, "\n")
    pop     ecx
    pop     eax
    %endif

    %ifdef LOG_DEBUG
    ; we check if the address is valid
    mov     dword eax,_heap_table
    cmp     $address,eax
    jb     .invalid_address
    add     eax,[_heap_table_size]
    cmp     $address,eax
    jg      .invalid_address
    %endif

    mov     dword eax,$address

    mov     dword ebx,[eax + 12] ; the count
    add     ebx,1

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "  ref count: ")
    $call(print, 1:File, ebx)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    mov     dword [eax + 12],ebx

    mov     dword ebx,[eax + 16]
    test    ebx,ebx                ; no reusable_table
    jz     .allocate

    $call(removeFromReused, ebx)
    mov     dword [eax + 16],0

.allocate:
    mov     dword [eax + 4],1   ; allocated true
    jmp     .end
.invalid_address:
    $call(invalidAddress)
.end:
    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, "end addRef\n")
    pop     eax
    %endif

    pop     ebx
    pop     eax
}/

pub native removeFromReused(address: i32) /{
    push    eax

    %ifdef LOG_DEBUG
    push    eax
    $call(print, "  remove from reused ")
    $call(print, $address)
    $call(print, " ")
    mov     dword eax, $address
    $call(print, [eax])
    pop     eax
    %endif

    mov     dword eax,[_reusable_heap_table_next]
    sub     eax,4
    mov     dword [_reusable_heap_table_next],eax

    %ifdef LOG_DEBUG
    push    eax
    $call(print, 1:File, " ")
    $call(print, 1:File, eax)
    $call(print, 1:File, "\n")
    pop     eax
    %endif

    cmp     dword eax,$address
    jbe     .end

    push    ebx

    mov     dword eax,[eax]      ; the pointer to the allocation table that we want to move
    mov     dword ebx,$address   ; the pointer to the reusable table that we want to delete
    mov     dword [ebx],eax      ; we move the pointer to the allocation table that we want to move, to the reusable table that we want to delete
    mov     dword [eax + 16],ebx ; we must update the pointer in the allocation table

    pop     ebx

.end:
    pop     eax
}/

fn invalidAddress() {
    print("invalid address \n");
    exitMain(1);
}

pub native printAllocated() /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     dword eax,_heap_table
    mov     dword ebx,0
    mov     dword ecx,0
.loop:
    cmp     dword ebx,[_heap_table_size]
    jge     .end
    mov     dword edx,[eax + 4] ; 1 == allocated
    cmp     dword edx,0
    jz      .skip
    mov     dword edx,[eax + 12] ; refcount
    cmp     dword edx,0
    jz      .skip
    add     dword ecx,[eax + 8] ; size
.skip:
    add     eax, 5 * 4
    add     ebx, 5 * 4
    jmp     .loop
.end:
    $call(print, 1:File, ecx)
    $call(print, 1:File, " bytes allocated and referenced")
    $call(print, 1:File, "\n")

    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

/* probably there's a faster way to do this: a simple diff... */
pub native printTotalMemory() /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     dword eax,_heap_table
    mov     dword ebx,0
    mov     dword ecx,0
.loop:
    cmp     dword ebx,[_heap_table_size]
    jge     .end
    mov     dword edx,[eax + 4]; 1 == allocated
    add     dword ecx,[eax + 8] ; size
    add     eax, 5 * 4
    add     ebx, 5 * 4
    jmp     .loop
.end:
    $call(print, 1:File, ecx)
    $call(print, 1:File, " bytes of total memory")
    $call(print, 1:File, "\n")

    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

pub native printTableSlotsAllocated() /{
    push    eax
    push    ebx

    mov     dword eax,0
    mov     dword ebx,_heap_table
.loop:
    cmp     dword [ebx],0
    jz      .end
    add     eax,1
    add     ebx,5 * 4
    jmp     .loop
.end:
    $call(print, 1:File, eax)
    $call(print, 1:File, " table slots allocated")
    $call(print, 1:File, "\n")

    pop     ebx
    pop     eax
}/

fn derefAddressNotFound() {
    println("Deref: address not found");
    exitMain(1);
}

/* checks if the address is used somewhere in memory, in that case it exits */
native checkAddress(address: i32) /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    $call(print, 1:File, "  checkAddress")
    $call(print, 1:File, "\n")

    mov     dword eax,_heap_table
    mov     dword ebx,0
    mov     dword ecx,0
.loop:
    cmp     dword ebx,[_heap_table_size]
    jge     .end
    mov     dword edx,[eax + 4]; 1 == allocated
    cmp     dword edx,0
    jz      .not_allocated
    $call(memContains, [eax], [eax +8], $address)
.not_allocated:
    add     eax, 5 * 4
    add     ebx, 5 * 4
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

native memContains(startAddress: i32, len: i32, what: i32) /{
    push    eax
    push    ebx
    push    ecx
    ; $call(print, "    memContains(")
    ; $call(print, $startAddress)
    ; $call(print, ", ")
    ; $call(print, $len)
    ; $call(print, ", ")
    ; $call(print, $what)
    ; $call(println, ")")

    mov     dword eax,$startAddress
    mov     dword ebx,$len
.loop:
    cmp     dword ebx,0
    jbe     .end
    mov     dword ecx,[eax]
    cmp     dword ecx,$what
    jne     .not_equals
    $call(print, 1:File, "Address is still in use")
    $call(print, 1:File, "\n")
    $call(exitMain, 1)
.not_equals:
    add     eax, 1
    sub     ebx, 1
    jmp     .loop
.end:
    pop     ecx
    pop     ebx
    pop     eax
}/

pub native copy<T>(o: T) -> T /{
    push    ebx
    push    ecx

    mov     dword ebx,$o
    mov     dword ecx,[ebx + 8] ; size
    $call(rasmalloc, ecx, "for copy")
    $call(memcopy, [ebx], [eax], ecx)
    ; $addRef(eax:T)
    ; $call(deref,eax:i32, "deref for copy")

    pop     ecx
    pop     ebx
}/

pub native addStaticAllocation(labelAllocation: i32, labelMemory: i32, size: i32) /{
    push    ebx

    mov     dword ebx, $labelMemory
    mov     dword eax, $labelAllocation
    mov     dword [eax], ebx
    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword ebx, $size
    mov     dword [eax + 8], ebx    ; size
    mov     dword [eax + 12], 1     ; count
    mov     dword [eax + 16], 0     ; reusable table

    pop     ebx
}/

pub native addHeap(label: i32, descrLabel: i32, value: i32) /{
    push    ebx

    mov     dword ebx, $descrLabel
    $call(rasmalloc, 4, [ebx]: str)
    $call(addRef, eax, [ebx]: str)
    mov     dword ebx, $label
    mov     dword [ebx], eax
    mov     dword eax, [eax]
    mov     dword ebx, $value
    mov     dword [eax], ebx

    pop   ebx
}/