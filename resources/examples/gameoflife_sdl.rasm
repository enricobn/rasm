// time ./gameoflife_sdl examples/f116.cells 100
// 12,762
// 10,686 - used let statement
// 10,227 - optimized lambda space creation
// 10,180 - optimized memcopy
// 11,948 - dereference has been reset
// 11,899 - optimization: references in stack vs scope stack
// 11,019 - optimized listAnyMatch
// 10,330 - inlined struct property getter
//  9,989 - optimized lambdas that do not read from context
// 10,594 - fixed some bugs "edx" related

include "std.rasm"
include "sdl.rasm"

include "gameoflife_common.rasm"

extern "printf"

sdlInit();

let file = argv(1);
let start = readCellFile(file);
let count = atoi(argv(2));

run(moveCells(start, 20), 80, 50, count);
//run(moveCells(start, 10), 30, 30, count);


sdlQuit();

fn run(start: List<Cell>, width: i32, height: i32, count: i32) {
    let win = sdlErrorIfNull(sdlCreateWindow("Game of life", 100, 100, 1024, 768), "SDL_CreateWindow Error: %s\n");
    let ren = sdlErrorIfNull(sdlCreateRenderer(win), "SDL_CreateRenderer Error: %s\n");

    sdlSetRenderDrawColor(ren, 0, 0, 0, 0);
    sdlRenderClear(ren);
    sdlSetRenderDrawColor(ren, 255, 255, 255, 0);

    let allCells = allCells(width, height);

    printCells(ren,
        foldLeft(range(0, count), start, { prev, act ->
            printCells(ren, prev, width, height);
            //sdlDelay(1000);
            next(prev, allCells);
          }), width, height);

    sdlDestroyRenderer(ren);
    sdlDestroyWindow(win);
}

fn printCells(ren: SDLRenderer, cells: List<Cell>, width: i32, height: i32) {
    sdlSetRenderDrawColor(ren, 0, 0, 0, 0);
    sdlRenderClear(ren);
    sdlSetRenderDrawColor(ren, 255, 0, 0, 0);
    sdlRenderFillRect(ren, SDLRect(0, 0, mul(10, width), mul(10, height)));
    sdlSetRenderDrawColor(ren, 255, 255, 255, 0);

    let xRange = range(0, width);

    forEach(range(0, height), { y ->
        forEach(xRange, { x ->
            ifRun(isAlive(cells, Cell(x, y)), { ->
                 sdlRenderFillRect(ren, SDLRect(mul(10, x), mul(10, y), 10, 10));
            }, { -> });
        });
    });
    sdlRenderPresent(ren);
}