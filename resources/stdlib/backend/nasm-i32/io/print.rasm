asm STDOut() -> File /{
    mov dword eax, 1
}/

/** prints a number to the standard output */
fn print(n: i32) {
    print(STDOut(), n);
}

fn println<T>(file: File, v: T) {
    print(file, v);
    println(file);
}

/**
 * Prints the number to the File specified.
 * https://stackoverflow.com/questions/25064565/printing-an-integer-with-x86-32-bit-linux-sys-write-nasm
 **/
asm print(file: File, n: i32) /{
    push    esi
    push    eax
    push    ebx
    push    ecx
    push    edx

    ; TODO I cannot allocate memory here, because when we use print inside malloc for debug we enter in an infinite loop
    ;      but I don't like it because it is not thread safe
    ; $call(malloc, 20, " temp for print(i32)")
    ; we can immediately free the memory, because it is not "erased" and is not reused (malloc) in this function
    ; $call(freeMem, eax)
    ; mov     dword esi,[eax]
    mov     esi, _for_nprint

    add     esi,19

    mov     eax,$n ; integer value to convert
    mov     byte [esi],0    ; String terminator

    mov ebx,10
    xor ecx,ecx         ; initialize length
.next_digit:
    xor edx,edx         ; Clear edx prior to dividing edx:eax by ebx
    div ebx             ; eax /= 10
    add dl,'0'          ; Convert the remainder to ASCII
    dec esi             ; store characters in reverse order
    inc ecx             ; length

    mov [esi],dl
    test eax,eax
    jnz .next_digit     ; Repeat until eax==0

    mov    edx,ecx ; the length
    mov    ecx,esi ; the pointer to the first digit (not necessarily the start of the provided buffer)
    mov    ebx, $file
    mov    eax, 4  ; write
    int    80h

    pop    edx
    pop    ecx
    pop    ebx
    pop    eax
    pop    esi
}/

/**
 * Prints a new line to standard output.
 */
fn println() {
    println(STDOut());
}

/**
 * Prints a new line to file.
 */
asm println(file: File) /{
    push    edx
    push    ecx
    push    ebx
    push    eax

    mov     dword ecx, _NEW_LINE
    mov     ebx, $file
    mov     eax, 4 ; write
    mov     edx, 1
    int     80h

    pop     eax
    pop     ebx
    pop     ecx
    pop     edx
}/

/**
 * Prints the string to the standard output.
 **/
fn print(s: str) {
    print(STDOut(), s);
}

/**
 * Prints the string to the file.
 **/
asm print(file: File, s: str) /{
    push    edx
    push    ecx
    push    ebx
    push    eax
    mov     eax,$s
    push    eax
    $call(slen, $s)

    mov     edx, eax
    pop     eax

    mov     dword ecx, [eax]
    mov     ebx, $file
    mov     eax, 4
    int     80h

    pop     eax
    pop     ebx
    pop     ecx
    pop     edx
}/

asm printESC() /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     edx, 1 ; num of chars
    mov     ecx, _ESC
    mov     ebx, 1
    mov     eax, 4
    int     80h

    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

asm print(c: char) /{
    push    edx
    push    ecx
    push    ebx
    push    eax

    mov     dword   edx,1
    mov     dword   eax,$c

    and     eax,0xFFFFFF00
    jz     .end
    inc     edx
    and     eax,0xFFFF0000
    jz      .end
    inc     edx
    and     eax,0xFF00000
    jz      .end
    inc     edx
.end:
    ; we use the stack pointer as the address of the "string" to be printed
    push    dword $c
    mov     dword ecx,esp

    mov     ebx, 1
    mov     eax, 4
    int     80h

    add     esp,4

    pop     eax
    pop     ebx
    pop     ecx
    pop     edx
}/