/**
 * parse a string to a number
 from https://stackoverflow.com/questions/19461476/convert-string-to-int-x86-32-bit-assembler-using-nasm
 **/
asm atoi(s: str) -> i32 /{
    push    ecx
    push    edx ; don't remove since imul stores the "high" result to edx
    mov edx, $s ; the pointer to the stack table our string
    mov dword edx, [edx]
    xor eax, eax ; zero a "result so far"
    .top:
    movzx ecx, byte [edx] ; get a character
    inc edx ; ready for next one
    cmp ecx, '0' ; valid?
    jb .done
    cmp ecx, '9'
    ja .done
    sub ecx, '0' ; "convert" character to number
    imul eax, 10 ; multiply "result so far" by ten
    add eax, ecx ; add in current digit
    jmp .top ; until done
.done:
    pop    edx
    pop    ecx
}/

asm add(s1: str, s2: str) -> str /{
    push    ebx
    push    ecx
    push    edx

    $call(slen, $s1)
    mov     ecx, eax
    mov     ebx, eax
    $call(slen, $s2)
    mov     edx, eax
    add     ebx, eax
    add     ebx, 1

    $call(malloc,ebx, " for add(str,str)")
    push    eax

    mov     dword ebx,$s1
    mov     dword ebx,[ebx]
    $call(memcopy,ebx,[eax],ecx)

    mov     dword eax,[eax]
    add     eax,ecx
    add     edx,1
    mov     dword ebx,$s2
    mov     dword ebx,[ebx]
    $call(memcopy,ebx,eax,edx)

    pop     eax

    pop     edx
    pop     ecx
    pop     ebx
}/

/** Returns the length of the string **/
asm slen(s: str) -> i32 /{
    push    ebx             ; Save ebx to the stack since we use it
    mov     eax, $s         ; Get the parameter from the stack (4 the PC + 4 ebp) and put it in eax
    mov     dword eax,[eax]
    mov     ebx, eax

.nextchar:
    cmp     byte [eax], 0
    jz      .finished
    inc     eax
    jmp     .nextchar

.finished:
    sub     eax, ebx
    pop     ebx
}/

// TODO: check for negative pos or len
asm substr(s: str, pos: i32, len: i32) -> Option<str> /{
    push ebx
    push ecx

    $call(slen, $s)

    mov     dword ebx, $pos
    mov     dword ecx, $len
    add     ebx, ecx

    cmp     ebx, eax
    jle     .ok
    $call(noneStr)
    jmp     .end
.ok:
    add     ecx, 1
    $call(malloc, ecx, " for substr")
    mov     dword ecx,[eax]

    mov     dword ebx, $s
    mov     dword ebx, [ebx]
    add     ebx, $pos

    $call(memcopy, ebx, ecx, $len)

    $call(someStr, eax: str)
.end:
    pop ecx
    pop ebx
}/

fn someStr(s: str) -> Option<str> {
    Option::Some(s);
}

fn noneStr() -> Option<str> {
    Option::None();
}

/*
 *  returns the offset (in bytes, not chars) of the next char
 *  given an offset from the start of the string.
 *  It is used to handle UTF-8 encoding
 */
asm nextChar(s: str, offset: i32) -> i32 /{
    mov     eax,$offset

    push    ebx
    push    ecx

    mov     ecx,0

    mov     dword ebx,$s
    mov     dword ebx,[ebx]
    add     ebx, $offset

    mov     cl,[ebx]
    and     cl,128+64+32
    cmp     cl,128+64+32
    jne     .b2
    add     eax, 4
    jmp     .end
.b2:
    mov     cl,[ebx]
    and     cl,128+64
    cmp     cl,128+64
    jne     .b3
    add     eax, 3
    jmp     .end
.b3:
    mov     cl,[ebx]
    and     cl,128
    cmp     cl,128
    jne      .b4
    add     eax, 2
    jmp     .end
.b4:
    add     eax, 1
.end:
    pop     ecx
    pop     ebx
}/

asm seq(s1: str, s2: str) -> bool /{
    push   ebx
    push   ecx

    mov    eax, 1
    mov    ebx, $s1
    mov    dword ebx, [ebx]
    mov    ecx, $s2
    mov    dword ecx, [ecx]

.loop:
    mov    dl,[ebx]
    cmp    byte [ecx],dl
    jne    .false
    cmp    byte [ecx],0
    je     .end
    add     ebx,1
    add     ecx,1
    jmp    .loop

.false:
    mov     eax,0
.end:
    pop   ecx
    pop   ebx
}/

/** TODO it should be a bool
 *  a  == b
 *  false = 0 true = 1
 **/
inline asm ceq(a: char, b: char) -> bool /{
    mov     eax,$a
    cmp     eax,$b
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false
}/