asm malloc(size: i32) -> i32 /{
    push    ebx
    push    ecx
    push    edx

    %ifdef LOG_DEBUG
    $call(sprint, "start malloc ")
    $call(nprintln, $size)
    %endif

    mov     dword ecx, _reusable_heap_table

    %ifdef LOG_DEBUG
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,ecx
    $call(sprint, "  reusable size ")
    $call(nprintln, ebx)
    %endif

    mov dword ebx,$size
    mov dword edx,[_reusable_heap_table_next]
.reusable_loop:
    cmp     dword ecx,edx
    je      .allocation

    mov     eax,[ecx]
    cmp     dword [eax + 8],ebx
    je     .reusable_good
    add     ecx,4
    jmp    .reusable_loop
.reusable_good:
    %ifdef LOG_DEBUG
    $call(nprintln, "reusable found")
    %endif
    $call(removeFromReused,ecx)
    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 12], 0     ; count
    mov     dword [eax + 16], 0     ; reusable table
    jmp     .end

.allocation:
    %ifdef LOG_DEBUG
    $call(sprintln, "  allocation ")
    %endif

    mov     dword eax,_heap_table_next; the pointer to the heap table
    mov     dword edx,[_heap_table_size]
    add     edx,_heap_table
    cmp     eax,edx
    jb     .loop_ok
    $call(sprintln, "Out of heap space")
    $call(exitMain, 1)

.loop_ok:
    mov     dword eax,[_heap_table_next]
    %ifdef LOG_DEBUG
    $call(sprintln, "  new address")
    %endif

    mov     dword ecx,[_heap]
    sub     ecx,_heap_buffer
    cmp     ecx,[_heap_size]
    jb      .new_address_ok
    $call(sprintln, "Out of memory")
    $call(exitMain, 1)

.new_address_ok:
    %ifdef LOG_DEBUG
    $call(sprintln, "  newAddress Ok")
    %endif

    mov     dword ecx,[_heap]
    mov     dword [eax],ecx
    mov     dword edx, $size
    add     ecx, edx
    mov     dword [_heap],ecx
    mov     dword [eax + 5 * 4],0 ; to be sure that the next slot is considered free

    %ifdef LOG_DEBUG
    $call(sprintln, "  allocate")
    %endif

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 8], edx    ; size
    mov     dword [eax + 12], 0     ; count
    mov     dword [eax + 16], 0     ; reusable table
    add     eax, 20
    mov     [_heap_table_next],eax
    sub     eax, 20

.end:
    ;mov     dword eax,[eax]

    %ifdef LOG_DEBUG
    $call(sprint, "  ")
    $call(nprintln, eax)
    $call(sprintln, "end malloc")
    %endif

    pop     edx
    pop     ecx
    pop     ebx
}/

asm addStaticStringToHeap(s: i32) -> i32 /{
    push    ebx
    push    ecx
    push    edx

    mov     dword eax,_heap_table_next; the pointer to the heap table
    mov     dword edx,[_heap_table_size]
    add     edx,_heap_table
    cmp     eax,edx
    jb     .ok
    $call(sprintln, "Out of heap space")
    $call(exitMain, 1)

.ok:
    mov     dword eax,[_heap_table_next]

    mov     dword ecx,$s
    mov     dword [eax],ecx
    mov     dword [eax + 5 * 4],0 ; to be sure that the next slot is considered free

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 8], 0      ; size
    mov     dword [eax + 12], 1     ; count
    mov     dword [eax + 16], 0     ; reusable table
    add     eax, 20
    mov     [_heap_table_next],eax
    sub     eax, 20

.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

asm deref(address: i32, descr: &str) -> i32 /{
    push    eax
    push    ebx

    %ifdef LOG_DEBUG
    $call(sprint, "start deref ")
    $call(nprintln, $address)
    $call(sprint, "  ")
    $call(sprintln, $descr)
    %endif

    %ifdef LOG_DEBUG
    mov     dword eax, _reusable_heap_table
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,eax
    $call(sprint, "  reusable size ")
    $call(nprintln, ebx)
    %endif

    %ifdef LOG_DEBUG
    ; we check if the address is valid
    mov     dword eax,_heap_table
    cmp     dword $address,eax
    jb     .invalid_address
    add     eax,[_heap_table_size]
    cmp     dword $address,eax
    jg      .invalid_address
    %endif

    mov     dword eax,$address
    mov     dword ebx,[eax + 12] ; the count

    %ifdef LOG_DEBUG
    cmp     ebx,0
    jz      .negative_count
    %endif

    sub     ebx,1

    %ifdef LOG_DEBUG
    $call(printRefCount, ebx)
    %endif

    mov     dword [eax + 12],ebx
    cmp     ebx,0
    jnz     .end

    %ifdef LOG_DEBUG
    $call(sprint, "  deallocated ")
    $call(nprintln, eax)
    %endif

    mov     dword [eax + 4],0; allocated false
    mov     dword ebx,[_reusable_heap_table_next]
    mov     dword [eax + 16],ebx; reusable table
    mov     dword [ebx],eax

    %ifdef LOG_DEBUG
    $call(addReused, ebx, [ebx])
    %endif

    add     ebx,4
    mov     dword [_reusable_heap_table_next],ebx

    jmp     .end
.negative_count:
    call    negativeCount
    jmp     .end
.invalid_address:
    call    invalidAddress
.end:
    %ifdef LOG_DEBUG
    $call(sprintln, "end deref")
    %endif
    pop     ebx
    pop     eax
}/

/**
 * given an address in the allocation table, dereferences that entry and adds it to the reusable table
 */
asm freeMem(address: i32) /{
    push    ebx

    mov     eax, $address
    mov     dword [eax + 4],0; allocated false
    mov     dword ebx,[_reusable_heap_table_next]
    mov     dword [eax + 16],ebx; reusable table
    mov     dword [ebx],eax
    add     ebx,4
    mov     dword [_reusable_heap_table_next],ebx

    pop ebx
}/

asm addRef(address: i32, descr: &str) /{
    push    eax
    push    ebx
    push    ecx

    %ifdef LOG_DEBUG
    $call(sprint, "start addRef ")
    $call(nprintln, $address)
    $call(sprint, "  ")
    $call(sprintln, $descr)
    %endif

    %ifdef LOG_DEBUG
    mov     dword ecx, _reusable_heap_table
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,ecx
    $call(sprint, "  reusable size ")
    $call(nprintln, ebx)
    %endif

    %ifdef LOG_DEBUG
    ; we check if the address is valid
    mov     dword eax,_heap_table
    cmp     $address,eax
    jb     .invalid_address
    add     eax,[_heap_table_size]
    cmp     $address,eax
    jg      .invalid_address
    %endif

    mov     dword eax,$address

    mov     dword ebx,[eax + 12] ; the count
    add     ebx,1

    %ifdef LOG_DEBUG
    $call(printRefCount, ebx)
    %endif

    mov     dword [eax + 12],ebx

    mov     dword ebx,[eax + 16]
    cmp     ebx,0                ; no reusable_table
    je     .allocate

    $call(removeFromReused, ebx)
    mov     dword [eax + 16],0

.allocate:
    mov     dword [eax + 4],1   ; allocated true
    jmp     .end
.invalid_address:
    call    invalidAddress
.end:
    %ifdef LOG_DEBUG
    $call(sprintln, "end addRef")
    %endif

    pop     ecx
    pop     ebx
    pop     eax
}/

asm removeFromReused(address: i32) /{
    push    eax

    %ifdef LOG_DEBUG
    $call(sprint, "  remove from reused ")
    $call(nprint, $address)
    $call(sprint, " ")
    mov     dword eax, $address
    $call(nprint, [eax])
    %endif

    mov     dword eax,[_reusable_heap_table_next]
    sub     eax,4
    mov     dword [_reusable_heap_table_next],eax

    %ifdef LOG_DEBUG
    $call(sprint, " ")
    $call(nprintln, eax)
    %endif

    cmp     dword eax,$address
    jbe     .end

    push    ebx

    mov     dword eax,[eax]      ; the pointer to the allocation table that we want to move
    mov     dword ebx,$address   ; the pointer to the reusable table that we want to delete
    mov     dword [ebx],eax      ; we move the pointer to the allocation table that we want to move, to the reusable table that we want to delete
    mov     dword [eax + 16],ebx ; we must update the pointer in the allocation table

    pop     ebx

.end:
    pop     eax
}/

fn printReplacedReused(address: i32, value: i32) {
    sprint("  replaced reused ");
    nprint($address);
    sprint(" with value ");
    nprintln($value);
}

fn addReused(address: i32, value: i32) {
    sprint("  add reused ");
    nprint($address);
    sprint(" with value ");
    nprintln($value);
}

fn printRefCount(count: i32) {
    sprint("  ref count: ");
    nprintln($count);
}

fn invalidAddress() {
    sprintln("invalid address");
    exitMain(1);
}

asm printAllocated() /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     dword eax,_heap_table
    mov     dword ebx,0
    mov     dword ecx,0
.loop:
    cmp     dword ebx,[_heap_table_size]
    jge     .end
    mov     dword edx,[eax + 4]; 1 == allocated
    cmp     dword edx,0
    jz      .not_allocated
    add     dword ecx,[eax + 8] ; size
.not_allocated:
    add     eax, 5 * 4
    add     ebx, 5 * 4
    jmp     .loop
.end:
    push    ecx
    call    nprint
    add     esp, 4
    call    printAllocatedString

    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

asm printTableSlotsAllocated() /{
    push    eax
    push    ebx

    mov     dword eax,0
    mov     dword ebx,_heap_table
.loop:
    cmp     dword [ebx],0
    jz      .end
    add     eax,1
    add     ebx,5 * 4
    jmp     .loop
.end:
    push    eax
    call    nprint
    add     esp, 4
    call    printTableSlotsAllocatedString

    pop     ebx
    pop     eax
}/

fn printTableSlotsAllocatedString() {
    sprintln(" table slots allocated");
}

fn printAllocatedString() {
    sprintln(" bytes allocated");
}

fn negativeCount() {
    sprintln("Negative allocation count");
    exitMain(1);
}

fn derefAddressNotFound() {
    sprintln("Deref: address not found");
    exitMain(1);
}
