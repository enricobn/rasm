include "compiler.rasm"
include "conditionals.rasm"
include "io.rasm"
include "list.rasm"
include "new_allocator.rasm"
include "logic.rasm"
include "str.rasm"
include "vec.rasm"

extern "exit"

/** Adds two numbers **/
inline asm add(n1: i32, n2: i32) -> i32 /{
    mov     eax, $n1
    add     eax, $n2
}/

/** Subtracts two numbers **/
inline asm sub(n1: i32, n2: i32) -> i32 /{
    mov     eax, $n1
    sub     eax, $n2
}/

/** Multiply two numbers, but we return only the low 32 bit (edx is saved) **/
inline asm mul(n1: i32, n2: i32) -> i32 /{
    push    edx
    mov     eax, $n1
    mul     dword $n2
    pop     edx
}/

asm exitMain(status: i32) /{
    %ifdef LIBC
    push    dword $status
    call    exit
    %else
    mov     ebx, $status    ; Arg one: the status
    mov     eax, 1          ; Syscall number: 1
    int     0x80
    %endif
}/

asm argc() -> i32 /{
    mov     eax,[_rasm_args]
}/

// TODO unsafe use Option
asm argv(i: i32) -> str /{
    push edx ; since the mul function stores the result even in edx
    push ebx
    push ecx
    mov ebx, _rasm_args
    mov ecx,4           ; i add 4*i to the base address (_rasm_args)
    mov eax,$i
    inc eax             ; we skip the length (argc)
    mul ecx
    add ebx,eax
    mov eax,[ebx]
    pop ecx
    pop ebx
    pop edx
}/

// from https://stackoverflow.com/questions/19580282/nasm-assembly-linux-timer-or-sleep
// TODO use TimeVal
asm sleep(sec: i32, nsec: i32) -> i32 /{
    push ebx
    push ecx
    mov dword eax,$sec
    mov dword [tv_sec], eax
    mov dword eax,$nsec
    mov dword [tv_usec], eax
    mov eax, 162
    mov ebx, timeval
    mov ecx, 0
    int 0x80
    pop ecx
    pop ebx
}/

struct TimeVal {
    sec: i32,
    nano: i32
}

asm time() -> TimeVal /{
    push    ecx
    push    ebx
    $call(TimeVal, 0, 0)
    push    dword eax
    mov     ebx, [eax]
    $call(malloc, 8)
    mov     dword ecx, [eax]  ; timezone
    mov     eax, 78           ; call number = gettimeofday
    int     0x80
    pop     eax
    pop     ebx
    pop     ecx
}/

fn print(timeVal: TimeVal) {
    let sec = TimeVal::sec(timeVal);
    let nano = TimeVal::nano(timeVal);
    print("sec=");
    print(sec);
    print(" nano=");
    print(nano);
}

asm memcopy(source: i32, dest: i32, len: i32) /{
    push    ecx
    push    esi
    push    edi
    mov     esi, $source
    mov     edi, $dest
    mov     ecx, $len

; first we copy word by word
.loop4:
    cmp     ecx, 4
    jb      .loop1
    movsd
    sub     ecx,4
    jmp     .loop4

.loop1:
    add     ecx,1
; then byte by byte
.loop:
    sub     ecx,1
    jz      .end
    movsb
    jmp     .loop
.end:
    pop     edi
    pop     esi
    pop     ecx
}/