include "compiler.rasm"
include "conditionals.rasm"
include "io.rasm"
include "new_allocator.rasm"
include "logic.rasm"
include "str.rasm"

extern "exit"

/** Adds two numbers **/
inline asm nadd(n1: i32, n2: i32) -> i32 /{
    mov     eax, $n1
    add     eax, $n2
}/

/** Multiply two numbers **/
inline asm nmul(n1: i32, n2: i32) -> i32 /{
    mov     eax, $n1
    mul     dword $n2
}/

asm exitMain(status: i32) /{
    %ifdef LIBC
    push    dword $status
    call    exit
    %else
    mov     ebx, $status    ; Arg one: the status
    mov     eax, 1          ; Syscall number: 1
    int     0x80
    %endif
}/

asm argc() -> i32 /{
    mov     eax,[_rasm_args]
}/

// TODO unsafe
asm argv(i: i32) -> &str /{
    push ebx
    push ecx
    mov ebx, _rasm_args
    mov ecx,4           ; i add 4*i to the base address (_rasm_args)
    mov eax,$i
    inc eax             ; we skip the length (argc)
    mul ecx
    add ebx,eax
    mov eax,[ebx]
    pop ecx
    pop ebx
}/

// from https://stackoverflow.com/questions/19580282/nasm-assembly-linux-timer-or-sleep
asm sleep(sec: i32, nsec: i32) -> i32 /{
    push ebx
    push ecx
    mov dword eax,$sec
    mov dword [tv_sec], eax
    mov dword eax,$nsec
    mov dword [tv_usec], eax
    mov eax, 162
    mov ebx, timeval
    mov ecx, 0
    int 0x80
    pop ecx
    pop ebx
}/

// TODO get rid of this, for now is used to return constants
inline asm itn(n: i32) -> i32 /{
    mov     eax,$n
}/

asm memcopy(source: &i32, dest: &i32, len: i32) /{
    push    eax
    push    ebx
    push    ecx
    push    edx
    mov     eax, $source
    mov     ebx, $dest
    mov     ecx, $len

; first we copy word by word
.loop4:
    cmp     ecx, 4
    jb      .loop
    mov     dword edx,[eax]
    mov     dword [ebx],edx
    add     ebx,4
    add     eax,4
    sub     ecx,4
    jmp     .loop4

; then byte by byte
.loop:
    cmp     ecx, 0
    jz      .end
    mov     byte dl,[eax]
    mov     byte [ebx],dl
    add     ebx,1
    add     eax,1
    sub     ecx,1
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/