include "new_allocator.rasm"
include "logic.rasm"

/**
 * Prints the number to standard output.
 * TODO it supports only 10 digits
 * https://stackoverflow.com/questions/25064565/printing-an-integer-with-x86-32-bit-linux-sys-write-nasm
 * TODO it is not thread safe
 **/
asm nprint(n: i32) /{
    push    esi
    push    eax
    push    ebx
    push    ecx
    push    edx
    mov     eax,$n ; integer value to convert
    mov     esi,_rasm_buffer_10b
    add     esi,9
    mov     byte [esi],0    ; String terminator

    mov ebx,10
    xor ecx,ecx         ; initialize length
.next_digit:
    xor edx,edx         ; Clear edx prior to dividing edx:eax by ebx
    div ebx             ; eax /= 10
    add dl,'0'          ; Convert the remainder to ASCII
    dec esi             ; store characters in reverse order
    inc ecx             ; length

    mov [esi],dl
    test eax,eax
    jnz .next_digit     ; Repeat until eax==0

    mov    edx,ecx ; the length
    mov    ecx,esi ; the pointer to the first digit (not necessarily the start of the provided buffer)
    mov    ebx, 1  ; stdout
    mov    eax, 4  ; write
    int    80h

    pop    edx
    pop    ecx
    pop    ebx
    pop    eax
    pop    esi
}/

/**
 * Prints a new line to standard output.
 */
asm println() /{
    push    edx
    push    ecx
    push    ebx
    push    eax

    mov     dword ecx, _NEW_LINE
    mov     ebx, 1
    mov     eax, 4
    mov     edx, 1
    int     80h

    pop     eax
    pop     ebx
    pop     ecx
    pop     edx
}/

/**
 * Prints the string to the standard output.
 **/
asm sprint(s: &str) /{
    push    edx
    push    ecx
    push    ebx
    push    eax
    mov     eax,$s
    push    eax
    call    slen

    mov     edx, eax
    pop     eax

    mov     dword ecx, [eax]
    mov     ebx, 1
    mov     eax, 4
    int     80h

    pop     eax
    pop     ebx
    pop     ecx
    pop     edx
}/

fn printESC() /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     edx, 1 ; num of chars
    mov     ecx, _ESC
    mov     ebx, 1
    mov     eax, 4
    int     80h

    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

/** Returns the length of the string **/
asm slen(s: &str) -> i32 /{
    push    ebx             ; Save ebx to the stack since we use it
    mov     eax, $s         ; Get the parameter from the stack (4 the PC + 4 ebp) and put it in eax
    mov     dword eax,[eax]
    mov     ebx, eax

.nextchar:
    cmp     byte [eax], 0
    jz      .finished
    inc     eax
    jmp     .nextchar

.finished:
    sub     eax, ebx
    pop     ebx
}/

/** Returns the length of the string when s is a direct pointer to the string, not in the allocation tables like in the other methods  **/
asm slenInternal(s: i32) -> i32 /{
    push    ebx             ; Save ebx to the stack since we use it
    mov     eax, $s         ; Get the parameter from the stack (4 the PC + 4 ebp) and put it in eax
    mov     ebx, eax

.nextchar:
    cmp     byte [eax], 0
    jz      .finished
    inc     eax
    jmp     .nextchar

.finished:
    sub     eax, ebx
    pop     ebx
}/

asm addStaticStringToHeap(s: i32) -> i32 /{
    push    ebx

    $call(slenInternal, $s)
    mov     ebx,eax
    add     ebx,1
    $call(malloc,ebx)
    $call(addRef,eax,eax)
    $call(memcopy,$s,[eax],ebx)

    pop     ebx
}/

/*
 *  Creates the "struct" that holds the count and the arguments
 *  address:    the target pointer to the "struct" that holds the count and then the pointers (to the allocation table) to the arguments
 *  esp:        the pointer to the initial esp, where in the first slot (dword) there is the count of arguments and in
 *              the subsequent slots there are the pointers to the strings
 */
asm createCmdLineArguments(address: i32,esp: i32) -> i32 /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx,$esp
    mov     dword ecx,[ebx]     ; the counter
    mov     dword edx,$address
    mov     dword [edx],ecx
    add     ecx,1

.loop:
    add     ebx,4
    add     edx,4
    sub     ecx,1
    jz      .end
    $call(addStaticStringToHeap,[ebx])
    mov     dword [edx],eax
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

/** Adds two numbers **/
inline asm nadd(n1: i32, n2: i32) -> i32 /{
    mov     eax, $n1
    add     eax, $n2
}/

/** false = 0 true = any other value **/
inline asm if<T>(cond: i32, ftrue: fn() -> T, ffalse: fn() -> T) -> T /{
    mov     eax,$cond
    cmp     eax, 0
    jz      $+13
    mov     eax, $ftrue     ; ftrue points to the lambda space
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+11
    mov     eax, $ffalse    ; ffalse points to the lambda space, we do the same as above
    push    eax
    call    [eax]           ; false value
    add     esp, 4
}/

/** false = 0 true = any other value **/
inline asm ifRun(cond: i32, ftrue: fn() -> (), ffalse: fn() -> ()) /{
    mov     eax,$cond
    cmp     eax, 0
    jz      $+13
    mov     eax, $ftrue     ; ftrue points to the lambda space
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+11
    mov     eax, $ffalse    ; ffalse points to the lambda space, we do the same as above
    push    eax
    call    [eax]           ; false value
    add     esp, 4
}/

/**
    false = 0 true = any other value

    ATTENTION: it is not short circuit, it always evaluates both arguments before calling the function,
    if you need a short circuit then use if function
    false = 0 true = any other value
**/
inline asm ifImmediate<T>(cond: i32, vtrue: T, vfalse: T) -> T /{
    mov     eax,$cond
    cmp     eax, 0
    jz      $+10
    mov     eax, $vtrue
    jmp     $+11
    nop     ; nops are used because it's inlined and $vtrue could be an immediate value or an address so we don't know where to jump exactly...
    nop
    nop
    mov     eax, $vfalse
    nop     ; nops are used because it's inlined and $vfalse could be an immediate value or an address so we don't know where to jump exactly...
    nop
    nop
}/

/**
    false = 0 true = any other value

    ATTENTION: the true branch is not short circuit, it is always evaluated before calling the function,
    if you need a full short circuit then use the if function
    false = 0 true = any other value
**/
inline asm ifImmediateThen<T>(cond: i32, vtrue: T, ffalse: fn() -> T) -> T /{
    mov     eax,$cond
    cmp     eax, 0
    jz      $+10
    mov     eax, $vtrue
    jmp     $+14
    nop     ; nops are used because it's inlined and $vtrue could be an immediate value or an address so we don't know where to jump exactly...
    nop
    nop
    mov     eax, $ffalse
    push    eax
    call    [eax]
    add     esp, 4
}/

/** TODO it should be a bool
 *  a  <= b
 *  false = 0 true = 1
 **/
inline asm lessOrEqual(a: i32, b: i32) -> i32 /{
    mov     eax,$a
    cmp     eax,$b
    mov     eax,1 ; true
    jbe     $+7  ; Jump if Below or Equal unsigned comparison
    mov     eax,0 ; false
}/

/** TODO it should be a bool
 *  a  < b
 *  false = 0 true = 1
 **/
inline asm less(a: i32, b: i32) -> i32 /{
    mov     eax,$a
    cmp     eax,$b
    mov     eax,1 ; true
    jb     $+7  ; Jump if Below or Equal unsigned comparison
    mov     eax,0 ; false
}/

/** TODO it should be a bool
 *  a  <= b
 *  false = 0 true = 1
 **/
inline asm greater(a: i32, b: i32) -> i32 /{
    mov     eax,$a
    cmp     eax,$b
    mov     eax,1 ; true
    jg      $+7  ; Jump if greater unsigned comparison
    mov     eax,0 ; false
}/

/** TODO it should be a bool
 *  a  == b
 *  false = 0 true = 1
 **/
inline asm eq(a: i32, b: i32) -> i32 /{
    mov     eax,$a
    cmp     eax,$b
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false
}/

asm exit(status: i32) /{
    mov     ebx, $status    ; Arg one: the status
    mov     eax, 1          ; Syscall number:
    int     0x80
}/

asm argc() -> i32 /{
    mov     eax,[_rasm_args]
}/

// TODO unsafe
asm argv(i: i32) -> &str /{
    push ebx
    push ecx
    mov ebx, _rasm_args
    mov ecx,4           ; i add 4*i to the base address (_rasm_args)
    mov eax,$i
    inc eax             ; we skip the length (argc)
    mul ecx
    add ebx,eax
    mov eax,[ebx]
    pop ecx
    pop ebx
}/

/**
 * parse a string to a number
 from https://stackoverflow.com/questions/19461476/convert-string-to-int-x86-32-bit-assembler-using-nasm
 **/
asm atoi(s: &str) -> i32 /{
    push    ecx
    push    edx
    mov edx, $s ; the pointer to the stack table our string
    mov dword edx, [edx]
    xor eax, eax ; zero a "result so far"
    .top:
    movzx ecx, byte [edx] ; get a character
    inc edx ; ready for next one
    cmp ecx, '0' ; valid?
    jb .done
    cmp ecx, '9'
    ja .done
    sub ecx, '0' ; "convert" character to number
    imul eax, 10 ; multiply "result so far" by ten
    add eax, ecx ; add in current digit
    jmp .top ; until done
.done:
    pop    edx
    pop    ecx
}/

asm lambdaSpaceMalloc(size: i32) -> i32 /{
    mov     eax,[_lambda_space_stack]
    add     eax,$size
    mov     dword [_lambda_space_stack],eax
    sub     eax,$size
}/

asm lambdaSpaceMdealloc(size: i32) /{
    push    eax
    mov     eax,[_lambda_space_stack]
    sub     eax,$size
    mov     dword [_lambda_space_stack],eax
    pop     eax
}/

// from https://stackoverflow.com/questions/19580282/nasm-assembly-linux-timer-or-sleep
asm sleep(sec: i32, nsec: i32) -> i32 /{
    push ebx
    push ecx
    mov dword eax,$sec
    mov dword [tv_sec], eax
    mov dword eax,$nsec
    mov dword [tv_usec], eax
    mov eax, 162
    mov ebx, timeval
    mov ecx, 0
    int 0x80
    pop ecx
    pop ebx
}/

// TODO get rid of this, for now is used to return constants
inline asm itn(n: i32) -> i32 /{
    mov     eax,$n
}/

asm memcopy(source: &i32, dest: &i32, len: i32) /{
    push    eax
    push    ebx
    push    ecx
    push    edx
    mov     eax, $source
    mov     ebx, $dest
    mov     ecx, $len
.loop:
    cmp     ecx, 0
    jz      .end
    mov     byte dl,[eax]
    mov     byte [ebx],dl
    add     ebx,1
    add     eax,1
    sub     ecx,1
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/