asm vecOf<T>(value: T) -> Vec<T> /{
    $call(malloc, 8, " for vecOf")
    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 1
    push    ebx
    mov     dword ebx, $value
    mov     dword [eax + 4], ebx
    pop     ebx

    pop     eax
}/

asm vecOf<T>(v1: T, v2: T, v3: T) -> Vec<T> /{
    $call(malloc, 16, " for vecOf")
    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 3
    push    ebx
    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx
    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx
    mov     dword ebx, $v3
    mov     dword [eax + 12], ebx
    pop     ebx

    pop     eax
}/

asm forEach<T>(vec: Vec<T>, f: fn(T) -> ()) /{
    push    ebx
    push    ecx
    push    edx
    mov     dword ebx, $vec
    mov     dword ebx, [ebx]
    mov     dword ecx, [ebx]    ; count
    add     ebx, 4  ; address of first value
    mov     edx, $f         ; points to the lambda space
    mov     dword edx,[edx]
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    push    dword edx       ; the address to the lambda space is the last argument of every lambda
    call    [edx]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 8
    add     ebx, 4
    dec     ecx
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

// end exclusive
asm vecRange(start: i32, end: i32) -> Vec<i32> /{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $end
    sub     dword ebx, $start
    push    ebx                 ; the size
    inc     ebx                 ; + 1 for the size
    add     ebx, ebx
    add     ebx, ebx
    $call(malloc, ebx, " for vecRange")
    pop     ebx
    push    eax
    mov     dword ecx, [eax]
    mov     dword [ecx], ebx    ; the size
    add     ecx, 4              ; the pointer to the next value
    mov     dword edx, 0        ; the actual value
.loop:
    cmp     dword ebx, 0
    jz      .end
    mov     dword [ecx], edx

    add     ecx, 4
    dec     ebx
    inc     edx
    jmp     .loop
.end:
    pop     eax
    pop     edx
    pop     ecx
    pop     ebx
}/

asm map<T,T1>(vec: Vec<T>, f: fn(T) -> T1) -> Vec<T1>/{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    push    ecx
    inc     ecx                 ; + 1 for the size
    add     ecx, ecx
    add     ecx, ecx
    $call(malloc, ecx, " for vec map)
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    $call(addRef, eax, "for map")
    pop     ecx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], ecx
    mov     edx, eax
    add     edx, 4          ; address of first value to write
    add     ebx, 4          ; address of first value to read
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    $addRef(eax:T1)
    ; TODO do I need to dereference it?
    mov     dword [edx], eax
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    $call(deref, eax, "for map")
    pop     edx
    pop     ecx
    pop     ebx
}/

/** false = 0 true = any other value **/
asm vecAnyMatch<T>(vec: Vec<T>, f: fn(T) -> bool) -> bool /{
    push    ebx
    push    ecx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    add     ebx, 4              ; the address of the first value
.loop:
    cmp     dword ecx, 0
    jz      .false
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jnz      .end
    add     ebx, 4
    dec     ecx
    jmp     .loop
.false:
    mov     dword eax, 0
.end:
    pop     ecx
    pop     ebx
}/

asm count<T>(vec: Vec<T>, f: fn(T) -> bool) -> i32 /{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    add     ebx, 4              ; the address of the first value
    mov     dword edx, 0        ; result
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    inc     edx
.false:
    add     ebx, 4
    dec     ecx
    jmp     .loop
.end:
    mov     dword eax, edx
    pop     edx
    pop     ecx
    pop     ebx
}/

// TODO the resulting vector is allocated with the size of the original vector, but the count of the elements is right
asm filter<T>(vec: Vec<T>, filter: fn(T) -> bool) -> Vec<T> /{
    push    ebx
    push    ecx
    push    edx

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    push    ebx
    ; multiply ebx by 4
    shl     ebx, 2
    ; add the space for the size
    add     ebx, 4
    $call(malloc, ebx, " for vec filter")
    $call(addRef, eax, "for vec filter")
    pop     ebx

    push    eax

    mov     dword edx, [eax]
    add     edx, 4  ; the address of the value in the new array
.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    mov     dword eax, $filter
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    mov     dword eax, [ecx]
    mov     dword [edx], eax
    add     edx, 4
.false:
    dec     ebx
    add     ecx, 4
    jmp     .loop
.end:
    pop     eax
    $call(deref, eax, "for vec filter")
    sub     dword edx, [eax]
    ; divide ebx by 4, we get the len
    shr     edx, 2
    dec     edx         ; we remove 1 for the size
    mov     dword ecx, [eax]
    mov     dword [ecx], edx
    pop     edx
    pop     ecx
    pop     ebx
}/

asm vecOf<T>(v1: T, v2: T) -> Vec<T> /{
    $call(malloc, 12, " for vecOf 2")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 2

    push    ebx

    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx
    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx
    pop     ebx
    pop     eax
}/

asm vecOf<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, v7: T, v8: T) -> Vec<T> /{
    $call(malloc, 36, " for vecOf 8")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 8

    push    ebx

    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx

    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx

    mov     dword ebx, $v3
    mov     dword [eax + 12], ebx

    mov     dword ebx, $v4
    mov     dword [eax + 16], ebx

    mov     dword ebx, $v5
    mov     dword [eax + 20], ebx

    mov     dword ebx, $v6
    mov     dword [eax + 24], ebx

    mov     dword ebx, $v7
    mov     dword [eax + 28], ebx

    mov     dword ebx, $v8
    mov     dword [eax + 32], ebx

    pop     ebx
    pop     eax
}/

asm flatten<T>(vec: Vec<Vec<T>>) -> Vec<T> /{
    $call(vecFlattenCreate, $vec:i32)
    push    eax

    push    ebx
    push    ecx
    push    edx

    mov     edx, [eax]
    add     edx, 4              ; the address of the value in the result array

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]    ; the address of the allocation table of the inner array
    mov     dword ecx, [ecx]    ; the address of the memory of the inner array
    mov     dword eax, [ecx]    ; the size of the inner array
    shl     eax, 2              ; the length in bytes

    add     ecx, 4
    $call(memcopy, ecx, edx, eax)
    pop     ecx

    add     ecx, 4
    add     edx, eax
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

/* TODO theoretically it should be asm vecFlattenCreate<T>(vec: Vec<Vec<T>>) -> Vec<T>
 *      but for now there's no support for calling a generic function from assembly
 *      (the real function name is different for each real type)...
 */
asm vecFlattenCreate(vec: i32) -> i32 /{
    push    ebx
    push    ecx
    push    edx

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    mov     edx, 0              ; the size of the new array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]
    mov     dword ecx, [ecx]
    add     dword edx, [ecx]
    pop     ecx
    add     ecx, 4
    dec     ebx
    jmp     .loop
.end:
    push    edx
    inc     edx
    shl     edx,2
    $call(malloc, edx, " for vecFlattenCreate")
    pop     edx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], edx
    pop     eax
    pop     edx
    pop     ecx
    pop     ebx
}/

asm length<T>(vec: Vec<T>) -> i32 /{
      mov     dword eax, $vec
      mov     dword eax, [eax]
      mov     dword eax, [eax]
}/

asm foldLeft<T,T1>(vec: Vec<T>, zero: T1, accum: fn(T1,T) -> T1) -> T1 /{
    push    ebx
    push    ecx
    push    edx

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the vector
    add     ecx, 4              ; the address of the value in the vector
    mov     eax, $zero          ; the actual value

.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    push    eax
    $addRef(eax: T1)
    ; TODO I must dereference it
    mov     dword edx, $accum
    mov     dword edx,[edx]
    push    dword edx
    call    [edx]
    add     esp, 12
    add     ecx, 4
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

asm first<T>(vec: Vec<T>) -> Option<T> /{
    push    ebx
    mov     dword ebx, $vec
    mov     dword ebx, [eax]
    mov     dword eax, [ebx]
    cmp     eax, 0
    jz      .empty
    mov     dword eax, [ebx + 4]
    $addRef(eax: T)
    $call(Option::Some, eax)
    jmp     .end
.empty:
    mov     dword eax, [_enum_Option_None]
.end:
    pop     ebx
}/

fn VecReferences(vec: i32, generic: i32) -> i32 {
    vec;
}

asm Vec<T>() -> Vec<T> /{
    $call(malloc, 4, " for Vec")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 0
    pop     eax
}/