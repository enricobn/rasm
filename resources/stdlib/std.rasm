include "backend/nasm-i32/all.rasm"
include "list.rasm"
include "vec.rasm"

/**
 * Prints the string to standard output adding a line feed to the end.
 **/
fn sprintln(s: str) {
    sprint(s);
    println();
}

/**
 * Prints the number to standard output adding a line feed to the end.
 **/
fn nprintln(n: i32) {
    nprint(n);
    println();
}

fn bprintln(b: bool) {
    ifRun(b, { -> sprintln("true");}, { -> sprintln("false");});
}


// https://man7.org/linux/man-pages/man4/console_codes.4.html
fn moveUp(count: i32) {
    printESC();
    sprint("[");
    nprint(count);
    sprint("A");
}

fn assert(value: bool) {
    ifRun(value,{ -> },{ ->
        sprintln("assertion failed");
        exitMain(1);
    });
}

fn assertFalse(value: bool) {
    ifRun(value,{ ->
        sprintln("assertion failed");
        exitMain(1);
    }, { -> });
}

fn with<T,O>(v: T, f: fn(T) -> O) -> O {
    f(v);
}

fn with2<T1,T2,O>(v1: T1, v2: T2, f: fn(T1, T2) -> O) -> O {
    f(v1, v2);
}

fn with3<T1,T2,T3,O>(v1: T1, v2: T2, v3: T3, f: fn(T1, T2, T3) -> O) -> O {
    f(v1, v2, v3);
}

fn with4<T1,T2,T3,T4,O>(v1: T1, v2: T2, v3: T3, v4: T4, f: fn(T1, T2, T3, T4) -> O) -> O {
    f(v1, v2, v3, v4);
}

fn runWith<T>(v: T, f: fn(T) -> ()) {
    f(v);
}

/*  OPTION */
enum Option<T> {
  Some(value : T),
  None
}

/**
 * Prints the string to standard output adding a line feed to the end.
 **/
fn cprintln(c: char) {
    cprint(c);
    println();
}
