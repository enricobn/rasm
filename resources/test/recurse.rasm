include "std.rasm"

recurse(5, {n -> nadd(n, -1);});

fn recurse(n: i32, f: fn(i32) -> ()) {
    nprintln(n);
    if(less(n,1), { -> }, { -> recurse(f(n), f);});
}

/*
inline asm nadd(n1: i32, n2: i32) -> i32 /{
    mov     eax, $n1
    add     eax, $n2
}/

asm malloc(size: i32) -> i32 /{
    push    ebx
    mov     eax,[_heap]
    mov     ebx,[_heap]
    add     ebx,$size
    mov    [_heap], ebx
    pop ebx
}/

/** false = 0 true = any other value **/
asm if(cond: i32, ftrue: fn() -> (), ffalse: fn() -> ()) -> i32 /{
    push    ebx
    mov     eax,$cond
    cmp     eax, 0
    jz      $+13
    mov     ebx, $ftrue     ; ftrue points to the pointer to the lambda
    push    ebx
    call    [ebx] ; true value
    add     esp, 4
    jmp     $+11
    mov     ebx, $ffalse    ; ffalse points to the pointer to the lambda
    push    ebx
    call    [ebx] ; false value
    add     esp, 4
    pop ebx
}/

/** TODO it should be a bool
 *  a  < b
 *  false = 0 true = any other value
 **/
inline asm less(a: i32, b: i32) -> i32 /{
    mov     eax,$a
    cmp     eax,$b
    mov     eax,1 ; true
    jb     $+7  ; Jump if Below or Equal (unsigned comparison)
    mov     eax,0 ; false
}/
*/