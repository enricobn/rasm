include "std.rasm"

enum Cell {
    Cell(x: i32, y: i32)
}

run(moveCells(
        listOf7(
           Cell::Cell(7, 1),
           Cell::Cell(1, 2),
           Cell::Cell(2, 2),
           Cell::Cell(2, 3),
           Cell::Cell(6, 3),
           Cell::Cell(7, 3),
           Cell::Cell(8, 3)), 10)
        , 30, atoi(argv(1)));

fn run(start: List<Cell>, size: i32, count: i32) {
    printCells(
        listFoldL(range(0, count), start, { prev, act ->
            printCells(prev, size, size);
            moveUp(30);
            //sleep(0, 250000000);
            next(prev, size, size);
          }), size, size);
}

fn moveCells(cells: List<Cell>, d: i32) -> List<Cell> {
    listMap(cells, { it -> CellMatch(it, { x, y -> Cell::Cell(nadd(x, d), nadd(y, d)); });});
}

fn printCells(cells: &List<&Cell>, width: i32, height: i32) {
    listMap(range(0, height), { y ->
        listMap(range(0, width), { x ->
            if(isAlive(cells, Cell::Cell(x, y)), { -> sprint("*"); }, { -> sprint(" "); });
        });
        sprintln("");
    });
}

fn allCells(width: i32, height: i32) -> List<Cell> {
    listFlatten(listMap(range(0, height), { y ->
        listMap(range(0, width), { x ->
            Cell::Cell(x, y);
        });
    }));
}

fn next(cells: &List<Cell>, width: i32, height: i32) -> List<Cell> {
    listFMap(allCells(width, height), { it ->
        with(listCount(adjacents(it),  { a -> isAlive(cells, a); }), { alive ->
            if(isAlive(cells, it), { ->
                if(less(alive, 2), { ->
                    List::Empty();
                }, { ->
                    if(less(alive, 4), { ->
                        listOf(it);
                    }, { ->
                        List::Empty();
                    });
                });
            }, { ->
                if(eq(alive, 3), { ->
                    listOf(it);
                }, { -> List::Empty(); });
            });
        });
    });
}

fn adjacents(cell: &Cell) -> List<Cell> {
    CellMatch(cell, { x, y ->
        listOf8(
            Cell::Cell(nadd(x, -1), nadd(y, -1)),
            Cell::Cell(nadd(x, -1), y),
            Cell::Cell(nadd(x, -1), nadd(y, 1)),
            Cell::Cell(x, nadd(y, 1)),
            Cell::Cell(x, nadd(y, -1)),
            Cell::Cell(nadd(x, 1), nadd(y, -1)),
            Cell::Cell(nadd(x, 1), y),
            Cell::Cell(nadd(x, 1), nadd(y, 1))
        );
    });
}

/** false = 0 true = any other value **/
fn isAlive(cells: &List<Cell>, cell: &Cell) -> i32 {
    listAnyMatch(cells, { it ->
        CellMatch(cell, { x, y ->
            CellMatch(it, { x1, y1 ->
                and(eq(x, x1), eq(y, y1));
            });
        });
    });
}