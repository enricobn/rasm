include "std.rasm"

let v = vecRange(0, 2);
nVecPrintln(v);

let m = map(v, { n -> add(n, 10);});
nVecPrintln(m);

ifRun(vecAnyMatch(v, { n -> eq(n, 0);}), { -> println("true");}, { -> println("false");});
ifRun(vecAnyMatch(v, { n -> eq(n, 2);}), { -> println("true");}, { -> println("false");});

ifRun(vecAnyMatch(vecRange(0, 2), { n -> eq(n, 0);}), { -> println("true");}, { -> println("false");});
ifRun(vecAnyMatch(vecRange(0, 2), { n -> eq(n, 2);}), { -> println("true");}, { -> println("false");});

println(count(vecRange(0, 10), { n -> eq(n, 5);}));
println(count(vecRange(0, 10), { n -> lessOrEqual(n, 5);}));
println(count(vecRange(0, 10), { n -> lessOrEqual(n, 1);}));

nVecPrintln(filter(vecRange(0, 10), { n -> lessOrEqual(n, 5);}));
nVecPrintln(filter(vecRange(0, 10), { n -> eq(n, 5);}));

nVecPrintln(vecOf(10, 15, 21, 2, 2, 1, 4, 5));

println(vecLength(vecRange(0, 10)));

let vecOfVecs = vecOf(vecOf(1), vecOf(2, 3));
nVecPrintln(flatten(vecOfVecs));

nVecPrintln(fmap(vecOf(1, 2), { n -> vecOf(n, add(n, 10));}));

nVecPrintln(zip(vecRange(0, 2), vecRange(0, 3), { n1, n2 -> add(n1, n2);}));

nVecPrintln(listToVec(listOf(0, 1, 2)));

println(foldLeft(vecRange(0, 5), 0, { prev, act -> add(prev, act);}));