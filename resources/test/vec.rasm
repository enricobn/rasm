include "std.rasm"

let v = vecRange(0, 2);
nVecPrintln(v);

let m = vecMap(v, { n -> nadd(n, 10);});
nVecPrintln(m);

ifRun(vecAnyMatch(v, { n -> eq(n, 0);}), { -> sprintln("true");}, { -> sprintln("false");});
ifRun(vecAnyMatch(v, { n -> eq(n, 2);}), { -> sprintln("true");}, { -> sprintln("false");});

ifRun(vecAnyMatch(vecRange(0, 2), { n -> eq(n, 0);}), { -> sprintln("true");}, { -> sprintln("false");});
ifRun(vecAnyMatch(vecRange(0, 2), { n -> eq(n, 2);}), { -> sprintln("true");}, { -> sprintln("false");});

nprintln(vecCount(vecRange(0, 10), { n -> eq(n, 5);}));
nprintln(vecCount(vecRange(0, 10), { n -> lessOrEqual(n, 5);}));
nprintln(vecCount(vecRange(0, 10), { n -> lessOrEqual(n, 1);}));

nVecPrintln(vecFilter(vecRange(0, 10), { n -> lessOrEqual(n, 5);}));
nVecPrintln(vecFilter(vecRange(0, 10), { n -> eq(n, 5);}));

nVecPrintln(vecOf8(10, 15, 21, 2, 2, 1, 4, 5));