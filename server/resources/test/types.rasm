struct AStruct {
    anI32: i32
}

let anEnum = Option::Some(10);
let aStruct = AStruct(10);
let aVec = vecOf(10);

doSomething(anEnum);
doSomething(aStruct);
doSomething(aVec);
println(aStruct.anI32);

fn doSomething(value: Option<i32>) {
    println("anOption");
}

fn doSomething(value: AStruct) {
    println("aStruct");
}

fn doSomething(value: Vec<i32>) {
    println("aVec");
}

fn doSomething(value: Vec<AStruct>) {
    println("aStruct");
}

fn lambda(vec: Vec<AStruct>) -> Vec<AStruct> {
    vec.map(fn(it) {it;});
}