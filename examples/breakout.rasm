include "std.rasm"
include "sdl.rasm"

extern "printf"

enum Color {
    White,
    Yellow,
    Red,
    Green,
    Blue
}

struct Brick {
    x: i32,
    y: i32,
    color: Color
}

enum XDirection {
    Left,
    Right
}

enum YDirection {
    Up,
    Down
}

struct Ball {
    x: i32,
    y: i32,
    xDir: XDirection,
    yDir: YDirection,
    lastUpdate: TimeVal
}

struct Resources {
    font: i32
}

struct World {
    bricks: Vec<Brick>,
    ball: Ball,
    bar: Bar,
    keys: Vec<i32>,
    resources: Resources
}

struct Bar {
    x: i32,
    velocity: i32,
}

const WIDTH = 1024;
const HEIGHT = 768;
const BRICKWIDTH = 34;
const BRICKHEIGHT = 10;
const BARWIDTH = 50;
const BARHEIGHT = 10;
const HEADERHEIGHT = 25;
const BALLSIZE = 5;

sdlInit();
sdlTTFInit();

let bricks = zip(vecRange(0, 30), vecRange(0, 10), {x, y -> Brick(mul(x, BRICKWIDTH), add(HEADERHEIGHT, mul(y, BRICKHEIGHT)) , Color::Yellow()); });
let font = sdlOpenFont("examples/DejaVuSerif.ttf", 24);
let initialWorld = World(bricks, Ball(500, 200, XDirection::Right(), YDirection::Down(), now()), Bar(500, 0), Vec(), Resources(font));

let win = sdlErrorIfNull(sdlCreateWindow("Bricks", 100, 100, WIDTH, HEIGHT), "SDL_CreateWindow Error: %s\n");
let ren = sdlErrorIfNull(sdlCreateRenderer(win), "SDL_CreateRenderer Error: %s\n");

// TODO a trick to create the function, since for now I can't call it with a $call macro in asm...
sdlSingleLoop(ren, initialWorld, { event,world -> world;}, { ren, world -> });

sdlLoop(ren, initialWorld,
    { event, world -> update(event, world);},
    { ren, world -> render(ren, world);}
);

sdlDestroyRenderer(ren);
sdlDestroyWindow(win);

fn update(event: Option<KeyEvent>, world: World) -> World {
    // println(time());
    // sleep(0, 1500);
    let actualTime = now();

    let bar = World::bar(world);
    let barPos = Bar::x(bar);
    let velocity = Bar::velocity(bar);
    let keys = World::keys(world);
    let resources = World::resources(world);

    let newKeys = Option::match(event, { e ->
          let key = KeyEvent::key(e);
          let state = KeyEvent::state(e);

          KeyState::match(state, { -> vecOf(key);}, { -> filter(keys, { k -> not(eq(k, key));});});
      }, { -> keys;});

    let left = mul(count(keys, { k -> eq(k, 80);}), sub(0, 1));
    let right = count(keys, { k -> eq(k, 79);});

    let newVelocity = add(left, right);

    let newBarPos = add(barPos, newVelocity);

    let newBar = Bar(newBarPos, newVelocity);

    let bricks = World::bricks(world);
    let ball = World::ball(world);
    let lastUpdate = Ball::lastUpdate(ball);
    let elapsed = elapsedTime(actualTime, lastUpdate);

    if(greater(elapsed, 2000), { ->
        let x = Ball::x(ball);
        let y = Ball::y(ball);
        let xDir = Ball::xDir(ball);
        let yDir = Ball::yDir(ball);

        let newX = XDirection::match(xDir, { -> sub(x, 1);} , { -> add(x,1);});
        let newY = YDirection::match(yDir, { -> sub(y, 1);} , { -> add(y,1);});

        let newXDir = if(or(greater(newX, sub(WIDTH, BALLSIZE)), less(newX, 1)), { -> flip(xDir); }, { -> xDir;});
        let newYDir = if(or(greater(newY, sub(HEIGHT, BALLSIZE)), less(newY, HEADERHEIGHT)), { -> flip(yDir); }, { -> yDir;});

        let newBall = Ball(newX, newY, newXDir, newYDir, actualTime);

        let collision = collision(bricks, newBall);

        let newBricks = Option::match(collision, { b1 -> filter(bricks, { b2 -> not(eq(b1, b2)); }); }, { -> bricks; });

        let newBall1 = Option::match(collision, { brick -> ballAfterCollision(ball, brick); }, { -> newBall; });

        let newBall2 = if(collides(newX, newY, newBarPos), { -> Ball(newX, newY, newXDir, flip(newYDir), actualTime);}, { -> newBall1; });

        World(newBricks, newBall2, newBar, newKeys, resources);
    }, { ->
        World(bricks, ball, newBar, newKeys, resources);
    });
}

asm printAddress<T>(message: str, o: T) /{
    $call(print, $message)
    $call(print, $o: i32)
    $call(print, "\n")
}/

fn render(ren: SDLRenderer, world: World) {
    sdlSetRenderDrawColor(ren, 0, 0, 0, 255);
    sdlRenderClear(ren);
    sdlSetRenderDrawColor(ren, 255, 0, 0, 255);

    let resources = World::resources(world);
    let font = Resources::font(resources);

    let bricks = World::bricks(world);

    forEach(bricks, { brick ->
        let x = Brick::x(brick);
        let y = Brick::y(brick);
        sdlRenderFillRect(ren, SDLRect(add(x, 1), add(y, 1), sub(BRICKWIDTH, 2), sub(BRICKHEIGHT, 2)));
    });

    sdlSetRenderDrawColor(ren, 255, 255, 255, 255);
    let bar = World::bar(world);
    let barPos = Bar::x(bar);

    sdlRenderFillRect(ren, SDLRect(barPos, sub(HEIGHT, BARHEIGHT), BARWIDTH, BARHEIGHT));

    let ball = World::ball(world);
    let x = Ball::x(ball);
    let y = Ball::y(ball);

    sdlRenderFillRect(ren, SDLRect(x, y, BALLSIZE, BALLSIZE));

    sdlSetRenderDrawColor(ren, 0, 0, 255, 0);
    sdlRenderFillRect(ren, SDLRect(0, 0, WIDTH, HEADERHEIGHT));

    let surfaceMessage = sdlRenderTextSolid(font, "Score:", 0, 255, 0, 255);
    let message = sdlCreateTextureFromSurface(ren, surfaceMessage);
    let messageRect = SDLRect(2, 2, 100, 24);
    sdlRenderText(ren, message, messageRect);

    sdlRenderPresent(ren);

    sdlDestroyTexture(message);
    sdlFreeSurface(surfaceMessage);
}

fn println<T>(prefix: str, o: T) {
    print(prefix);
    println(o);
}

fn eq(b1: Brick, b2: Brick) -> bool {
    let b1x = Brick::x(b1);
    let b1y = Brick::y(b1);

    let b2x = Brick::x(b2);
    let b2y = Brick::y(b2);

    and(eq(b1x, b2x), eq(b1y, b2y));
}

fn collision(bricks: Vec<Brick>, ball: Ball) -> Option<Brick> {
    let x = Ball::x(ball);
    let y = Ball::y(ball);

    first(filter(bricks, { brick -> collides(x, y, brick); }));
}

fn collides(x: i32, y: i32, brick: Brick) -> bool {
    let bx = Brick::x(brick);
    let by = Brick::y(brick);

    let xColl = and(greater(add(x, BALLSIZE), bx), less(x, add(bx, BRICKWIDTH)));
    let yColl = and(greater(add(y, BALLSIZE), by), less(y, add(by, BRICKHEIGHT)));

    and(xColl, yColl);
}

fn collides(x: i32, y: i32, barPos: i32) -> bool {
    let bx = barPos;
    let by = sub(HEIGHT, BARHEIGHT);

    let xColl = and(greater(add(x, BALLSIZE), bx), less(x, add(bx, BARWIDTH)));
    let yColl = greater(add(y, BALLSIZE), by);

    and(xColl, yColl);
}

fn ballAfterCollision(ball: Ball, brick: Brick) -> Ball {
    let ballX = Ball::x(ball);
    let ballY = Ball::y(ball);
    let xDir = Ball::xDir(ball);
    let yDir = Ball::yDir(ball);
    let lastUpdate = Ball::lastUpdate(ball);

    let brickX = Brick::x(brick);
    let brickY = Brick::y(brick);

    let xDiff1 = sub(ballX, brickX);
    let xDiff2 = sub(add(brickX, BRICKWIDTH), ballX);
    let yDiff1 = sub(ballY, brickY);
    let yDiff2 = sub(add(brickY, BRICKHEIGHT), ballY);

    let xDiff = min(xDiff1, xDiff2);
    let yDiff = min(yDiff1, yDiff2);

    if(less(xDiff, yDiff), { -> Ball(ballX, ballY, flip(xDir), yDir, lastUpdate);}, { -> Ball(ballX, ballY, xDir, flip(yDir), lastUpdate);});
}

fn min(a: i32, b: i32) -> i32 {
    ifImmediate(less(a, b), a, b);
}

fn flip(xDir: XDirection) -> XDirection {
    XDirection::match(xDir, { -> XDirection::Right();}, { -> XDirection::Left(); } );
}

fn flip(yDir: YDirection) -> YDirection {
    YDirection::match(yDir, { -> YDirection::Down();}, { -> YDirection::Up(); } );
}

fn print(brick: Brick) {
    print("(");
    print(Brick::x(brick));
    print(", ");
    print(Brick::y(brick));
    print(", ");
    print(Brick::color(brick));
    print(")");
}

fn print(color: Color) {
    Color::run( color,
        { -> print("White"); },
        { -> print("Yellow"); },
        { -> print("Red"); },
        { -> print("Green"); },
        { -> print("Blue"); },
    );
}