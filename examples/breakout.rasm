include "std.rasm"
include "sdl.rasm"

extern "printf"

enum Color {
    White,
    Yellow,
    Red,
    Green,
    Blue
}

struct Brick {
    x: i32,
    y: i32,
    color: Color
}

enum XDirection {
    Left,
    Right
}

enum YDirection {
    Up,
    Down
}

struct Ball {
    x: i32,
    y: i32,
    xDir: XDirection,
    yDir: YDirection
}

struct World {
    bricks: Vec<Brick>,
    ball: Ball,
    barPos: i32
}

const WIDTH = 1024;
const HEIGHT = 768;
const BRICKWIDTH = 30;
const BRICKHEIGHT = 10;

sdlInit();

let bricks = zip(vecRange(0, 30), vecRange(0, 10), {x, y -> Brick(mul(x, BRICKWIDTH), mul(y, BRICKHEIGHT) , Color::Yellow()); });
let initialWorld = World(bricks, Ball(500, 500, XDirection::Right(), YDirection::Up()), 500);

runOrError(sdlCreateWindow("Bricks", 100, 100, WIDTH, HEIGHT), "SDL_CreateWindow Error: %s\n", { win ->
    runOrError(sdlCreateRenderer(win), "SDL_CreateRenderer Error: %s\n", { ren ->

        // TODO a trick to create the function, since for now I can't call it with a $call macro in asm...
        singleLoop(ren, initialWorld, { event,world -> world;}, { ren, world -> });

        loop(ren, initialWorld,
            { event, world -> update(event, world);},
            { ren, world -> render(ren, world);}
        );

        sdlDestroyRenderer(ren);
        sdlDestroyWindow(win);
    });
});

fn update(event: i32, world: World) -> World {
    let newWorld = if(eq(event, 80), { -> moveBarLeft(world); }, { -> if(eq(event, 79), { -> moveBarRight(world); }, { -> world;});});

    let ball = World::ball(newWorld);
    let x = Ball::x(ball);
    let y = Ball::y(ball);
    let xDir = Ball::xDir(ball);
    let yDir = Ball::yDir(ball);

    let newX = XDirection::match(xDir, { -> sub(x, 1);} , { -> add(x,1);});
    let newY = YDirection::match(yDir, { -> sub(y, 1);} , { -> add(y,1);});

    let newXDir = if(or(greater(newX, WIDTH), less(newX, 5)), { -> flipx(xDir); }, { -> xDir;});
    let newYDir = if(or(greater(newY, HEIGHT), less(newY, 5)), { -> flipy(yDir); }, { -> yDir;});

    let newBall = Ball(newX, newY, newXDir, newYDir);

    World(World::bricks(newWorld), newBall, World::barPos(newWorld));
}

fn flipx(xDir: XDirection) -> XDirection {
    XDirection::match(xDir, { -> XDirection::Right();}, { -> XDirection::Left(); } );
}

fn flipy(yDir: YDirection) -> YDirection {
    YDirection::match(yDir, { -> YDirection::Down();}, { -> YDirection::Up(); } );
}


fn worldUpdate(world: World, bricksUpdate: fn(Vec<Brick>) -> Vec<Brick>, ballUpdate: fn(Ball) -> Ball, barPosUpdate: fn(i32) -> i32) -> World {
    let bricks = bricksUpdate(World::bricks(world));
    let ball = ballUpdate(World::ball(world));
    let barPos = barPosUpdate(World::barPos(world));

    World(bricks, ball, barPos);
}

fn moveBarLeft(world: World) -> World {
    let bricks = World::bricks(world);
    let ball = World::ball(world);
    let barPos = World::barPos(world);

    World(bricks, ball, sub(barPos, 5));
}

fn moveBarRight(world: World) -> World {
    let bricks = World::bricks(world);
    let ball = World::ball(world);
    let barPos = World::barPos(world);

    World(bricks, ball, add(barPos, 5));
}

fn render(ren: i32, world: World) {
    sdlSetRenderDrawColor(ren, 0, 0, 0, 0);
    sdlRenderClear(ren);
    sdlSetRenderDrawColor(ren, 255, 0, 0, 0);

    let bricks = World::bricks(world);

    forEach(bricks, { brick ->
        let x = Brick::x(brick);
        let y = Brick::y(brick);
        sdlRenderFillRect(ren, SDLRect(add(x, 1), add(y, 1), sub(BRICKWIDTH, 2), sub(BRICKHEIGHT, 2)));
    });

    sdlSetRenderDrawColor(ren, 255, 255, 255, 0);
    let barPos = World::barPos(world);

    sdlRenderFillRect(ren, SDLRect(barPos, sub(HEIGHT, BRICKHEIGHT), BRICKWIDTH, BRICKHEIGHT));

    let ball = World::ball(world);
    let x = Ball::x(ball);
    let y = Ball::y(ball);

    sdlRenderFillRect(ren, SDLRect(x, y, 5, 5));
}

fn print(brick: Brick) {
    print("(");
    print(Brick::x(brick));
    print(", ");
    print(Brick::y(brick));
    print(", ");
    print(Brick::color(brick));
    print(")");
}

fn print(color: Color) {
    Color::run( color,
        { -> print("White"); },
        { -> print("Yellow"); },
        { -> print("Red"); },
        { -> print("Green"); },
        { -> print("Blue"); },
    );
}

asm failure(message: str) /{
    $ccall(SDL_GetError)
    $ccall(printf, $message, eax)
    $ccall(SDL_Quit)
    $ccall(exit, 1)
}/

fn runOrError(value: i32, message: str, f: fn(i32) -> ()) {
    ifRun(eq(value,0), { -> failure(message);}, { -> f(value); });
}

fn singleLoop<CTX,WORLD>(ctx: CTX, world: WORLD, update: fn(i32, WORLD) -> WORLD, render: fn(CTX, WORLD) -> ()) -> WORLD {
    let event = keyDown();

    ifRun(eq(event, 41), { -> exitMain(0);}, { -> }); // 41 -> ESC
    //ifRun(eq(event, 0), { -> }, { -> println(event);});

    with(update(event, world), { newWorld ->
        render(ctx, newWorld);
        sdlRenderPresent(ctx);
        newWorld;
    });

    /*
    TODO is not supported yet
    let newWorld = update(event, world);
    render(ctx, newWorld);
    sdlRenderPresent(ctx);
    newWorld;
    */
}

asm loop<CTX,WORLD>(ctx: CTX, world: WORLD, update: fn(i32, WORLD) -> WORLD, render: fn(CTX, WORLD) -> ()) /{
    push    ebx
    mov     dword ebx, $world
.loop:
    push        dword $render
    push        dword $update
    push        dword ebx
    push        dword $ctx
    call        singleLoop_0
    add         esp, 4 * 4
    mov         dword   ebx, eax
    jmp     .loop
}/