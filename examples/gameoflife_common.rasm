struct Cell {
    x: i32,
    y: i32
}

struct FullCell {
    cell: Cell,
    adjacents: List<Cell>
}

fn allCells(width: i32, height: i32) -> List<FullCell> {
    zipList(range(0, height), range(0, width), { y, x ->
        with(Cell(x, y), { cell ->
            FullCell(cell, adjacents(cell));
        });
    });
}

fn moveCells(cells: List<Cell>, d: i32) -> List<Cell> {
    listMap(cells, { it -> Cell(nadd(Cell::x(it), d), nadd(Cell::y(it), d)); });
}

fn next(cells: List<Cell>, allCells: List<FullCell>) -> List<Cell> {
    listMap(listFilter(allCells, { it ->
        with(listCount(FullCell::adjacents(it),  { a -> isAlive(cells, a); }), { alive ->
            ifImmediate(isAlive(cells, FullCell::cell(it)),
                or(eq(alive, 2),eq(alive,3)),
                eq(alive, 3)
            );
        });
    }), { it -> FullCell::cell(it);});
}

fn adjacents(cell: Cell) -> List<Cell> {
    with2(Cell::x(cell), Cell::y(cell), { x, y ->
        with4(nadd(x, -1), nadd(x, 1), nadd(y, -1), nadd(y, 1), { left, right, up, down ->
            listOf8(
                Cell(left, up),
                Cell(left, y),
                Cell(left, down),
                Cell(x, up),
                Cell(x, down),
                Cell(right, up),
                Cell(right, y),
                Cell(right, down)
            );
        });
    });
}

/** false = 0 true = any other value **/
fn isAlive(cells: List<Cell>, cell: Cell) -> i32 {
    with2(Cell::x(cell), Cell::y(cell), { x, y ->
        listAnyMatch(cells, { it ->
            and(eq(x, Cell::x(it)), eq(y, Cell::y(it)));
        });
    });
}

fn readCellFile(file: str) -> List<Cell> {
    with(listEnumerate(filterLines(lines(readFile(file)))), { lines ->
        listFMap(lines, { line -> lineCells(line); });
    });
}

fn lineCells(line: EnumerateEntry<str>) -> List<Cell> {
    with2(EnumerateEntry::index(line), EnumerateEntry::value(line), { y, lineStr ->
        listMap(listFilter(listEnumerate(chars(lineStr)), { cell ->
            with(EnumerateEntry::value(cell), { cellStr ->
                List::match(chars(cellStr), { head, tail -> seq(head, "O"); }, { -> itn(0);});
            });
        }), { cell -> Cell(EnumerateEntry::index(cell), y); });
    });
}

fn filterLines(lines: List<str>) -> List<str> {
    listFilter(lines, { line ->
        List::match(chars(line), { head, tail -> not(seq(head, "!")); }, { -> itn(0);});
    });
}