struct Cell {
    x: i32,
    y: i32
}

fn allCells(width: i32, height: i32) -> List<Cell> {
    listFlatten(listMap(range(0, height), { y ->
        listMap(range(0, width), { x ->
            Cell(x, y);
        });
    }));
}

fn moveCells(cells: List<Cell>, d: i32) -> List<Cell> {
    listMap(cells, { it -> Cell(nadd(Cell::x(it), d), nadd(Cell::y(it), d)); });
}

fn next(cells: List<Cell>, allCells: List<Cell>) -> List<Cell> {
    listFilter(allCells, { it ->
        with(listCount(adjacents(it),  { a -> isAlive(cells, a); }), { alive ->
            ifImmediate(isAlive(cells, it),
                or(eq(alive, 2),eq(alive,3)),
                eq(alive, 3)
            );
        });
    });
}

fn adjacents(cell: Cell) -> List<Cell> {
    with2(Cell::x(cell), Cell::y(cell), { x, y ->
        listOf8(
            Cell(nadd(x, -1), nadd(y, -1)),
            Cell(nadd(x, -1), y),
            Cell(nadd(x, -1), nadd(y, 1)),
            Cell(x, nadd(y, 1)),
            Cell(x, nadd(y, -1)),
            Cell(nadd(x, 1), nadd(y, -1)),
            Cell(nadd(x, 1), y),
            Cell(nadd(x, 1), nadd(y, 1))
        );
    });
}

/** false = 0 true = any other value **/
fn isAlive(cells: List<Cell>, cell: Cell) -> i32 {
    with2(Cell::x(cell), Cell::y(cell), { x, y ->
        listAnyMatch(cells, { it ->
            and(eq(x, Cell::x(it)), eq(y, Cell::y(it)));
        });
    });
}

fn readCellFile(file: str) -> List<Cell> {
    with(listEnumerate(filterLines(lines(readFile(file)))), { lines ->
        listFMap(lines, { line -> lineCells(line); });
    });
}

fn lineCells(line: EnumerateEntry<str>) -> List<Cell> {
    with2(EnumerateEntry::index(line), EnumerateEntry::value(line), { y, lineStr ->
        listFMap(listEnumerate(chars(lineStr)), { cell ->
            with2(EnumerateEntry::index(cell), EnumerateEntry::value(cell), { x, cellStr ->
                ifImmediate(List::match(chars(cellStr), { head, tail -> seq(head, "O"); }, { -> itn(0);}),
                    listOf(Cell(x, y)), List::Empty());
            });
        });
    });
}

fn filterLines(lines: List<str>) -> List<str> {
    listFilter(lines, { line ->
        List::match(chars(line), { head, tail -> not(seq(head, "!")); }, { -> itn(0);});
    });
}