%macro gotoOnSome 1                                                             
    cmp dword eax,[_enum_Option_None]                                               
    jne %1                                                                          
%endmacro                                                                       
%DEFINE LIBC 1                                                                  
    extern exit                                                                     
    extern SDL_CreateTextureFromSurface                                             
    extern SDL_PollEvent                                                            
    extern SDL_CreateRenderer                                                       
    extern TTF_OpenFont                                                             
    extern SDL_DestroyWindow                                                        
    extern SDL_RWFromFile                                                           
    extern SDL_SetRenderDrawColor                                                   
    extern exit                                                                     
    extern SDL_RenderCopy                                                           
    extern SDL_Delay                                                                
    extern TTF_Init                                                                 
    extern SDL_RenderPresent                                                        
    extern SDL_CreateWindow                                                         
    extern SDL_Init                                                                 
    extern SDL_DestroyTexture                                                       
    extern SDL_RenderFillRect                                                       
    extern SDL_Quit                                                                 
    extern SDL_DestroyRenderer                                                      
    extern SDL_LoadBMP_RW                                                           
    extern SDL_RenderClear                                                          
    extern SDL_GetError                                                             
    extern TTF_RenderText_Solid                                                     
    extern SDL_FreeSurface                                                          
    extern printf                                                                   
SECTION .data
    _ESC                                              dd    27                      
    _NEW_LINE                                         dd    10                      
    _enum_Compare_Equal                               dd    0                       
    _enum_Compare_Greater                             dd    0                       
    _enum_Compare_Less                                dd    0                       
    _enum_FileFlag_Append                             dd    0                       
    _enum_FileFlag_Create                             dd    0                       
    _enum_FileFlag_ReadOnly                           dd    0                       
    _enum_FileFlag_ReadWrite                          dd    0                       
    _enum_FileFlag_Truncate                           dd    0                       
    _enum_FileFlag_WriteOnly                          dd    0                       
    _enum_FilePermission_Execute                      dd    0                       
    _enum_FilePermission_Read                         dd    0                       
    _enum_FilePermission_Write                        dd    0                       
    _enum_GameStage_Run                               dd    0                       
    _enum_GameStage_RunBall                           dd    0                       
    _enum_KeyState_Down                               dd    0                       
    _enum_KeyState_Up                                 dd    0                       
    _enum_List_Empty                                  dd    0                       
    _enum_Option_None                                 dd    0                       
    _enum_XDirection_Left                             dd    0                       
    _enum_XDirection_Right                            dd    0                       
    _enum_YDirection_Down                             dd    0                       
    _enum_YDirection_Up                               dd    0                       
    _heap_size                                        dd    67108864                
    _heap_table_next                                  dd    0                       
    _heap_table_size                                  dd    20971520                
    _reusable_heap_table_next                         dd    0                       
    _reusable_heap_table_size                         dd    16777216                
    _sv_0                                             db    '', 0h                  
    _sv_100                                           db    'XDirection::match, invalid value ', 0h
    _sv_102                                           db    'FilePermission::match, invalid value ', 0h
    _sv_104                                           db    '  remove from reused ', 0h
    _sv_106                                           db    ' ', 0h                 
    _sv_108                                           db    ' for vecOf', 0h        
    _sv_110                                           db    ' for vecOf 2', 0h      
    _sv_112                                           db    ' for vec filter', 0h   
    _sv_114                                           db    'for vec filter', 0h    
    _sv_116                                           db    ' for temp mem for sdl keyEvent', 0h
    _sv_118                                           db    'temp mem for sdl keyEvent', 0h
    _sv_120                                           db    ' for TimeVal', 0h      
    _sv_122                                           db    ' for vec push', 0h     
    _sv_124                                           db    ' for substr', 0h       
    _sv_126                                           db    ' for vec map', 0h      
    _sv_128                                           db    'for map', 0h           
    _sv_130                                           db    ' temp for toString(i32)', 0h
    _sv_132                                           db    ' for toString(i32)', 0h
    _sv_134                                           db    'Error writing to file.', 0h
    _sv_136                                           db    ' for vecFlattenCreate', 0h
    _sv_138                                           db    ' for fileSize', 0h     
    _sv_140                                           db    'for clone', 0h         
    _sv_142                                           db    ' for vecRange', 0h     
    _sv_144                                           db    ' for vec zip', 0h      
    _sv_146                                           db    'for vec zip', 0h       
    _sv_148                                           db    ' for temp for sdlRenderTextSolid', 0h
    _sv_150                                           db    '/home/enrico/development/rust/rasm/rasm/resources/examples/breakout/testresources', 0h
    _sv_152                                           db    '/home/enrico/development/rust/rasm/rasm/resources/examples/breakout/resources', 0h
    _sv_158                                           db    '/DejaVuSerif.ttf', 0h  
    _sv_160                                           db    'Breakout', 0h          
    _sv_162                                           db    'SDL_CreateWindow Error: %s',10,'', 0h
    _sv_164                                           db    'SDL_CreateRenderer Error: %s',10,'', 0h
    _sv_170                                           db    'TTFInit error.', 0h    
    _sv_172                                           db    'PANIC: ', 0h           
    _sv_174                                           db    'scores.txt', 0h        
    _sv_182                                           db    ',', 0h                 
    _sv_194                                           db    'Rasm BREAKOUT', 0h     
    _sv_2                                             db    'String', 0h            
    _sv_20                                            db    'start addRef ', 0h     
    _sv_200                                           db    'Press SPACE to start', 0h
    _sv_206                                           db    'Score: ', 0h           
    _sv_208                                           db    'Lives: ', 0h           
    _sv_210                                           db    'FPS: ', 0h             
    _sv_22                                            db    '',10,'', 0h            
    _sv_228                                           db    'invalid address ',10,'', 0h
    _sv_24                                            db    '  ', 0h                
    _sv_26                                            db    '  reusable size ', 0h  
    _sv_278                                           db    'IOError(', 0h          
    _sv_28                                            db    '  ref count: ', 0h     
    _sv_280                                           db    ')', 0h                 
    _sv_30                                            db    'end addRef',10,'', 0h  
    _sv_32                                            db    'start deref ', 0h      
    _sv_34                                            db    '  deallocated ', 0h    
    _sv_36                                            db    '  add reused ', 0h     
    _sv_38                                            db    ' with value ', 0h      
    _sv_40                                            db    'Negative allocation count: ', 0h
    _sv_42                                            db    'end deref',10,'', 0h   
    _sv_44                                            db    'start malloc ', 0h     
    _sv_46                                            db    ', ', 0h                
    _sv_48                                            db    '  reusing address ', 0h
    _sv_50                                            db    ', size ', 0h           
    _sv_52                                            db    '  allocation ', 0h     
    _sv_54                                            db    'Out of heap space', 0h 
    _sv_56                                            db    '  new address', 0h     
    _sv_58                                            db    'Out of memory', 0h     
    _sv_60                                            db    '  newAddress Ok', 0h   
    _sv_62                                            db    '  allocate', 0h        
    _sv_64                                            db    'end malloc', 0h        
    _sv_66                                            db    ' for add(str,str)', 0h 
    _sv_68                                            db    ' for vec add', 0h      
    _sv_70                                            db    'for vec add', 0h       
    _sv_72                                            db    'for add', 0h           
    _sv_74                                            db    ' for Vec', 0h          
    _sv_76                                            db    'state is the same', 0h 
    _sv_78                                            db    ' for readFile', 0h     
    _sv_80                                            db    '-', 0h                 
    _sv_82                                            db    'Stage::match, invalid value ', 0h
    _sv_84                                            db    'KeyState::match, invalid value ', 0h
    _sv_86                                            db    'Option::match, invalid value ', 0h
    _sv_88                                            db    'GameResult::match, invalid value ', 0h
    _sv_90                                            db    'GameStage::match, invalid value ', 0h
    _sv_92                                            db    'List::match, invalid value ', 0h
    _sv_94                                            db    'Compare::match, invalid value ', 0h
    _sv_96                                            db    'YDirection::match, invalid value ', 0h
    _sv_98                                            db    'FileFlag::match, invalid value ', 0h
SECTION .bss
    _for_nprint                                       resb 20                       
    _heap                                             resb 4                        
    _heap_buffer                                      resb 67108864                 
    _heap_table                                       resb 20971540                 
    _lambda_space_stack                               resb 4                        
    _lambda_space_stack_buffer                        resb 1048576                  
    _rasm_args                                        resd 12                       
    _reusable_heap_table                              resb 16777216                 
    _s_1                                              resd 1                        
    _s_101                                            resd 1                        
    _s_103                                            resd 1                        
    _s_105                                            resd 1                        
    _s_107                                            resd 1                        
    _s_109                                            resd 1                        
    _s_111                                            resd 1                        
    _s_113                                            resd 1                        
    _s_115                                            resd 1                        
    _s_117                                            resd 1                        
    _s_119                                            resd 1                        
    _s_121                                            resd 1                        
    _s_123                                            resd 1                        
    _s_125                                            resd 1                        
    _s_127                                            resd 1                        
    _s_129                                            resd 1                        
    _s_131                                            resd 1                        
    _s_133                                            resd 1                        
    _s_135                                            resd 1                        
    _s_137                                            resd 1                        
    _s_139                                            resd 1                        
    _s_141                                            resd 1                        
    _s_143                                            resd 1                        
    _s_145                                            resd 1                        
    _s_147                                            resd 1                        
    _s_149                                            resd 1                        
    _s_151                                            resd 1                        
    _s_153                                            resd 1                        
    _s_159                                            resd 1                        
    _s_161                                            resd 1                        
    _s_163                                            resd 1                        
    _s_165                                            resd 1                        
    _s_171                                            resd 1                        
    _s_173                                            resd 1                        
    _s_175                                            resd 1                        
    _s_183                                            resd 1                        
    _s_195                                            resd 1                        
    _s_201                                            resd 1                        
    _s_207                                            resd 1                        
    _s_209                                            resd 1                        
    _s_21                                             resd 1                        
    _s_211                                            resd 1                        
    _s_229                                            resd 1                        
    _s_23                                             resd 1                        
    _s_25                                             resd 1                        
    _s_27                                             resd 1                        
    _s_279                                            resd 1                        
    _s_281                                            resd 1                        
    _s_29                                             resd 1                        
    _s_3                                              resd 1                        
    _s_31                                             resd 1                        
    _s_33                                             resd 1                        
    _s_35                                             resd 1                        
    _s_37                                             resd 1                        
    _s_39                                             resd 1                        
    _s_41                                             resd 1                        
    _s_43                                             resd 1                        
    _s_45                                             resd 1                        
    _s_47                                             resd 1                        
    _s_49                                             resd 1                        
    _s_51                                             resd 1                        
    _s_53                                             resd 1                        
    _s_55                                             resd 1                        
    _s_57                                             resd 1                        
    _s_59                                             resd 1                        
    _s_61                                             resd 1                        
    _s_63                                             resd 1                        
    _s_65                                             resd 1                        
    _s_67                                             resd 1                        
    _s_69                                             resd 1                        
    _s_71                                             resd 1                        
    _s_73                                             resd 1                        
    _s_75                                             resd 1                        
    _s_77                                             resd 1                        
    _s_79                                             resd 1                        
    _s_81                                             resd 1                        
    _s_83                                             resd 1                        
    _s_85                                             resd 1                        
    _s_87                                             resd 1                        
    _s_89                                             resd 1                        
    _s_91                                             resd 1                        
    _s_93                                             resd 1                        
    _s_95                                             resd 1                        
    _s_97                                             resd 1                        
    _s_99                                             resd 1                        
    const_10                                          resd 1                        
    const_11                                          resd 1                        
    const_12                                          resd 1                        
    const_13                                          resd 1                        
    const_14                                          resd 1                        
    const_15                                          resd 1                        
    const_16                                          resd 1                        
    const_17                                          resd 1                        
    const_18                                          resd 1                        
    const_19                                          resd 1                        
    const_4                                           resd 1                        
    const_5                                           resd 1                        
    const_6                                           resd 1                        
    const_7                                           resd 1                        
    const_8                                           resd 1                        
    const_9                                           resd 1                        
    static_allocation_154                             resd 5                        
    static_allocation_156                             resd 5                        
    static_allocation_166                             resd 5                        
    static_allocation_168                             resd 5                        
    static_allocation_176                             resd 5                        
    static_allocation_178                             resd 5                        
    static_allocation_180                             resd 5                        
    static_allocation_184                             resd 5                        
    static_allocation_186                             resd 5                        
    static_allocation_188                             resd 5                        
    static_allocation_190                             resd 5                        
    static_allocation_192                             resd 5                        
    static_allocation_196                             resd 5                        
    static_allocation_198                             resd 5                        
    static_allocation_202                             resd 5                        
    static_allocation_204                             resd 5                        
    static_allocation_212                             resd 5                        
    static_allocation_214                             resd 5                        
    static_allocation_216                             resd 5                        
    static_allocation_218                             resd 5                        
    static_allocation_220                             resd 5                        
    static_allocation_222                             resd 5                        
    static_allocation_224                             resd 5                        
    static_allocation_226                             resd 5                        
    static_allocation_230                             resd 5                        
    static_allocation_232                             resd 5                        
    static_allocation_234                             resd 5                        
    static_allocation_236                             resd 5                        
    static_allocation_238                             resd 5                        
    static_allocation_240                             resd 5                        
    static_allocation_242                             resd 5                        
    static_allocation_244                             resd 5                        
    static_allocation_246                             resd 5                        
    static_allocation_248                             resd 5                        
    static_allocation_250                             resd 5                        
    static_allocation_252                             resd 5                        
    static_allocation_254                             resd 5                        
    static_allocation_256                             resd 5                        
    static_allocation_258                             resd 5                        
    static_allocation_260                             resd 5                        
    static_allocation_262                             resd 5                        
    static_allocation_264                             resd 5                        
    static_allocation_266                             resd 5                        
    static_allocation_268                             resd 5                        
    static_allocation_270                             resd 5                        
    static_allocation_272                             resd 5                        
    static_allocation_274                             resd 5                        
    static_allocation_276                             resd 5                        
    static_allocation_282                             resd 5                        
    static_allocation_284                             resd 5                        
    static_allocation_286                             resd 5                        
    static_allocation_288                             resd 5                        
    static_allocation_290                             resd 5                        
    static_allocation_292                             resd 5                        
    static_allocation_294                             resd 5                        
    static_allocation_296                             resd 5                        
    static_allocation_298                             resd 5                        
    static_allocation_300                             resd 5                        
    static_allocation_302                             resd 5                        
    static_allocation_304                             resd 5                        
    static_allocation_306                             resd 5                        
    static_allocation_308                             resd 5                        
    static_allocation_310                             resd 5                        
    static_allocation_312                             resd 5                        
    static_allocation_314                             resd 5                        
    static_allocation_316                             resd 5                        
    static_allocation_318                             resd 5                        
    static_allocation_320                             resd 5                        
    static_memory_155                                 resd 3                        
    static_memory_157                                 resd 3                        
    static_memory_167                                 resd 3                        
    static_memory_169                                 resd 3                        
    static_memory_177                                 resd 3                        
    static_memory_179                                 resd 3                        
    static_memory_181                                 resd 3                        
    static_memory_185                                 resd 3                        
    static_memory_187                                 resd 3                        
    static_memory_189                                 resd 3                        
    static_memory_191                                 resd 3                        
    static_memory_193                                 resd 3                        
    static_memory_197                                 resd 3                        
    static_memory_199                                 resd 3                        
    static_memory_203                                 resd 3                        
    static_memory_205                                 resd 3                        
    static_memory_213                                 resd 3                        
    static_memory_215                                 resd 3                        
    static_memory_217                                 resd 3                        
    static_memory_219                                 resd 3                        
    static_memory_221                                 resd 3                        
    static_memory_223                                 resd 3                        
    static_memory_225                                 resd 3                        
    static_memory_227                                 resd 3                        
    static_memory_231                                 resd 3                        
    static_memory_233                                 resd 3                        
    static_memory_235                                 resd 3                        
    static_memory_237                                 resd 3                        
    static_memory_239                                 resd 3                        
    static_memory_241                                 resd 3                        
    static_memory_243                                 resd 3                        
    static_memory_245                                 resd 3                        
    static_memory_247                                 resd 3                        
    static_memory_249                                 resd 3                        
    static_memory_251                                 resd 3                        
    static_memory_253                                 resd 3                        
    static_memory_255                                 resd 3                        
    static_memory_257                                 resd 3                        
    static_memory_259                                 resd 3                        
    static_memory_261                                 resd 3                        
    static_memory_263                                 resd 3                        
    static_memory_265                                 resd 3                        
    static_memory_267                                 resd 3                        
    static_memory_269                                 resd 3                        
    static_memory_271                                 resd 3                        
    static_memory_273                                 resd 3                        
    static_memory_275                                 resd 3                        
    static_memory_277                                 resd 3                        
    static_memory_283                                 resd 3                        
    static_memory_285                                 resd 3                        
    static_memory_287                                 resd 3                        
    static_memory_289                                 resd 3                        
    static_memory_291                                 resd 3                        
    static_memory_293                                 resd 3                        
    static_memory_295                                 resd 3                        
    static_memory_297                                 resd 3                        
    static_memory_299                                 resd 3                        
    static_memory_301                                 resd 3                        
    static_memory_303                                 resd 3                        
    static_memory_305                                 resd 3                        
    static_memory_307                                 resd 3                        
    static_memory_309                                 resd 3                        
    static_memory_311                                 resd 3                        
    static_memory_313                                 resd 3                        
    static_memory_315                                 resd 3                        
    static_memory_317                                 resd 3                        
    static_memory_319                                 resd 3                        
    static_memory_321                                 resd 3                        
SECTION .text
    global  main                                                                    
main:
    mov     dword eax, _heap_buffer                                                 
    mov     dword [_heap], eax                                                      
    mov     dword eax, _heap_table                                                  
    mov     dword [_heap_table_next],eax                                            
    mov     dword eax, _lambda_space_stack_buffer                                   
    mov     dword [_lambda_space_stack], eax                                        
    mov    dword eax, _reusable_heap_table                                          
    mov    dword [_reusable_heap_table_next],eax                                    
        ; call macro, calling addStaticStringToHeap_0
    push dword _sv_0
    call addStaticStringToHeap_0
    add esp, 4
                                           
    mov dword [_s_1], eax                                                           
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_2
    call addStaticStringToHeap_0
    add esp, 4
                                           
    mov dword [_s_3], eax                                                           
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_20
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_21], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_22
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_23], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_24
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_25], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_26
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_27], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_28
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_29], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_30
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_31], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_32
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_33], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_34
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_35], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_36
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_37], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_38
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_39], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_40
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_41], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_42
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_43], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_44
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_45], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_46
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_47], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_48
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_49], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_50
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_51], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_52
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_53], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_54
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_55], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_56
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_57], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_58
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_59], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_60
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_61], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_62
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_63], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_64
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_65], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_66
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_67], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_68
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_69], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_70
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_71], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_72
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_73], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_74
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_75], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_76
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_77], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_78
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_79], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_80
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_81], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_82
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_83], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_84
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_85], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_86
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_87], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_88
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_89], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_90
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_91], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_92
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_93], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_94
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_95], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_96
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_97], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_98
    call addStaticStringToHeap_0
    add esp, 4
                                          
    mov dword [_s_99], eax                                                          
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_100
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_101], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_102
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_103], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_104
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_105], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_106
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_107], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_108
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_109], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_110
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_111], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_112
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_113], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_114
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_115], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_116
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_117], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_118
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_119], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_120
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_121], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_122
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_123], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_124
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_125], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_126
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_127], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_128
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_129], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_130
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_131], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_132
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_133], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_134
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_135], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_136
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_137], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_138
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_139], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_140
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_141], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_142
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_143], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_144
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_145], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_146
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_147], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_148
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_149], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_150
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_151], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_152
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_153], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_158
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_159], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_160
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_161], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_162
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_163], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_164
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_165], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_170
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_171], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_172
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_173], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_174
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_175], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_182
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_183], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_194
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_195], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_200
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_201], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_206
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_207], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_208
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_209], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_210
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_211], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_228
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_229], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_278
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_279], eax                                                         
    ; call macro, calling addStaticStringToHeap_0
    push dword _sv_280
    call addStaticStringToHeap_0
    add esp, 4
                                         
    mov dword [_s_281], eax                                                         
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_155
    push dword static_allocation_154
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_157
    push dword static_allocation_156
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_167
    push dword static_allocation_166
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_169
    push dword static_allocation_168
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_177
    push dword static_allocation_176
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_179
    push dword static_allocation_178
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_181
    push dword static_allocation_180
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_185
    push dword static_allocation_184
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_187
    push dword static_allocation_186
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_189
    push dword static_allocation_188
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_191
    push dword static_allocation_190
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_193
    push dword static_allocation_192
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_197
    push dword static_allocation_196
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_199
    push dword static_allocation_198
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_203
    push dword static_allocation_202
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_205
    push dword static_allocation_204
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_213
    push dword static_allocation_212
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_215
    push dword static_allocation_214
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_217
    push dword static_allocation_216
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_219
    push dword static_allocation_218
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_221
    push dword static_allocation_220
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_223
    push dword static_allocation_222
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_225
    push dword static_allocation_224
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_227
    push dword static_allocation_226
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_231
    push dword static_allocation_230
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_233
    push dword static_allocation_232
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_235
    push dword static_allocation_234
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_237
    push dword static_allocation_236
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_239
    push dword static_allocation_238
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_241
    push dword static_allocation_240
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_243
    push dword static_allocation_242
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_245
    push dword static_allocation_244
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_247
    push dword static_allocation_246
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_249
    push dword static_allocation_248
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_251
    push dword static_allocation_250
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_253
    push dword static_allocation_252
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_255
    push dword static_allocation_254
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_257
    push dword static_allocation_256
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_259
    push dword static_allocation_258
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_261
    push dword static_allocation_260
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_263
    push dword static_allocation_262
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_265
    push dword static_allocation_264
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_267
    push dword static_allocation_266
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_269
    push dword static_allocation_268
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_271
    push dword static_allocation_270
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_273
    push dword static_allocation_272
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_275
    push dword static_allocation_274
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_277
    push dword static_allocation_276
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_283
    push dword static_allocation_282
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_285
    push dword static_allocation_284
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_287
    push dword static_allocation_286
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_289
    push dword static_allocation_288
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_291
    push dword static_allocation_290
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_293
    push dword static_allocation_292
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_295
    push dword static_allocation_294
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_297
    push dword static_allocation_296
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_299
    push dword static_allocation_298
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_301
    push dword static_allocation_300
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_303
    push dword static_allocation_302
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_305
    push dword static_allocation_304
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_307
    push dword static_allocation_306
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_309
    push dword static_allocation_308
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_311
    push dword static_allocation_310
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_313
    push dword static_allocation_312
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_315
    push dword static_allocation_314
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_317
    push dword static_allocation_316
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_319
    push dword static_allocation_318
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addStaticAllocation_0
    push dword 4
    push dword static_memory_321
    push dword static_allocation_320
    call addStaticAllocation_0
    add esp, 12
       
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_XDirection_Left
    call addHeap_0
    add esp, 12
                           
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_XDirection_Right
    call addHeap_0
    add esp, 12
                          
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_YDirection_Up
    call addHeap_0
    add esp, 12
                             
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_YDirection_Down
    call addHeap_0
    add esp, 12
                           
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_GameStage_RunBall
    call addHeap_0
    add esp, 12
                         
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_GameStage_Run
    call addHeap_0
    add esp, 12
                             
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_KeyState_Down
    call addHeap_0
    add esp, 12
                             
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_KeyState_Up
    call addHeap_0
    add esp, 12
                               
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_List_Empty
    call addHeap_0
    add esp, 12
                                
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_FilePermission_Read
    call addHeap_0
    add esp, 12
                       
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_FilePermission_Write
    call addHeap_0
    add esp, 12
                      
    ; call macro, calling addHeap_0
    push dword 2
    push dword _s_1
    push dword _enum_FilePermission_Execute
    call addHeap_0
    add esp, 12
                    
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_FileFlag_ReadOnly
    call addHeap_0
    add esp, 12
                         
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_FileFlag_WriteOnly
    call addHeap_0
    add esp, 12
                        
    ; call macro, calling addHeap_0
    push dword 2
    push dword _s_1
    push dword _enum_FileFlag_ReadWrite
    call addHeap_0
    add esp, 12
                        
    ; call macro, calling addHeap_0
    push dword 3
    push dword _s_1
    push dword _enum_FileFlag_Create
    call addHeap_0
    add esp, 12
                           
    ; call macro, calling addHeap_0
    push dword 4
    push dword _s_1
    push dword _enum_FileFlag_Truncate
    call addHeap_0
    add esp, 12
                         
    ; call macro, calling addHeap_0
    push dword 5
    push dword _s_1
    push dword _enum_FileFlag_Append
    call addHeap_0
    add esp, 12
                           
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_Option_None
    call addHeap_0
    add esp, 12
                               
    ; call macro, calling addHeap_0
    push dword 0
    push dword _s_1
    push dword _enum_Compare_Less
    call addHeap_0
    add esp, 12
                              
    ; call macro, calling addHeap_0
    push dword 1
    push dword _s_1
    push dword _enum_Compare_Equal
    call addHeap_0
    add esp, 12
                             
    ; call macro, calling addHeap_0
    push dword 2
    push dword _s_1
    push dword _enum_Compare_Greater
    call addHeap_0
    add esp, 12
                           

    ; command line arguments                                                        
    push dword esp                                                                  
    push dword _rasm_args                                                           
    call    createCmdLineArguments_0                                                
    add  esp, 8                                                                     


    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 104                                                                  ; reserve stack local vals (let)
    push ebx                                                                        
    mov  dword ebx, [_s_151]                                                        ; const RASMTESTRESOURCEFOLDER string value
    mov  dword [const_4], ebx                                                       ; const RASMTESTRESOURCEFOLDER string value

    ; add ref 
    push     dword [const_4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    push ebx                                                                        
    mov  dword ebx, [_s_153]                                                        ; const RASMRESOURCEFOLDER string value
    mov  dword [const_5], ebx                                                       ; const RASMRESOURCEFOLDER string value

    ; add ref 
    push     dword [const_5]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    mov dword [const_6], 1024                                                       ; 
    mov dword [const_7], 768                                                        ; 
    mov dword [const_8], 34                                                         ; 
    mov dword [const_9], 10                                                         ; 
    mov dword [const_10], 80                                                        ; 
    mov dword [const_11], 10                                                        ; 
    mov dword [const_12], 25                                                        ; 
    mov dword [const_13], 5                                                         ; 

    ; calling function SDLColor_0, added to stack 0                                 
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    mov dword [esp + 4], 0                                                          
    mov dword [esp + 8], 0                                                          
    mov dword [esp + 12], 255                                                       
    ; Calling function SDLColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:113:23
    call    SDLColor_0                                                              
    add     esp,16                                                                  ; restore stack for SDLColor_0
    ; end calling function SDLColor_0                                               
    mov dword [const_14], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [const_14]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function SDLColor_0, added to stack 0                                 
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 255                                                        
    mov dword [esp + 4], 255                                                        
    mov dword [esp + 8], 255                                                        
    mov dword [esp + 12], 255                                                       
    ; Calling function SDLColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:114:23
    call    SDLColor_0                                                              
    add     esp,16                                                                  ; restore stack for SDLColor_0
    ; end calling function SDLColor_0                                               
    mov dword [const_15], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [const_15]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function SDLColor_0, added to stack 0                                 
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 255                                                        
    mov dword [esp + 4], 0                                                          
    mov dword [esp + 8], 0                                                          
    mov dword [esp + 12], 255                                                       
    ; Calling function SDLColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:115:21
    call    SDLColor_0                                                              
    add     esp,16                                                                  ; restore stack for SDLColor_0
    ; end calling function SDLColor_0                                               
    mov dword [const_16], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [const_16]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function SDLColor_0, added to stack 0                                 
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    mov dword [esp + 4], 255                                                        
    mov dword [esp + 8], 0                                                          
    mov dword [esp + 12], 255                                                       
    ; Calling function SDLColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:116:23
    call    SDLColor_0                                                              
    add     esp,16                                                                  ; restore stack for SDLColor_0
    ; end calling function SDLColor_0                                               
    mov dword [const_17], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [const_17]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function SDLColor_0, added to stack 0                                 
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    mov dword [esp + 4], 0                                                          
    mov dword [esp + 8], 255                                                        
    mov dword [esp + 12], 255                                                       
    ; Calling function SDLColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:117:22
    call    SDLColor_0                                                              
    add     esp,16                                                                  ; restore stack for SDLColor_0
    ; end calling function SDLColor_0                                               
    mov dword [const_18], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [const_18]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function SDLColor_0, added to stack 0                                 
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 255                                                        
    mov dword [esp + 4], 255                                                        
    mov dword [esp + 8], 0                                                          
    mov dword [esp + 12], 255                                                       
    ; Calling function SDLColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:118:24
    call    SDLColor_0                                                              
    add     esp,16                                                                  ; restore stack for SDLColor_0
    ; end calling function SDLColor_0                                               
    mov dword [const_19], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [const_19]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       
    pop   ebx                                                                       

    ; calling function sdlInit_0, added to stack 0                                  
    ; Calling function sdlInit_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:120:8
    call    sdlInit_0                                                               
    ; end calling function sdlInit_0                                                

    ; inlining function if_0, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 12             
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function sdlTTFInit_0, added to stack 0 + 12 + 4
    ; Calling function sdlTTFInit_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:121:14
    call    sdlTTFInit_0                                                            
    ; end calling function sdlTTFInit_0                                             
    mov dword [esp + 0], eax                                                        ; a = sdlTTFInit_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:121:14

    mov     eax,[ebp+-4-(0 + 12)-104]
    cmp     eax,1
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    add     esp,4                                                                   ; restore stack for eq_0
    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:121:19
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_154                                               
    mov  dword edx, static_memory_155                                               
    mov dword [edx], lambda10                                                       
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_156                                               
    mov  dword edx, static_memory_157                                               
    mov dword [edx], lambda11                                                       
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-104]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-104]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-104]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_0
    ; end inlining function if_0                                                    

    ; calling function sdlOpenFont_0, added to stack 0                              
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_0, added to stack 0 + 8            
    sub esp, 8                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [const_5]                                                        ; static RASMRESOURCEFOLDER
    mov dword [esp + 4], eax                                                        ; static RASMRESOURCEFOLDER
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [_s_159]                                                         
    mov dword [esp + 8], eax                                                        
    pop eax                                                                         
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:123:27
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    
    mov dword [esp + 0], eax                                                        ; file = add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:123:27

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 72], eax                                                   
    mov dword [esp + 4], 24                                                         
    ; Calling function sdlOpenFont_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:123:23
    call    sdlOpenFont_0                                                           
    add     esp,8                                                                   ; restore stack for sdlOpenFont_0
    ; end calling function sdlOpenFont_0                                            
    mov dword [ebp + -68], eax                                                      ; 

    ; calling function loadHighScores_0, added to stack 0                           
    ; Calling function loadHighScores_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:125:32
    call    loadHighScores_0                                                        
    ; end calling function loadHighScores_0                                         
    mov dword [ebp + -76], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 76]                                                       
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function State_0, added to stack 0                                    
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; calling function Resources_0, added to stack 0 + 16      
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val font original_param_name font                                  
    ; param font, index_relative_to_bp -17                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-68]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function Resources_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:35
    call    Resources_0                                                             
    add     esp,4                                                                   ; restore stack for Resources_0
    ; end calling function Resources_0                                              
    mov dword [esp + 0], eax                                                        ; resources = Resources_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:35

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 84], eax                                                   

    ; calling function Vec_0, added to stack 0 + 16            
    ; Calling function Vec_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:46
    call    Vec_0                                                                   
    ; end calling function Vec_0                                                    
    mov dword [esp + 4], eax                                                        ; keys = Vec_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:46

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 88], eax                                                   

    ; calling function Stage_Menu_0, added to stack 0 + 16     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function MenuState_0, added to stack 0 + 16 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val highScores original_param_name highScores                      
    ; param highScores, index_relative_to_bp -19                                    
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-76]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function MenuState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:71
    call    MenuState_0                                                             
    add     esp,4                                                                   ; restore stack for MenuState_0
    ; end calling function MenuState_0                                              
    mov dword [esp + 0], eax                                                        ; menuState = MenuState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:71

    ; add ref 
    push     dword eax                                                              
    call     MenuState_4_addRef                                                     
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 92], eax                                                   
    ; Calling function Stage_Menu_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:55
    call    Stage_Menu_0                                                            
    add     esp,4                                                                   ; restore stack for Stage_Menu_0
    ; end calling function Stage_Menu_0                                             
    mov dword [esp + 8], eax                                                        ; stage = Stage_Menu_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:55

    ; add ref 
    push     dword eax                                                              
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 96], eax                                                   
    ; adding let val highScores original_param_name highScores                      
    ; param highScores, index_relative_to_bp -19                                    
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-76]                                                       
    mov  dword [esp + 16], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function State_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:127:25
    call    State_0                                                                 
    add     esp,16                                                                  ; restore stack for State_0
    ; end calling function State_0                                                  
    mov dword [ebp + -80], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 80]                                                       
    call     State_14_addRef                                                        
    add      esp,4                                                                  

    ; calling function sdlErrorIfNull_0, added to stack 0                           
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function sdlCreateWindow_0, added to stack 0 + 8
    sub esp, 20                                                                     ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_161]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    mov dword [esp + 4], 100                                                        
    mov dword [esp + 8], 100                                                        
    push eax                                                                        
    mov dword eax, [const_6]                                                        ; static WIDTH
    mov dword [esp + 16], eax                                                       ; static WIDTH
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [const_7]                                                        ; static HEIGHT
    mov dword [esp + 20], eax                                                       ; static HEIGHT
    pop eax                                                                         
    ; Calling function sdlCreateWindow_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:129:41
    call    sdlCreateWindow_0                                                       
    add     esp,20                                                                  ; restore stack for sdlCreateWindow_0
    ; end calling function sdlCreateWindow_0                                        
    mov dword [esp + 0], eax                                                        ; value = sdlCreateWindow_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:129:41
    push eax                                                                        
    mov dword eax, [_s_163]                                                         
    mov dword [esp + 8], eax                                                        
    pop eax                                                                         
    ; Calling function sdlErrorIfNull_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:129:25
    call    sdlErrorIfNull_0                                                        
    add     esp,8                                                                   ; restore stack for sdlErrorIfNull_0
    ; end calling function sdlErrorIfNull_0                                         
    mov dword [ebp + -100], eax                                                     ; 

    ; calling function sdlErrorIfNull_1, added to stack 0                           
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function sdlCreateRenderer_0, added to stack 0 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val win original_param_name win                                    
    ; param win, index_relative_to_bp -25                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-100]                                                      
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlCreateRenderer_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:130:43
    call    sdlCreateRenderer_0                                                     
    add     esp,4                                                                   ; restore stack for sdlCreateRenderer_0
    ; end calling function sdlCreateRenderer_0                                      
    mov dword [esp + 0], eax                                                        ; value = sdlCreateRenderer_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:130:43
    push eax                                                                        
    mov dword eax, [_s_165]                                                         
    mov dword [esp + 8], eax                                                        
    pop eax                                                                         
    ; Calling function sdlErrorIfNull_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:130:25
    call    sdlErrorIfNull_1                                                        
    add     esp,8                                                                   ; restore stack for sdlErrorIfNull_1
    ; end calling function sdlErrorIfNull_1                                         
    mov dword [ebp + -104], eax                                                     ; 

    ; calling function sdlLoop_0, added to stack 0                                  
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding let val ren original_param_name ctx                                    
    ; param ctx, index_relative_to_bp -26                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-104]                                                      
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val initialState original_param_name model                         
    ; param model, index_relative_to_bp -20                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-80]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_166                                               
    mov  dword edx, static_memory_167                                               
    mov dword [edx], lambda25                                                       
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_168                                               
    mov  dword edx, static_memory_169                                               
    mov dword [edx], lambda26                                                       
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 16], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function sdlLoop_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:132:8
    call    sdlLoop_0                                                               
    add     esp,16                                                                  ; restore stack for sdlLoop_0
    ; end calling function sdlLoop_0                                                

    ; calling function sdlDestroyRenderer_0, added to stack 0                       
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val ren original_param_name ren                                    
    ; param ren, index_relative_to_bp -26                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-104]                                                      
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlDestroyRenderer_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:137:19
    call    sdlDestroyRenderer_0                                                    
    add     esp,4                                                                   ; restore stack for sdlDestroyRenderer_0
    ; end calling function sdlDestroyRenderer_0                                     

    ; calling function sdlDestroyWindow_0, added to stack 0                         
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val win original_param_name win                                    
    ; param win, index_relative_to_bp -25                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-100]                                                      
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlDestroyWindow_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:138:17
    call    sdlDestroyWindow_0                                                      
    add     esp,4                                                                   ; restore stack for sdlDestroyWindow_0
    ; end calling function sdlDestroyWindow_0                                       



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 96]                                                       
    call     Stage_0_deref                                                          
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 92]                                                       
    call     MenuState_4_deref                                                      
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 88]                                                       
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 84]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push     dword [ebp - 80]                                                       
    call     State_14_deref                                                         
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 76]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 72]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  




    add   esp, 104                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    push dword 0                                                                    
    call    exitMain_0                                                              
    add  esp, 4                                                                     
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:4:7               
; function List_Full_2(head:HighScore_3,tail:List_11) -> List_11                
List_Full_2:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                  
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+12]                                                                ; parameter tail
    mov dword  [eax + 4], ebx                                                       
    mov   ebx, [ebp+8]                                                                ; parameter head
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:7:8
; function update_3(fps:FPS_9) -> FPS_9                                         
update_3:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 92                                                                   ; reserve stack local vals (let)

    ; calling function now_0, added to stack 0                                      
    ; Calling function now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:8:18
    call    now_0                                                                   
    ; end calling function now_0                                                    
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function elapsedTime_0, added to stack 0                              
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val now original_param_name actual                                 
    ; param actual, index_relative_to_bp -1                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function lastFPSUpdate_0, added to stack 0 + 8
    ; adding val fps                                                                
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function lastFPSUpdate_0                                         
    mov dword [esp + 4], eax                                                        ; previous = lastFPSUpdate_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:9:48

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function elapsedTime_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:9:25
    call    elapsedTime_0                                                           
    add     esp,8                                                                   ; restore stack for elapsedTime_0
    ; end calling function elapsedTime_0                                            
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function if_8, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function greater_0, added to stack 0 + 12      
    ; adding let val et original_param_name a                                       
    ; param a, index_relative_to_bp -2                                              

    mov     eax,[ebp+-8]
    cmp     eax,1000000
    mov     eax,1 ; true
    jg      $+7  ; Jump if greater unsigned comparison
    mov     eax,0 ; false

    ; end inlining function greater_0                                               
    mov dword [esp + 0], eax                                                        ; cond = greater_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:11:16
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,32                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,56                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-8]                                                        ; context parameter et
    mov  dword [edx + 12], ecx                                                      ; context parameter et
    mov  dword ecx, [ebp+8]                                                         ; context parameter fps
    mov  dword [edx + 16], ecx                                                      ; context parameter fps
    mov  dword ecx, [ebp+-4]                                                        ; context parameter now
    mov  dword [edx + 20], ecx                                                      ; context parameter now
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda215                                                      
    mov dword [edx + 4], lambda215_add_ref                                          
    mov dword [edx + 2 * 4], lambda215_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,76                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,92                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter fps
    mov  dword [edx + 12], ecx                                                      ; context parameter fps
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda216                                                      
    mov dword [edx + 4], lambda216_add_ref                                          
    mov dword [edx + 2 * 4], lambda216_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-92]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-92]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-92]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_8
    ; end inlining function if_8                                                    


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    add   esp, 92                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:52:7
; function sdlErrorIfNull_1(value:SDLRenderer_1,message:str) -> SDLRenderer_1   
sdlErrorIfNull_1:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 76                                                                   ; reserve stack local vals (let)

    ; inlining function if_2, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function isSDLNull_0, added to stack 0 + 12     
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val value                                                              
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function isSDLNull_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:17
    call    isSDLNull_0                                                             
    add     esp,4                                                                   ; restore stack for isSDLNull_0
    ; end calling function isSDLNull_0                                              
    mov dword [esp + 0], eax                                                        ; cond = isSDLNull_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:17
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter message
    mov  dword [edx + 12], ecx                                                      ; context parameter message
    mov  dword ecx, [ebp+8]                                                         ; context parameter value
    mov  dword [edx + 16], ecx                                                      ; context parameter value
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda117                                                      
    mov dword [edx + 4], lambda117_add_ref                                          
    mov dword [edx + 2 * 4], lambda117_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,60                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,76                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter value
    mov  dword [edx + 12], ecx                                                      ; context parameter value
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda118                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-76]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-76]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-76]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_2
    ; end inlining function if_2                                                    


    add   esp, 76                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:128:14            
; function lambda674(head:EnumerateEntry_10,tail:List_6) -> List_6              
lambda674:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 84                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function if_12, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function f, added to stack 0 + 12               
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param p_677, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function f : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:13
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,4                                                                   ; restore stack for f
    ; end calling function f                                                        
    mov dword [esp + 0], eax                                                        ; cond = f : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:13
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,44                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 24                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent f
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent f
    mov  dword ebx, [ebp+12]                                                        ; context parameter head
    mov  dword [ecx + 16], ebx                                                      ; context parameter head
    mov  dword ebx, [ebp+16]                                                        ; context parameter tail
    mov  dword [ecx + 20], ebx                                                      ; context parameter tail
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda679                                                      
    mov dword [ecx + 4], lambda679_add_ref                                          
    mov dword [ecx + 2 * 4], lambda679_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,64                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,84                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent f
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent f
    mov  dword ebx, [ebp+16]                                                        ; context parameter tail
    mov  dword [ecx + 16], ebx                                                      ; context parameter tail
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda680                                                      
    mov dword [ecx + 4], lambda680_add_ref                                          
    mov dword [ecx + 2 * 4], lambda680_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-88]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-88]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-88]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_12
    ; end inlining function if_12                                                   


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 84                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:86:8
; function render_2(ren:SDLRenderer_1,resources:Resources_13,gameState:GameState_5)
render_2:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 48                                                                   ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; calling function match_6, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function stage_1, added to stack 0 + 12        
    ; adding val gameState                                                          
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function stage_1                                                 
    mov dword [esp + 0], eax                                                        ; value = stage_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:87:26

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_204                                               
    mov  dword edx, static_memory_205                                               
    mov dword [edx], lambda448                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,24                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,48                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter gameState
    mov  dword [edx + 12], ecx                                                      ; context parameter gameState
    mov  dword ecx, [ebp+8]                                                         ; context parameter ren
    mov  dword [edx + 16], ecx                                                      ; context parameter ren
    mov  dword ecx, [ebp+12]                                                        ; context parameter resources
    mov  dword [edx + 20], ecx                                                      ; context parameter resources
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda449                                                      
    mov dword [edx + 4], lambda449_add_ref                                          
    mov dword [edx + 2 * 4], lambda449_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_6 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:87:10
    call    match_6                                                                 
    add     esp,12                                                                  ; restore stack for match_6
    ; end calling function match_6                                                  

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  




    pop eax                                                                         ; restoring return register
    add   esp, 48                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda241_add_ref(address:i32,descr:str)                             
lambda241_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:14             
; function lambda758(head:str,tail:List_9) -> List_15                           
lambda758:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_0, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function f, added to stack 0 + 8               
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param p_761, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function f : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:41
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,4                                                                   ; restore stack for f
    ; end calling function f                                                        
    mov dword [esp + 0], eax                                                        ; head = f : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:41

    ; add ref 
    push     dword eax                                                              
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function map_0, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param l, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function map_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:52
    call    map_0                                                                   
    add     esp,8                                                                   ; restore stack for map_0
    ; end calling function map_0                                                    
    mov dword [esp + 4], eax                                                        ; tail = map_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:52

    ; add ref 
    push     dword eax                                                              
    call     List_15_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function List_Full_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:33
    call    List_Full_0                                                             
    add     esp,8                                                                   ; restore stack for List_Full_0
    ; end calling function List_Full_0                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     List_15_deref                                                          
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function KeyEvent_15_addRef(address:KeyEvent_15)                              
KeyEvent_15_addRef:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/str.rasm:22:8               
; function add_5(a:str,b:str,c:str) -> str                                      
add_5:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; calling function add_0, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_0, added to stack 0 + 8            
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function toString_2, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val a                                                                  
    ; param s, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function toString_2 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:21
    call    toString_2                                                              
    add     esp,4                                                                   ; restore stack for toString_2
    ; end calling function toString_2                                               
    mov dword [esp + 0], eax                                                        ; s1 = toString_2 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:21

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function toString_2, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val b                                                                  
    ; param s, index_relative_to_bp 3                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function toString_2 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:34
    call    toString_2                                                              
    add     esp,4                                                                   ; restore stack for toString_2
    ; end calling function toString_2                                               
    mov dword [esp + 4], eax                                                        ; s2 = toString_2 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:34

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:12
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    
    mov dword [esp + 0], eax                                                        ; s1 = add_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:12

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   

    ; calling function toString_2, added to stack 0 + 8       
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val c                                                                  
    ; param s, index_relative_to_bp 4                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function toString_2 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:48
    call    toString_2                                                              
    add     esp,4                                                                   ; restore stack for toString_2
    ; end calling function toString_2                                               
    mov dword [esp + 4], eax                                                        ; s2 = toString_2 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:48

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:23:8
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 16]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 12]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  



    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:140:8
; function sdlSetRenderDrawColor_0(ren:SDLRenderer_1,color:SDLColor_0)          
sdlSetRenderDrawColor_0:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function sdlSetRenderDrawColor_1, added to stack 0                    
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function r_0, added to stack 0 + 20            
    ; adding val color                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function r_0                                                     
    mov dword [esp + 4], eax                                                        ; r = r_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:141:33

    ; inlining function g_0, added to stack 0 + 20            
    ; adding val color                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function g_0                                                     
    mov dword [esp + 8], eax                                                        ; g = g_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:141:43

    ; inlining function b_0, added to stack 0 + 20            
    ; adding val color                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function b_0                                                     
    mov dword [esp + 12], eax                                                       ; b = b_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:141:53

    ; inlining function a_0, added to stack 0 + 20            
    ; adding val color                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function a_0                                                     
    mov dword [esp + 16], eax                                                       ; a = a_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:141:63
    ; Calling function sdlSetRenderDrawColor_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:141:26
    call    sdlSetRenderDrawColor_1                                                 
    add     esp,20                                                                  ; restore stack for sdlSetRenderDrawColor_1
    ; end calling function sdlSetRenderDrawColor_1                                  






    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:5:12               
; function Pair_1(first:f32,second:YDirection_2) -> Pair_12                     
Pair_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property first
    mov   ebx, [ebp+8]                                                               
    mov dword  [eax + 0], ebx                                                       

    ; property second
    mov   ebx, [ebp+12]                                                              
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:5:19               
; function lambda1180(v2:i32) -> Brick_2                                        
lambda1180:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function zipFunction, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val v1                                                                 
    ; add_lambda_param_from_lambda_space, original_param_name p_1183, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val v2                                                                 
    ; param p_1184, index_relative_to_bp 3                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 16                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function zipFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:5:38
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,8                                                                   ; restore stack for zipFunction
    ; end calling function zipFunction                                              

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda930_deref(address:i32,descr:str)                               
lambda930_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:1:9
; function vecOf_1(value:HighScore_3) -> Vec_0                                  
vecOf_1:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_109]
    push dword 8
    call malloc_0
    add esp, 8

    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 1
    push    ebx
    mov     dword ebx, [ebp+8]
    mov     dword [eax + 4], ebx
    pop     ebx

    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; function lambda1178_deref(address:i32,descr:str)                              
lambda1178_deref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 4]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_20(value:Option_16,Some:fn (Brick_2) -> Vec_3,None:fn () -> Vec_3) -> Vec_3
match_20:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:45:9
; function lambda372() -> Pair_12                                               
lambda372:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Pair_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newY original_param_name first                                 
    ; add_lambda_param_from_lambda_space, original_param_name first, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val yDir                                                               
    ; add_lambda_param_from_lambda_space, original_param_name second, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function Pair_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:45:18
    call    Pair_1                                                                  
    add     esp,8                                                                   ; restore stack for Pair_1
    ; end calling function Pair_1                                                   

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function FileMode_24_deref(address:FileMode_24)                               
FileMode_24_deref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 8]                                                        
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:46:8               
; function sort_0(vec:Vec_0,cmpFunction:fn (HighScore_3,HighScore_3) -> Compare_5) -> Vec_0
sort_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)

    ; inlining function if_9, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function less_1, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function len_1, added to stack 0 + 8 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function len_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:47:16
    call    len_1                                                                   
    add     esp,4                                                                   ; restore stack for len_1
    ; end calling function len_1                                                    
    mov dword [esp + 0], eax                                                        ; a = len_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:47:16

    mov     eax,[ebp+-4-(0 + 8)-40]
    cmp     eax,2
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    add     esp,4                                                                   ; restore stack for less_1
    ; end inlining function less_1                                                  
    mov dword [esp + 0], eax                                                        ; cond = less_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:47:12
    ; adding val vec                                                                
    ; param vtrue, index_relative_to_bp 2                                           
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter cmpFunction
    mov  dword [edx + 12], ecx                                                      ; context parameter cmpFunction
    mov  dword ecx, [ebp+8]                                                         ; context parameter vec
    mov  dword [edx + 16], ecx                                                      ; context parameter vec
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda815                                                      
    mov dword [edx + 4], lambda815_add_ref                                          
    mov dword [edx + 2 * 4], lambda815_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-8-(0)-40]
    cmp     eax, 0
    jz      $+11
    mov     eax, [ebp+8]
    jmp     $+18
    nop     ; nops are used because it's inlined and [ebp+8] could be an immediate value or an address so we don't know where to jump exactly...
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-40]
    mov     dword eax,[eax]
    push    eax
    call    [eax]
    add     dword esp, 4
    nop
    nop

    add     esp,8                                                                   ; restore stack for if_9
    ; end inlining function if_9                                                    



    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_18(value:List_15,Full:fn (List_11,List_15) -> List_11,Empty:fn () -> List_11) -> List_11
match_18:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function FPS_9_deref(address:FPS_9)                                           
FPS_9_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda679_deref(address:i32,descr:str)                               
lambda679_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     EnumerateEntry_10_deref                                                
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 8]                                                        
    call     List_6_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda823_add_ref(address:i32,descr:str)                             
lambda823_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:141:12            
; function EnumerateEntry_0(index:i32,value:HighScore_3) -> EnumerateEntry_17   
EnumerateEntry_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property index
    mov   ebx, [ebp+8]                                                               
    mov dword  [eax + 0], ebx                                                       

    ; property value
    mov   ebx, [ebp+12]                                                               
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:75:16
; function lambda289() -> World_6                                               
lambda289:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function World_0, added to stack 0                                    
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding let val newBricks original_param_name bricks                           
    ; add_lambda_param_from_lambda_space, original_param_name bricks, lambda_space_index 4
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 24]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newBall original_param_name ball                               
    ; add_lambda_param_from_lambda_space, original_param_name ball, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newBar original_param_name bar                                 
    ; add_lambda_param_from_lambda_space, original_param_name bar, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newScore original_param_name score                             
    ; add_lambda_param_from_lambda_space, original_param_name score, lambda_space_index 5
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 28]                                                      
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val lives original_param_name lives                                
    ; add_lambda_param_from_lambda_space, original_param_name lives, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 20], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function World_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:76:22
    call    World_0                                                                 
    add     esp,20                                                                  ; restore stack for World_0
    ; end calling function World_0                                                  

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:219:14
; function lambda715(error:IOError_16)                                          
lambda715:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function println_4, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val error                                                              
    ; param v, index_relative_to_bp 3                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function println_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:220:20
    call    println_4                                                               
    add     esp,4                                                                   ; restore stack for println_4
    ; end calling function println_4                                                

    ; calling function exitMain_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 1                                                          
    ; Calling function exitMain_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:221:21
    call    exitMain_0                                                              
    add     esp,4                                                                   ; restore stack for exitMain_0
    ; end calling function exitMain_0                                               

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:391:9
; function len_1(vec:Vec_0) -> i32                                              
len_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

      mov     dword eax, [ebp+8]
      mov     dword eax, [eax]
      mov     dword eax, [eax]

    pop     ebp                                                                     
    ret                                                                             
; function lambda449_deref(address:i32,descr:str)                               
lambda449_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function GameState_5_deref(address:GameState_5)                               
GameState_5_deref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push     dword [ebx + 4]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:24:14
; function lambda1200() -> i32                                                  
lambda1200:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 4                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function IOError_16_deref(address:IOError_16)                                 
IOError_16_deref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:429:9
; function first_2(vec:Vec_3) -> Option_16                                      
first_2:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    mov     dword eax, [ebx]
    cmp     eax, 0
    jz      .empty
    mov     dword eax, [ebx + 4]
    
    ; add ref 
    push     dword eax                                                              
    call     Brick_2_addRef                                                         
    add      esp,4                                                                  

    ; call macro, calling Option_Some_6
    push dword eax
    call Option_Some_6
    add esp, 4

    jmp     .end
.empty:
    mov     dword eax, [_enum_Option_None]
.end:
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function match_15(value:Option_12,Some:fn (IOError_16) -> (),None:fn () -> ())
match_15:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:286:9
; function greater_1(f1:f32,n2:i32) -> bool                                     
greater_1:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling cmp_2
    push dword [ebp+12]
    push dword [ebp+8]
    call cmp_2
    add esp, 8

    cmp     dword eax,0
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
    pop     ebp                                                                     
    ret                                                                             
; function GameResult_4_addRef(address:GameResult_4)                            
GameResult_4_addRef:                                                            
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    cmp dword [ebx], 1                                                              
    jne ._variant_1                                                                 
    jmp .end                                                                        
._variant_1:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda973_add_ref(address:i32,descr:str)                             
lambda973_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function List_15_addRef(address:List_15)                                      
List_15_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     List_15_addRef                                                         
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:47:21
; function lambda196() -> GameResult_4                                          
lambda196:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function GameResult_End_0, added to stack 0                           
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val score original_param_name score                                
    ; add_lambda_param_from_lambda_space, original_param_name score, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function GameResult_End_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:47:36
    call    GameResult_End_0                                                        
    add     esp,4                                                                   ; restore stack for GameResult_End_0
    ; end calling function GameResult_End_0                                         

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:392:8
; function renderAndRelease_0(ren:SDLRenderer_1,text:SDLText_18,rect:SDLRect_19)
renderAndRelease_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function texture_0, added to stack 0                                 
    ; adding val text                                                               
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function texture_0                                               
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function sdlRenderText_0, added to stack 0                            
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val texture original_param_name message                            
    ; param message, index_relative_to_bp -1                                        
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val rect                                                               
    ; param rect, index_relative_to_bp 4                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlRenderText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:394:18
    call    sdlRenderText_0                                                         
    add     esp,12                                                                  ; restore stack for sdlRenderText_0
    ; end calling function sdlRenderText_0                                          

    ; calling function sdlDestroyTexture_0, added to stack 0                        
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val texture original_param_name tex                                
    ; param tex, index_relative_to_bp -1                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlDestroyTexture_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:395:22
    call    sdlDestroyTexture_0                                                     
    add     esp,4                                                                   ; restore stack for sdlDestroyTexture_0
    ; end calling function sdlDestroyTexture_0                                      

    ; calling function sdlFreeSurface_0, added to stack 0                           
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function surface_0, added to stack 0 + 4      
    ; adding val text                                                               
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function surface_0                                               
    mov dword [esp + 0], eax                                                        ; surface = surface_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:396:32
    ; Calling function sdlFreeSurface_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:396:19
    call    sdlFreeSurface_0                                                        
    add     esp,4                                                                   ; restore stack for sdlFreeSurface_0
    ; end calling function sdlFreeSurface_0                                         



    pop eax                                                                         ; restoring return register
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda427_add_ref(address:i32,descr:str)                             
lambda427_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:36:9
; function lambda352() -> Pair_11                                               
lambda352:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Pair_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function sub_3, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 0x0                                                        
    ; adding let val newX original_param_name f2                                    
    ; add_lambda_param_from_lambda_space, original_param_name f2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sub_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:36:22
    call    sub_3                                                                   
    add     esp,8                                                                   ; restore stack for sub_3
    ; end calling function sub_3                                                    
    mov dword [esp + 0], eax                                                        ; first = sub_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:36:22

    ; calling function flip_1, added to stack 0 + 8          
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val xDir                                                               
    ; add_lambda_param_from_lambda_space, original_param_name xDir, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function flip_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:36:39
    call    flip_1                                                                  
    add     esp,4                                                                   ; restore stack for flip_1
    ; end calling function flip_1                                                   
    mov dword [esp + 4], eax                                                        ; second = flip_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:36:39

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function Pair_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:36:18
    call    Pair_0                                                                  
    add     esp,8                                                                   ; restore stack for Pair_0
    ; end calling function Pair_0                                                   

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  




    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:319:9
; function cmp_3(f1:f32,f2:f32) -> i32                                          
cmp_3:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    finit

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fcom    dword [ebp - 4]
    fstsw   [ebp - 4]
    mov     dword eax,[ebp - 4]
    and     dword eax,0x4500    ; c0 bit 8 (0 based), c2 bit 10, c3 bit 14

    finit

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; function lambda412_add_ref(address:i32,descr:str)                             
lambda412_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Option_10_addRef                                                       
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:27:9
; function add_0(s1:str,s2:str) -> str                                          
add_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    ; call macro, calling slen_0
    push dword [ebp+8]
    call slen_0
    add esp, 4

    mov     ecx, eax
    mov     ebx, eax
    ; call macro, calling slen_0
    push dword [ebp+12]
    call slen_0
    add esp, 4

    mov     edx, eax
    add     ebx, eax
    add     ebx, 1

    ; call macro, calling malloc_0
    push dword [_s_67]
    push dword ebx
    call malloc_0
    add esp, 8

    push    eax

    mov     dword ebx,[ebp+8]
    mov     dword ebx,[ebx]
    ; call macro, calling memcopy_0
    push dword ecx
    push dword [eax]
    push dword ebx
    call memcopy_0
    add esp, 12


    mov     dword eax,[eax]
    add     eax,ecx
    add     edx,1
    mov     dword ebx,[ebp+12]
    mov     dword ebx,[ebx]
    ; call macro, calling memcopy_0
    push dword edx
    push dword eax
    push dword ebx
    call memcopy_0
    add esp, 12


    pop     eax

    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:15:9               
; function lambda584() -> Vec_0                                                 
lambda584:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Vec_1, added to stack 0                                      
    ; Calling function Vec_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:15:17
    call    Vec_1                                                                   
    ; end calling function Vec_1                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:9:8
; function initialBall_0(now:TimeVal_1) -> Ball_7                               
initialBall_0:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)

    ; calling function Ball_0, added to stack 0                                     
    sub esp, 20                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0x43fa0000                                                 
    mov dword [esp + 4], 0x43480000                                                 

    ; inlining function XDirection_Right_0, added to stack 0 + 20
    mov    eax, [_enum_XDirection_Right]

    ; end inlining function XDirection_Right_0                                      
    mov dword [esp + 8], eax                                                        ; xDir = XDirection_Right_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:10:34

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; inlining function YDirection_Down_0, added to stack 0 + 20
    mov    eax, [_enum_YDirection_Down]

    ; end inlining function YDirection_Down_0                                       
    mov dword [esp + 12], eax                                                       ; yDir = YDirection_Down_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:10:55

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; adding val now                                                                
    ; param lastUpdate, index_relative_to_bp 2                                      
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 20], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function Ball_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:10:9
    call    Ball_0                                                                  
    add     esp,20                                                                  ; restore stack for Ball_0
    ; end calling function Ball_0                                                   

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Pair_11_addRef(address:Pair_11)                                      
Pair_11_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_4(value:Stage_0,Menu:fn (MenuState_4) -> State_14,Game:fn (GameState_5) -> State_14) -> State_14
match_4:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param menuState                                                               
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param gameState                                                               
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_83]
    push dword 1
    call print_1
    add esp, 8
                            
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:32:8
; function update_2(resources:Resources_13,keys:Vec_5,gameState:GameState_5) -> GameResult_4
update_2:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 192                                                                  ; reserve stack local vals (let)

    ; inlining function stage_1, added to stack 0                                   
    ; adding val gameState                                                          
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function stage_1                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function update_3, added to stack 0                                   
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function fps_0, added to stack 0 + 4          
    ; adding val gameState                                                          
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function fps_0                                                   
    mov dword [esp + 0], eax                                                        ; fps = fps_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:34:28

    ; add ref 
    push     dword eax                                                              
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function update_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:34:35
    call    update_3                                                                
    add     esp,4                                                                   ; restore stack for update_3
    ; end calling function update_3                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  

    ; calling function match_13, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val stage original_param_name value                                
    ; param value, index_relative_to_bp -1                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,36                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,56                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-8]                                                        ; context parameter fps
    mov  dword [edx + 12], ecx                                                      ; context parameter fps
    mov  dword ecx, [ebp+16]                                                        ; context parameter gameState
    mov  dword [edx + 16], ecx                                                      ; context parameter gameState
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda189                                                      
    mov dword [edx + 4], lambda189_add_ref                                          
    mov dword [edx + 2 * 4], lambda189_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,76                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,108                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 32                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-8]                                                        ; context parameter fps
    mov  dword [edx + 12], ecx                                                      ; context parameter fps
    mov  dword ecx, [ebp+16]                                                        ; context parameter gameState
    mov  dword [edx + 16], ecx                                                      ; context parameter gameState
    mov  dword ecx, [ebp+12]                                                        ; context parameter keys
    mov  dword [edx + 20], ecx                                                      ; context parameter keys
    mov  dword ecx, [ebp+8]                                                         ; context parameter resources
    mov  dword [edx + 24], ecx                                                      ; context parameter resources
    mov  dword ecx, [ebp+-4]                                                        ; context parameter stage
    mov  dword [edx + 28], ecx                                                      ; context parameter stage
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda190                                                      
    mov dword [edx + 4], lambda190_add_ref                                          
    mov dword [edx + 2 * 4], lambda190_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_13 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:36:29
    call    match_13                                                                
    add     esp,12                                                                  ; restore stack for match_13
    ; end calling function match_13                                                 
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 16]                                                       
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  

    ; inlining function world_0, added to stack 0                                   
    ; adding let val newGameState original_param_name v                             
    ; param v, index_relative_to_bp -4                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function world_0                                                 
    mov dword [ebp + -112], eax                                                     ; 

    ; add ref 
    push     dword [ebp - 112]                                                      
    call     World_6_addRef                                                         
    add      esp,4                                                                  

    ; inlining function lives_0, added to stack 0                                   
    ; adding let val newWorld original_param_name v                                 
    ; param v, index_relative_to_bp -28                                             
    push ebx                                                                        
    mov   dword ebx, [ebp+-112]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 16]                                                      
    pop   ebx                                                                       

    ; end inlining function lives_0                                                 
    mov dword [ebp + -116], eax                                                     ; 

    ; inlining function score_1, added to stack 0                                   
    ; adding let val newWorld original_param_name v                                 
    ; param v, index_relative_to_bp -28                                             
    push ebx                                                                        
    mov   dword ebx, [ebp+-112]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function score_1                                                 
    mov dword [ebp + -120], eax                                                     ; 

    ; inlining function if_6, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 12           
    ; adding let val lives original_param_name a                                    
    ; param a, index_relative_to_bp -29                                             

    mov     eax,[ebp+-116]
    cmp     eax,0
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:47:10
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,140                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,156                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-120]                                                      ; context parameter score
    mov  dword [edx + 12], ecx                                                      ; context parameter score
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda196                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,176                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,192                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-16]                                                       ; context parameter newGameState
    mov  dword [edx + 12], ecx                                                      ; context parameter newGameState
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda197                                                      
    mov dword [edx + 4], lambda197_add_ref                                          
    mov dword [edx + 2 * 4], lambda197_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-192]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-192]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-192]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_6
    ; end inlining function if_6                                                    


    ; deref 
    push     dword [ebp - 112]                                                      
    call     World_6_deref                                                          
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 16]                                                       
    call     GameState_5_deref                                                      
    add      esp,4                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 12]                                                       
    call     FPS_9_deref                                                            
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 8]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    add   esp, 192                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:256:9
; function filter_1(vec:Vec_0,filter:fn (HighScore_3) -> bool) -> Vec_0         
filter_1:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    push    ebx
    ; multiply ebx by 4
    shl     ebx, 2
    ; add the space for the size
    add     ebx, 4
    ; call macro, calling malloc_0
    push dword [_s_113]
    push dword ebx
    call malloc_0
    add esp, 8

    ; call macro, calling addRef_0
    push dword [_s_115]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ebx

    push    eax

    mov     dword edx, [eax]
    add     edx, 4  ; the address of the value in the new array
.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    mov     dword eax, [ecx]
    mov     dword [edx], eax
    add     edx, 4
.false:
    dec     ebx
    add     ecx, 4
    jmp     .loop
.end:
    pop     eax
    ; call macro, calling deref_0
    push dword [_s_115]
    push dword eax
    call deref_0
    add esp, 8

    sub     dword edx, [eax]
    ; divide ebx by 4, we get the len
    shr     edx, 2
    dec     edx         ; we remove 1 for the size
    mov     dword ecx, [eax]
    mov     dword [ecx], edx
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:124:8
; function nextChar_0(s:str,offset:i32) -> i32                                  
nextChar_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals


    push    ebx
    push    ecx

    mov     ecx,0

    mov     dword ebx,[ebp+8]
    mov     dword ebx,[ebx]
    add     ebx, [ebp+12]

    mov     dword eax,0
    mov     cl,[ebx]
    cmp     cl,0
    je      .end

    mov     eax,[ebp+12]

    and     cl,128+64+32+16
    cmp     cl,128+64+32+16
    jne     .b2
    add     eax, 4
    jmp     .end
.b2:
    mov     cl,[ebx]
    and     cl,128+64+32
    cmp     cl,128+64+32
    jne     .b3
    add     eax, 3
    jmp     .end
.b3:
    mov     cl,[ebx]
    and     cl,128+64
    cmp     cl,128+64
    jne      .b4
    add     eax, 2
    jmp     .end
.b4:
    add     eax, 1
.end:
    pop     ecx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; function Vec_9_addRef(address:Vec_9,descr:str)                                
Vec_9_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_9                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx]                                                            
    call     addRef_0                                                               
    add      esp,8                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:5:8
; function atoi_0(s:str) -> i32                                                 
atoi_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ecx
    push    edx ; don't remove since imul stores the "high" result to edx
    mov edx, [ebp+8] ; the pointer to the stack table our string
    mov dword edx, [edx]
    xor eax, eax ; zero a "result so far"
    .top:
    movzx ecx, byte [edx] ; get a character
    inc edx ; ready for next one
    cmp ecx, '0' ; valid?
    jb .done
    cmp ecx, '9'
    ja .done
    sub ecx, '0' ; "convert" character to number
    imul eax, 10 ; multiply "result so far" by ten
    add eax, ecx ; add in current digit
    jmp .top ; until done
.done:
    pop    edx
    pop    ecx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:321:5
; function sysPrint_0(file:File_6,s:i32,len:i32) -> Option_12                   
sysPrint_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    dword edx
    push    dword ecx
    push    dword ebx

    mov     dword edx, [ebp+16]
    mov     dword ecx, [ebp+12]
    mov     ebx, [ebp+8]
    mov     eax, 4
    int     80h

    cmp     dword eax, 0xfffff000   ; unsigned 2^32 - 4096, aka signed -4096
    ja      .error
    mov     dword eax, [_enum_Option_None]
    jmp     .end
.error:
    ; call macro, calling someIOError_0
    push dword [_s_135]
    call someIOError_0
    add esp, 4

.end:
    pop     ebx
    pop     ecx
    pop     edx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:463:4
; function invalidAddress_0()                                                   
invalidAddress_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function print_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_229]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; Calling function print_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:464:10
    call    print_0                                                                 
    add     esp,4                                                                   ; restore stack for print_0
    ; end calling function print_0                                                  

    ; calling function exitMain_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 1                                                          
    ; Calling function exitMain_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:465:13
    call    exitMain_0                                                              
    add     esp,4                                                                   ; restore stack for exitMain_0
    ; end calling function exitMain_0                                               


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:18:8            
; function run_0(o:Option_12,f:fn (IOError_16) -> ())                           
run_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function match_15, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val o                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; param Some, index_relative_to_bp 3                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_284                                               
    mov  dword edx, static_memory_285                                               
    mov dword [edx], lambda981                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_15 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:19:10
    call    match_15                                                                
    add     esp,12                                                                  ; restore stack for match_15
    ; end calling function match_15                                                 


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function GameState_5_addRef(address:GameState_5)                              
GameState_5_addRef:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     World_6_addRef                                                         
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_35(value:XDirection_1,Left:fn () -> f32,Right:fn () -> f32) -> f32
match_35:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_101]
    push dword 1
    call print_1
    add esp, 8
                       
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:185:18
; function lambda389(menuState:MenuState_4)                                     
lambda389:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function render_1, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val menuState                                                          
    ; param menuState, index_relative_to_bp 3                                       
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function render_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:185:39
    call    render_1                                                                
    add     esp,12                                                                  ; restore stack for render_1
    ; end calling function render_1                                                 

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:260:45
; function lambda733()                                                          
lambda733:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:79:19              
; function lambda866(e:EnumerateEntry_17) -> HighScore_3                        
lambda866:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function value_0, added to stack 0                                   
    ; adding val e                                                                  
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function value_0                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda389_deref(address:i32,descr:str)                               
lambda389_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function State_14_addRef(address:State_14)                                    
State_14_addRef:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_3_addRef(address:Vec_3,descr:str)                                
Vec_3_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_3                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push     dword [ebx]                                                            
    call     Brick_2_addRef                                                         
    add      esp,4                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:68:26
; function lambda272(brick:Brick_2) -> World_6                                  
lambda272:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function ballAfterCollision_0, added to stack 0                       
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val ball original_param_name ball                                  
    ; add_lambda_param_from_lambda_space, original_param_name ball, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val brick                                                              
    ; param brick, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function ballAfterCollision_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:69:46
    call    ballAfterCollision_0                                                    
    add     esp,8                                                                   ; restore stack for ballAfterCollision_0
    ; end calling function ballAfterCollision_0                                     
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; calling function World_0, added to stack 0                                    
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding let val newBricks original_param_name bricks                           
    ; add_lambda_param_from_lambda_space, original_param_name bricks, lambda_space_index 4
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 24]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newBall2 original_param_name ball                              
    ; param ball, index_relative_to_bp -1                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newBar original_param_name bar                                 
    ; add_lambda_param_from_lambda_space, original_param_name bar, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newScore original_param_name score                             
    ; add_lambda_param_from_lambda_space, original_param_name score, lambda_space_index 5
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 28]                                                      
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val lives original_param_name lives                                
    ; add_lambda_param_from_lambda_space, original_param_name lives, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 20], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function World_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:70:19
    call    World_0                                                                 
    add     esp,20                                                                  ; restore stack for World_0
    ; end calling function World_0                                                  

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda1180_add_ref(address:i32,descr:str)                            
lambda1180_add_ref:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 4]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:22:8            
; function map_1(o:Option_17,f:fn (EnumerateEntry_10) -> i32) -> Option_14      
map_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)

    ; calling function match_28, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val o                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter f
    mov  dword [edx + 12], ecx                                                      ; context parameter f
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda768                                                      
    mov dword [edx + 4], lambda768_add_ref                                          
    mov dword [edx + 2 * 4], lambda768_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_244                                               
    mov  dword edx, static_memory_245                                               
    mov dword [edx], lambda769                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_28 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:23:10
    call    match_28                                                                
    add     esp,12                                                                  ; restore stack for match_28
    ; end calling function match_28                                                 

    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function List_11_deref(address:List_11)                                       
List_11_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:48:9
; function lambda1193() -> i32                                                  
lambda1193:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 64                                                           

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:49:27              
; function lambda818(f:HighScore_3) -> Vec_0                                    
lambda818:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 144                                                                  ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function filter_1, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,24                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,44                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent cmpFunction
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent cmpFunction
    mov  dword ebx, [ebp+12]                                                        ; context parameter f
    mov  dword [ecx + 16], ebx                                                      ; context parameter f
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda823                                                      
    mov dword [ecx + 4], lambda823_add_ref                                          
    mov dword [ecx + 2 * 4], lambda823_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function filter_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:27
    call    filter_1                                                                
    add     esp,8                                                                   ; restore stack for filter_1
    ; end calling function filter_1                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function filter_1, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,68                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,88                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent cmpFunction
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent cmpFunction
    mov  dword ebx, [ebp+12]                                                        ; context parameter f
    mov  dword [ecx + 16], ebx                                                      ; context parameter f
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda825                                                      
    mov dword [ecx + 4], lambda825_add_ref                                          
    mov dword [ecx + 2 * 4], lambda825_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function filter_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:27
    call    filter_1                                                                
    add     esp,8                                                                   ; restore stack for filter_1
    ; end calling function filter_1                                                 
    mov dword [ebp + -48], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 48]                                                       
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function filter_1, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,112                                                               
    mov dword ebx,ebp                                                               
    sub dword ebx,132                                                               
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent cmpFunction
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent cmpFunction
    mov  dword ebx, [ebp+12]                                                        ; context parameter f
    mov  dword [ecx + 16], ebx                                                      ; context parameter f
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda827                                                      
    mov dword [ecx + 4], lambda827_add_ref                                          
    mov dword [ecx + 2 * 4], lambda827_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function filter_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:27
    call    filter_1                                                                
    add     esp,8                                                                   ; restore stack for filter_1
    ; end calling function filter_1                                                 
    mov dword [ebp + -92], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 92]                                                       
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function add_2, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function sort_0, added to stack 0 + 8          
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val l original_param_name vec                                      
    ; param vec, index_relative_to_bp -1                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val cmpFunction                                                        
    ; add_lambda_param_from_lambda_space, original_param_name cmpFunction, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sort_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:21
    call    sort_0                                                                  
    add     esp,8                                                                   ; restore stack for sort_0
    ; end calling function sort_0                                                   
    mov dword [esp + 0], eax                                                        ; vec1 = sort_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:21

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 136], eax                                                  

    ; calling function add_2, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val e original_param_name vec1                                     
    ; param vec1, index_relative_to_bp -12                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-48]                                                       
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function sort_0, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val g original_param_name vec                                      
    ; param vec, index_relative_to_bp -23                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-92]                                                       
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val cmpFunction                                                        
    ; add_lambda_param_from_lambda_space, original_param_name cmpFunction, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sort_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:50
    call    sort_0                                                                  
    add     esp,8                                                                   ; restore stack for sort_0
    ; end calling function sort_0                                                   
    mov dword [esp + 4], eax                                                        ; vec2 = sort_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:50

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 140], eax                                                  
    ; Calling function add_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:42
    call    add_2                                                                   
    add     esp,8                                                                   ; restore stack for add_2
    ; end calling function add_2                                                    
    mov dword [esp + 4], eax                                                        ; vec2 = add_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:42

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 144], eax                                                  
    ; Calling function add_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:53:16
    call    add_2                                                                   
    add     esp,8                                                                   ; restore stack for add_2
    ; end calling function add_2                                                    

    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 144]                                                      
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 140]                                                      
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 136]                                                      
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 92]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 48]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 144                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda245_add_ref(address:i32,descr:str)                             
lambda245_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 12]                                                       
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 16]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:29:4
; function update_7(x:f32,xDir:XDirection_1,diff:f32) -> Pair_11                
update_7:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 132                                                                  ; reserve stack local vals (let)

    ; calling function move_0, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val x                                                                  
    ; param x, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val xDir                                                               
    ; param xDir, index_relative_to_bp 3                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val diff                                                               
    ; param diff, index_relative_to_bp 4                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function move_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:30:22
    call    move_0                                                                  
    add     esp,12                                                                  ; restore stack for move_0
    ; end calling function move_0                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function sub_0, added to stack 0                                     

    mov     eax, [const_6]
    sub     eax, [const_13]

    ; end inlining function sub_0                                                   
    mov dword [ebp + -8], eax                                                       ; 

    ; calling function if_17, added to stack 0                                      
    sub esp, 20                                                                     ; Prepare stack for parameters

    ; calling function greater_1, added to stack 0 + 20       
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newX original_param_name f1                                    
    ; param f1, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val rightMargin original_param_name n2                             
    ; param n2, index_relative_to_bp -2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:33:16
    call    greater_1                                                               
    add     esp,8                                                                   ; restore stack for greater_1
    ; end calling function greater_1                                                
    mov dword [esp + 0], eax                                                        ; cond = greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:33:16
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,28                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,52                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter newX
    mov  dword [edx + 12], ecx                                                      ; context parameter newX
    mov  dword ecx, [ebp+-8]                                                        ; context parameter rightMargin
    mov  dword [edx + 16], ecx                                                      ; context parameter rightMargin
    mov  dword ecx, [ebp+12]                                                        ; context parameter xDir
    mov  dword [edx + 20], ecx                                                      ; context parameter xDir
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda350                                                      
    mov dword [edx + 4], lambda350_add_ref                                          
    mov dword [edx + 2 * 4], lambda350_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address

    ; calling function less_3, added to stack 0 + 20          
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newX original_param_name f1                                    
    ; param f1, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], 0                                                          
    ; Calling function less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:35:13
    call    less_3                                                                  
    add     esp,8                                                                   ; restore stack for less_3
    ; end calling function less_3                                                   
    mov dword [esp + 8], eax                                                        ; elseIfCond = less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:35:13
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,72                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,92                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter newX
    mov  dword [edx + 12], ecx                                                      ; context parameter newX
    mov  dword ecx, [ebp+12]                                                        ; context parameter xDir
    mov  dword [edx + 16], ecx                                                      ; context parameter xDir
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda352                                                      
    mov dword [edx + 4], lambda352_add_ref                                          
    mov dword [edx + 2 * 4], lambda352_deref                                        
    pop   edx                                                                       
    mov dword [esp + 16], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,112                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,132                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter newX
    mov  dword [edx + 12], ecx                                                      ; context parameter newX
    mov  dword ecx, [ebp+12]                                                        ; context parameter xDir
    mov  dword [edx + 16], ecx                                                      ; context parameter xDir
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda353                                                      
    mov dword [edx + 4], lambda353_add_ref                                          
    mov dword [edx + 2 * 4], lambda353_deref                                        
    pop   edx                                                                       
    mov dword [esp + 20], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function if_17 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:33:7
    call    if_17                                                                   
    add     esp,20                                                                  ; restore stack for if_17
    ; end calling function if_17                                                    



    add   esp, 132                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda215_add_ref(address:i32,descr:str)                             
lambda215_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/str.rasm:1:8                
; function padLeft_0(s:str,len:i32) -> str                                      
padLeft_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)

    ; calling function len_0, added to stack 0                                      
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val s                                                                  
    ; param s, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function len_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:2:16
    call    len_0                                                                   
    add     esp,4                                                                   ; restore stack for len_0
    ; end calling function len_0                                                    
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function if_10, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function not_0, added to stack 0 + 8          
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function less_1, added to stack 0 + 8 + 4
    ; adding let val l original_param_name a                                        
    ; param a, index_relative_to_bp -1                                              
    ; adding val len                                                                
    ; param b, index_relative_to_bp 3                                               

    mov     eax,[ebp+-4]
    cmp     eax,[ebp+12]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    ; end inlining function less_1                                                  
    mov dword [esp + 0], eax                                                        ; a = less_1 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:3:16

    mov     eax,[ebp+-4-(0 + 8)-44]
    xor     dword eax,1

    add     esp,4                                                                   ; restore stack for not_0
    ; end inlining function not_0                                                   
    mov dword [esp + 0], eax                                                        ; cond = not_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:3:11
    ; adding val s                                                                  
    ; param vtrue, index_relative_to_bp 2                                           
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,24                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,44                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter len
    mov  dword [edx + 12], ecx                                                      ; context parameter len
    mov  dword ecx, [ebp+8]                                                         ; context parameter s
    mov  dword [edx + 16], ecx                                                      ; context parameter s
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda890                                                      
    mov dword [edx + 4], lambda890_add_ref                                          
    mov dword [edx + 2 * 4], lambda890_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-8-(0)-44]
    cmp     eax, 0
    jz      $+11
    mov     eax, [ebp+8]
    jmp     $+18
    nop     ; nops are used because it's inlined and [ebp+8] could be an immediate value or an address so we don't know where to jump exactly...
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-44]
    mov     dword eax,[eax]
    push    eax
    call    [eax]
    add     dword esp, 4
    nop
    nop

    add     esp,8                                                                   ; restore stack for if_10
    ; end inlining function if_10                                                   



    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_16(value:Compare_5,Less:fn () -> bool,Equal:fn () -> bool,Greater:fn () -> bool) -> bool
match_16:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
    cmp dword [eax], 2                                                              
    jnz .variant2                                                                   
    mov ebx,[ebp+20]                                                                
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant2:                                                                      
; call macro, calling print_1
    push dword [_s_95]
    push dword 1
    call print_1
    add esp, 8
                          
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_20_addRef(address:EnumerateEntry_20)                  
EnumerateEntry_20_addRef:                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Brick_2_addRef                                                         
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/i32.rasm:22:8
; function div_0(n1:i32,n2:i32) -> i32                                          
div_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    edx

    xor     edx, edx
    mov     dword eax, [ebp+8]
    cdq
    mov     dword ebx, [ebp+12]
    idiv    dword ebx

    pop     edx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; function Option_7_deref(address:Option_7)                                     
Option_7_deref:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     KeyEvent_15_deref                                                      
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:50:4
; function update_4(resources:Resources_13,keys:Vec_5,world:World_6) -> World_6 
update_4:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 304                                                                  ; reserve stack local vals (let)

    ; calling function now_0, added to stack 0                                      
    ; Calling function now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:53:25
    call    now_0                                                                   
    ; end calling function now_0                                                    
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; inlining function lives_0, added to stack 0                                   
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 16]                                                      
    pop   ebx                                                                       

    ; end inlining function lives_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function ball_0, added to stack 0                                    
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function ball_0                                                  
    mov dword [ebp + -12], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 12]                                                       
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; inlining function bricks_0, added to stack 0                                  
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function bricks_0                                                
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function update_5, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function bar_0, added to stack 0 + 12          
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function bar_0                                                   
    mov dword [esp + 0], eax                                                        ; bar = bar_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:58:34

    ; add ref 
    push     dword eax                                                              
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 24], eax                                                   
    ; adding let val actualTime original_param_name actualTime                      
    ; param actualTime, index_relative_to_bp -1                                     
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val keys                                                               
    ; param keys, index_relative_to_bp 3                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function update_5 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:58:24
    call    update_5                                                                
    add     esp,12                                                                  ; restore stack for update_5
    ; end calling function update_5                                                 
    mov dword [ebp + -20], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 20]                                                       
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; calling function update_6, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val ball original_param_name ball                                  
    ; param ball, index_relative_to_bp -3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val actualTime original_param_name actualTime                      
    ; param actualTime, index_relative_to_bp -1                                     
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function update_6 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:59:25
    call    update_6                                                                
    add     esp,8                                                                   ; restore stack for update_6
    ; end calling function update_6                                                 
    mov dword [ebp + -28], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 28]                                                       
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; calling function collision_0, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val bricks original_param_name bricks                              
    ; param bricks, index_relative_to_bp -4                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-16]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val newBall original_param_name ball                               
    ; param ball, index_relative_to_bp -7                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-28]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function collision_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:60:30
    call    collision_0                                                             
    add     esp,8                                                                   ; restore stack for collision_0
    ; end calling function collision_0                                              
    mov dword [ebp + -32], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 32]                                                       
    call     Option_16_addRef                                                       
    add      esp,4                                                                  

    ; calling function match_19, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val collision original_param_name value                            
    ; param value, index_relative_to_bp -8                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-32]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,56                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter world
    mov  dword [edx + 12], ecx                                                      ; context parameter world
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda237                                                      
    mov dword [edx + 4], lambda237_add_ref                                          
    mov dword [edx + 2 * 4], lambda237_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,92                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,108                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter world
    mov  dword [edx + 12], ecx                                                      ; context parameter world
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda238                                                      
    mov dword [edx + 4], lambda238_add_ref                                          
    mov dword [edx + 2 * 4], lambda238_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_19 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:61:25
    call    match_19                                                                
    add     esp,12                                                                  ; restore stack for match_19
    ; end calling function match_19                                                 
    mov dword [ebp + -36], eax                                                      ; 

    ; calling function match_20, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val collision original_param_name value                            
    ; param value, index_relative_to_bp -8                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-32]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,132                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,148                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-16]                                                       ; context parameter bricks
    mov  dword [edx + 12], ecx                                                      ; context parameter bricks
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda240                                                      
    mov dword [edx + 4], lambda240_add_ref                                          
    mov dword [edx + 2 * 4], lambda240_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,168                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,184                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-16]                                                       ; context parameter bricks
    mov  dword [edx + 12], ecx                                                      ; context parameter bricks
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda241                                                      
    mov dword [edx + 4], lambda241_add_ref                                          
    mov dword [edx + 2 * 4], lambda241_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_20 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:26
    call    match_20                                                                
    add     esp,12                                                                  ; restore stack for match_20
    ; end calling function match_20                                                 
    mov dword [ebp + -112], eax                                                     ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 112]                                                      
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; inlining function if_11, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function collides_0, added to stack 0 + 12      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newBall original_param_name ball                               
    ; param ball, index_relative_to_bp -7                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-28]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function x_0, added to stack 0 + 12 + 8
    ; adding let val newBar original_param_name v                                   
    ; param v, index_relative_to_bp -5                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-20]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_0                                                     
    mov dword [esp + 4], eax                                                        ; barPos = x_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:64:34
    ; Calling function collides_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:64:16
    call    collides_0                                                              
    add     esp,8                                                                   ; restore stack for collides_0
    ; end calling function collides_0                                               
    mov dword [esp + 0], eax                                                        ; cond = collides_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:64:16
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,204                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,240                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 36                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter actualTime
    mov  dword [edx + 12], ecx                                                      ; context parameter actualTime
    mov  dword ecx, [ebp+-12]                                                       ; context parameter ball
    mov  dword [edx + 16], ecx                                                      ; context parameter ball
    mov  dword ecx, [ebp+-8]                                                        ; context parameter lives
    mov  dword [edx + 20], ecx                                                      ; context parameter lives
    mov  dword ecx, [ebp+-20]                                                       ; context parameter newBar
    mov  dword [edx + 24], ecx                                                      ; context parameter newBar
    mov  dword ecx, [ebp+-112]                                                      ; context parameter newBricks
    mov  dword [edx + 28], ecx                                                      ; context parameter newBricks
    mov  dword ecx, [ebp+-36]                                                       ; context parameter newScore
    mov  dword [edx + 32], ecx                                                      ; context parameter newScore
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda245                                                      
    mov dword [edx + 4], lambda245_add_ref                                          
    mov dword [edx + 2 * 4], lambda245_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,260                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,304                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 44                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter actualTime
    mov  dword [edx + 12], ecx                                                      ; context parameter actualTime
    mov  dword ecx, [ebp+-12]                                                       ; context parameter ball
    mov  dword [edx + 16], ecx                                                      ; context parameter ball
    mov  dword ecx, [ebp+-32]                                                       ; context parameter collision
    mov  dword [edx + 20], ecx                                                      ; context parameter collision
    mov  dword ecx, [ebp+-8]                                                        ; context parameter lives
    mov  dword [edx + 24], ecx                                                      ; context parameter lives
    mov  dword ecx, [ebp+-28]                                                       ; context parameter newBall
    mov  dword [edx + 28], ecx                                                      ; context parameter newBall
    mov  dword ecx, [ebp+-20]                                                       ; context parameter newBar
    mov  dword [edx + 32], ecx                                                      ; context parameter newBar
    mov  dword ecx, [ebp+-112]                                                      ; context parameter newBricks
    mov  dword [edx + 36], ecx                                                      ; context parameter newBricks
    mov  dword ecx, [ebp+-36]                                                       ; context parameter newScore
    mov  dword [edx + 40], ecx                                                      ; context parameter newScore
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda246                                                      
    mov dword [edx + 4], lambda246_add_ref                                          
    mov dword [edx + 2 * 4], lambda246_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-304]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-304]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-304]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_11
    ; end inlining function if_11                                                   



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 112]                                                      
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 32]                                                       
    call     Option_16_deref                                                        
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 28]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 24]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 20]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 12]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    add   esp, 304                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:4:7               
; function List_Full_0(head:List_11,tail:List_15) -> List_15                    
List_Full_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                  
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+12]                                                                ; parameter tail
    mov dword  [eax + 4], ebx                                                       
    mov   ebx, [ebp+8]                                                                ; parameter head
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:133:5
; function lambda25(event:Option_7,state:State_14) -> State_14                  
lambda25:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function update_0, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val event                                                              
    ; param event, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val state                                                              
    ; param state, index_relative_to_bp 4                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function update_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:133:29
    call    update_0                                                                
    add     esp,8                                                                   ; restore stack for update_0
    ; end calling function update_0                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:7:14            
; function lambda574(v:HighScore_3) -> List_11                                  
lambda574:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function listOf_0, added to stack 0                                   
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param v, index_relative_to_bp 3                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listOf_0 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:7:27
    call    listOf_0                                                                
    add     esp,4                                                                   ; restore stack for listOf_0
    ; end calling function listOf_0                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:84:12
; function Resources_0(font:SDLFont_4) -> Resources_13                          
Resources_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 4
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property font
    mov   ebx, [ebp+8]                                                                
    mov dword  [eax + 0], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:213:25
; function lambda698(it:HighScore_3)                                            
lambda698:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function run_0, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function or_0, added to stack 0 + 8            
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function or_0, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function or_0, added to stack 0 + 8 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function or_0, added to stack 0 + 8 + 8 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function print_2, added to stack 0 + 8 + 8 + 8 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name file                                  
    ; add_lambda_param_from_lambda_space, original_param_name file, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function score_0, added to stack 0 + 8 + 8 + 8 + 8 + 8 + 8
    ; adding val it                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function score_0                                                 
    mov dword [esp + 4], eax                                                        ; n = score_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:214:29
    ; Calling function print_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:214:14
    call    print_2                                                                 
    add     esp,8                                                                   ; restore stack for print_2
    ; end calling function print_2                                                  
    mov dword [esp + 0], eax                                                        ; o = print_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:214:14

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function print_1, added to stack 0 + 8 + 8 + 8 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name file                                  
    ; add_lambda_param_from_lambda_space, original_param_name file, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [_s_183]                                                         
    mov dword [esp + 8], eax                                                        
    pop eax                                                                         
    ; Calling function print_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:215:18
    call    print_1                                                                 
    add     esp,8                                                                   ; restore stack for print_1
    ; end calling function print_1                                                  
    mov dword [esp + 4], eax                                                        ; o1 = print_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:215:18

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:215:12
    call    or_0                                                                    
    add     esp,8                                                                   ; restore stack for or_0
    ; end calling function or_0                                                     
    mov dword [esp + 0], eax                                                        ; o = or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:215:12

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   

    ; calling function print_2, added to stack 0 + 8 + 8 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name file                                  
    ; add_lambda_param_from_lambda_space, original_param_name file, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function sec_0, added to stack 0 + 8 + 8 + 8 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function time_0, added to stack 0 + 8 + 8 + 8 + 8 + 8 + 4
    ; adding val it                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function time_0                                                  
    mov dword [esp + 0], eax                                                        ; v = time_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:216:32

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   
    push ebx                                                                        
    mov   dword ebx, [ebp+-4-(0 + 8 + 8 + 8 + 8 + 8)-52]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    add     esp,4                                                                   ; restore stack for sec_0
    ; end inlining function sec_0                                                   
    mov dword [esp + 4], eax                                                        ; n = sec_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:216:36
    ; Calling function print_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:216:18
    call    print_2                                                                 
    add     esp,8                                                                   ; restore stack for print_2
    ; end calling function print_2                                                  
    mov dword [esp + 4], eax                                                        ; o1 = print_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:216:18

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 20], eax                                                   
    ; Calling function or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:216:12
    call    or_0                                                                    
    add     esp,8                                                                   ; restore stack for or_0
    ; end calling function or_0                                                     
    mov dword [esp + 0], eax                                                        ; o = or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:216:12

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 24], eax                                                   

    ; calling function print_1, added to stack 0 + 8 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name file                                  
    ; add_lambda_param_from_lambda_space, original_param_name file, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [_s_183]                                                         
    mov dword [esp + 8], eax                                                        
    pop eax                                                                         
    ; Calling function print_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:217:18
    call    print_1                                                                 
    add     esp,8                                                                   ; restore stack for print_1
    ; end calling function print_1                                                  
    mov dword [esp + 4], eax                                                        ; o1 = print_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:217:18

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 28], eax                                                   
    ; Calling function or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:217:12
    call    or_0                                                                    
    add     esp,8                                                                   ; restore stack for or_0
    ; end calling function or_0                                                     
    mov dword [esp + 0], eax                                                        ; o = or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:217:12

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 32], eax                                                   

    ; calling function println_2, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name file                                  
    ; add_lambda_param_from_lambda_space, original_param_name file, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function nano_0, added to stack 0 + 8 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function time_0, added to stack 0 + 8 + 8 + 8 + 4
    ; adding val it                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function time_0                                                  
    mov dword [esp + 0], eax                                                        ; v = time_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:218:34

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 36], eax                                                   
    push ebx                                                                        
    mov   dword ebx, [ebp+-4-(0 + 8 + 8 + 8)-52]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    add     esp,4                                                                   ; restore stack for nano_0
    ; end inlining function nano_0                                                  
    mov dword [esp + 4], eax                                                        ; v = nano_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:218:39
    ; Calling function println_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:218:20
    call    println_2                                                               
    add     esp,8                                                                   ; restore stack for println_2
    ; end calling function println_2                                                
    mov dword [esp + 4], eax                                                        ; o1 = println_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:218:20

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 40], eax                                                   
    ; Calling function or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:218:12
    call    or_0                                                                    
    add     esp,8                                                                   ; restore stack for or_0
    ; end calling function or_0                                                     
    mov dword [esp + 0], eax                                                        ; o = or_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:218:12

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 44], eax                                                   
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_232                                               
    mov  dword ecx, static_memory_233                                               
    mov dword [ecx], lambda715                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function run_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:219:13
    call    run_0                                                                   
    add     esp,8                                                                   ; restore stack for run_0
    ; end calling function run_0                                                    

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 44]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 40]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  




    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 36]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 32]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 28]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 24]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 20]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  




    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 12]                                                       
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  




    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:391:9
; function len_2(vec:Vec_5) -> i32                                              
len_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

      mov     dword eax, [ebp+8]
      mov     dword eax, [eax]
      mov     dword eax, [eax]

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:92              
; function lambda850() -> bool                                                  
lambda850:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:15:26           
; function lambda1162() -> i32                                                  
lambda1162:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val default                                                            
    ; add_lambda_param_from_lambda_space, original_param_name default, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:618:9
; function copy_0(o:GameState_5) -> GameState_5                                 
copy_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx

    mov     dword ebx,[ebp+8]
    mov     dword ecx,[ebx + 8] ; size
    ; call macro, calling malloc_0
    push dword [_s_141]
    push dword ecx
    call malloc_0
    add esp, 8

    ; call macro, calling memcopy_0
    push dword ecx
    push dword [eax]
    push dword [ebx]
    call memcopy_0
    add esp, 12

    ; $addRef(eax:T)
    ; $call(deref,eax:i32, "deref for clone")

    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda139_deref(address:i32,descr:str)                               
lambda139_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda216_add_ref(address:i32,descr:str)                             
lambda216_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:64:8               
; function toString_1(error:IOError_16) -> str                                  
toString_1:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function add_5, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_279]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         

    ; inlining function message_0, added to stack 0 + 12      
    ; adding val error                                                              
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function message_0                                               
    mov dword [esp + 4], eax                                                        ; b = message_0 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:65:34

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    push eax                                                                        
    mov dword eax, [_s_281]                                                         
    mov dword [esp + 12], eax                                                       
    pop eax                                                                         
    ; Calling function add_5 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:65:8
    call    add_5                                                                   
    add     esp,12                                                                  ; restore stack for add_5
    ; end calling function add_5                                                    

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:183:17            
; function lambda551(head1:str,tail1:List_9) -> Option_10                       
lambda551:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_8, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val tail1                                                              
    ; param value, index_relative_to_bp 4                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,40                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent fun
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent fun
    mov  dword ebx, [ebp+12]                                                        ; context parameter head1
    mov  dword [ecx + 16], ebx                                                      ; context parameter head1
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda554                                                      
    mov dword [ecx + 4], lambda554_add_ref                                          
    mov dword [ecx + 2 * 4], lambda554_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_216                                               
    mov  dword ecx, static_memory_217                                               
    mov dword [ecx], lambda555                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_8 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:184:14
    call    match_8                                                                 
    add     esp,12                                                                  ; restore stack for match_8
    ; end calling function match_8                                                  

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:20:17
; function lambda1091() -> YDirection_2                                         
lambda1091:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function YDirection_Down_0, added to stack 0                         
    mov    eax, [_enum_YDirection_Down]

    ; end inlining function YDirection_Down_0                                       

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:95:9
; function negate_0(n:i32) -> i32                                               
negate_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    mov     dword eax,[ebp+8]
    xor     dword eax,0xFFFFFFFF
    inc     dword eax

    pop     ebp                                                                     
    ret                                                                             
; function Option_10_deref(address:Option_10)                                   
Option_10_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda518_add_ref(address:i32,descr:str)                             
lambda518_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda679_add_ref(address:i32,descr:str)                             
lambda679_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     EnumerateEntry_10_addRef                                               
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     List_6_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:158:18
; function lambda133(menuState:MenuState_4) -> State_14                         
lambda133:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function update_1, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newKeys original_param_name keys                               
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val menuState                                                          
    ; param menuState, index_relative_to_bp 3                                       
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function update_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:159:30
    call    update_1                                                                
    add     esp,12                                                                  ; restore stack for update_1
    ; end calling function update_1                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  

    ; calling function State_0, added to stack 0                                    
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newKeys original_param_name keys                               
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newStage original_param_name stage                             
    ; param stage, index_relative_to_bp -1                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val highScores original_param_name highScores                      
    ; add_lambda_param_from_lambda_space, original_param_name highScores, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function State_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:160:14
    call    State_0                                                                 
    add     esp,16                                                                  ; restore stack for State_0
    ; end calling function State_0                                                  

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Stage_0_deref                                                          
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Brick_2_addRef(address:Brick_2)                                      
Brick_2_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda177_add_ref(address:i32,descr:str)                             
lambda177_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     MenuState_4_addRef                                                     
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:25:7
; function elapsedTime_0(actual:TimeVal_1,previous:TimeVal_1) -> i32            
elapsedTime_0:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; inlining function sec_0, added to stack 0                                     
    ; adding val actual                                                             
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function sec_0                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function nano_0, added to stack 0                                    
    ; adding val actual                                                             
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function nano_0                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function sec_0, added to stack 0                                     
    ; adding val previous                                                           
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function sec_0                                                   
    mov dword [ebp + -12], eax                                                      ; 

    ; inlining function nano_0, added to stack 0                                    
    ; adding val previous                                                           
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function nano_0                                                  
    mov dword [ebp + -16], eax                                                      ; 

    ; inlining function add_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function mul_0, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function sub_0, added to stack 0 + 8 + 4
    ; adding let val secA original_param_name n1                                    
    ; param n1, index_relative_to_bp -1                                             
    ; adding let val secP original_param_name n2                                    
    ; param n2, index_relative_to_bp -3                                             

    mov     eax, [ebp+-4]
    sub     eax, [ebp+-12]

    ; end inlining function sub_0                                                   
    mov dword [esp + 0], eax                                                        ; n2 = sub_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:31:25

    push    edx
    mov     dword eax,1000000
    imul    dword eax,[ebp+-4-(0 + 8)-16]
    pop     edx

    add     esp,4                                                                   ; restore stack for mul_0
    ; end inlining function mul_0                                                   
    mov dword [esp + 0], eax                                                        ; n1 = mul_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:31:12

    ; inlining function sub_0, added to stack 0 + 8         
    ; adding let val nanoA original_param_name n1                                   
    ; param n1, index_relative_to_bp -2                                             
    ; adding let val nanoP original_param_name n2                                   
    ; param n2, index_relative_to_bp -4                                             

    mov     eax, [ebp+-8]
    sub     eax, [ebp+-16]

    ; end inlining function sub_0                                                   
    mov dword [esp + 4], eax                                                        ; n2 = sub_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:31:43

    mov     eax, [ebp+-8-(0)-16]
    add     eax, [ebp+-4-(0)-16]

    add     esp,8                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   




    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Option_12_deref(address:Option_12)                                   
Option_12_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     IOError_16_deref                                                       
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:34:8            
; function or_0(o:Option_12,o1:Option_12) -> Option_12                          
or_0:                                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 72                                                                   ; reserve stack local vals (let)

    ; calling function match_22, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val o                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter o
    mov  dword [edx + 12], ecx                                                      ; context parameter o
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda972                                                      
    mov dword [edx + 4], lambda972_add_ref                                          
    mov dword [edx + 2 * 4], lambda972_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,56                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter o1
    mov  dword [edx + 12], ecx                                                      ; context parameter o1
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda973                                                      
    mov dword [edx + 4], lambda973_add_ref                                          
    mov dword [edx + 2 * 4], lambda973_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_22 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:35:10
    call    match_22                                                                
    add     esp,12                                                                  ; restore stack for match_22
    ; end calling function match_22                                                 

    add   esp, 72                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:38
; function lambda240(b1:Brick_2) -> Vec_3                                       
lambda240:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function filter_2, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val bricks original_param_name vec                                 
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,36                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 16                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+12]                                                        ; context parameter b1
    mov  dword [ecx + 12], ebx                                                      ; context parameter b1
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda255                                                      
    mov dword [ecx + 4], lambda255_add_ref                                          
    mov dword [ecx + 2 * 4], lambda255_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function filter_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:52
    call    filter_2                                                                
    add     esp,8                                                                   ; restore stack for filter_2
    ; end calling function filter_2                                                 

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/math.rasm:16:8              
; function cmp_1(a:TimeVal_1,b:TimeVal_1) -> Compare_5                          
cmp_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; inlining function if_7, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function less_0, added to stack 0 + 12          
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val a                                                                  
    ; param t1, index_relative_to_bp 2                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val b                                                                  
    ; param t2, index_relative_to_bp 3                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function less_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:12
    call    less_0                                                                  
    add     esp,8                                                                   ; restore stack for less_0
    ; end calling function less_0                                                   
    mov dword [esp + 0], eax                                                        ; cond = less_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:12

    ; inlining function Compare_Less_0, added to stack 0 + 12 
    mov    eax, [_enum_Compare_Less]

    ; end inlining function Compare_Less_0                                          
    mov dword [esp + 4], eax                                                        ; trueVal = Compare_Less_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:27

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; inlining function if_7, added to stack 0 + 12           
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function eq_1, added to stack 0 + 12 + 12
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val a                                                                  
    ; param t1, index_relative_to_bp 2                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val b                                                                  
    ; param t2, index_relative_to_bp 3                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function eq_1 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:42
    call    eq_1                                                                    
    add     esp,8                                                                   ; restore stack for eq_1
    ; end calling function eq_1                                                     
    mov dword [esp + 0], eax                                                        ; cond = eq_1 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:42

    ; inlining function Compare_Equal_0, added to stack 0 + 12 + 12
    mov    eax, [_enum_Compare_Equal]

    ; end inlining function Compare_Equal_0                                         
    mov dword [esp + 4], eax                                                        ; trueVal = Compare_Equal_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    

    ; inlining function Compare_Greater_0, added to stack 0 + 12 + 12
    mov    eax, [_enum_Compare_Greater]

    ; end inlining function Compare_Greater_0                                       
    mov dword [esp + 8], eax                                                        ; falseVal = Compare_Greater_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:75

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   

    push  ebx
    push  edx

    mov   dword eax, [ebp+-12-(0 + 12)-16]
    imul  dword eax, [ebp+-8-(0 + 12)-16]
    mov   dword ebx, [ebp+-12-(0 + 12)-16]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+-4-(0 + 12)-16]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,12                                                                  ; restore stack for if_7
    ; end inlining function if_7                                                    
    mov dword [esp + 8], eax                                                        ; falseVal = if_7 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:39

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   

    push  ebx
    push  edx

    mov   dword eax, [ebp+-12-(0)-16]
    imul  dword eax, [ebp+-8-(0)-16]
    mov   dword ebx, [ebp+-12-(0)-16]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+-4-(0)-16]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,12                                                                  ; restore stack for if_7
    ; end inlining function if_7                                                    

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  




    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  




    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_11(value:Option_13,Some:fn (str) -> List_9,None:fn () -> List_9) -> List_9
match_11:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/list.rasm:1:9
; function lines_0(s:str) -> List_9                                             
lines_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub  esp, 4 ; I save local space to store temporary address of list to dereference : [ebp -4]
    sub  esp, 4 ; I save local space to store a count of strings to dereference : [ebp -8]
    push ebx
    push ecx
    push edx

    mov  dword [ebp -8],0

    mov ebx, 0 ; pos of start of line
    mov edx, 0 ; actual pos
    mov eax, [_enum_List_Empty]
    mov     dword [ebp -4], eax
.loop:
    mov dword ecx, [ebp+8]
    mov dword ecx, [ecx]
    add ecx, edx
    cmp     byte [ecx], 0
    jz  .endOfString
    cmp     byte [ecx], 10
    je  .endOfLine
    inc edx
    jmp .loop

.endOfLine:
    mov     ecx, edx
    sub     ecx, ebx
    push    eax
    ; call macro, calling substr_0
    push dword ecx
    push dword ebx
    push dword [ebp+8]
    call substr_0
    add esp, 12

    ; it's an option of string
    ; so we get the real address to the option
    mov     dword eax,[eax]
    ; then we skip the first word that is the value for the "Some" variant (TODO check)
    add     eax, 4
    ; then we get the pointer to the allocation table of the string, that is what we need
    mov     dword eax,[eax]
    mov     ebx, eax
    pop     eax

    mov     dword [ebp -4], eax
    
    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  

    
    ; add ref 
    push     dword ebx                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; call macro, calling push_1
    push dword ebx
    push dword eax
    call push_1
    add esp, 8

    inc dword [ebp -8]
    push    dword ebx
    
    ; deref 
    push     dword [ebp -4]                                                         
    call     List_9_deref                                                           
    add      esp,4                                                                  


    inc edx
    mov ebx, edx
    jmp .loop

.endOfString:
    cmp     ebx, edx
    je      .end
    mov     ecx, edx
    sub     ecx, ebx
    push    eax
    ; call macro, calling substr_0
    push dword ecx
    push dword ebx
    push dword [ebp+8]
    call substr_0
    add esp, 12

    ; it's an option of string
    ; so we get the real address to the option
    mov     dword eax,[eax]
    ; then we skip the first word that is the value for the "Some" variant (TODO check)
    add     eax, 4
    ; then we get the pointer to the allocation table of the string, that is what we need
    mov     dword eax,[eax]
    mov     ebx, eax
    pop     eax

    mov     dword [ebp -4], eax
    
    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  

    
    ; add ref 
    push     dword ebx                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; call macro, calling push_1
    push dword ebx
    push dword eax
    call push_1
    add esp, 8

    inc dword [ebp -8]
    push    dword ebx
    
    ; deref 
    push     dword [ebp -4]                                                         
    call     List_9_deref                                                           
    add      esp,4                                                                  


.end:
    mov dword ecx,[ebp -8]
.loopDereferencingStrings:
    test    ecx,ecx
    jz      .endDereferencingStrings
    pop     ebx
    
    ; deref 
    push     dword ebx                                                              
    call     str_deref_0                                                            
    add      esp,4                                                                  


    dec     ecx
    jmp     .loopDereferencingStrings
.endDereferencingStrings:
    pop edx
    pop ecx
    pop ebx
    add  esp, 8
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_10_deref(address:EnumerateEntry_10)                   
EnumerateEntry_10_deref:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/i32.rasm:36:9
; function toString_0(n:i32) -> str                                             
toString_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    esi
    push    ebx
    push    ecx
    push    edx

    ; call macro, calling malloc_0
    push dword [_s_131]
    push dword 20
    call malloc_0
    add esp, 8

    push eax

    ; call macro, calling addRef_0
    push dword [_s_1]
    push dword eax
    call addRef_0
    add esp, 8


    mov     dword esi,[eax]

    add     esi,19

    mov     eax,[ebp+8] ; integer value to convert
    mov     byte [esi],0    ; String terminator

    mov ebx,10
    xor ecx,ecx         ; initialize length
.next_digit:
    xor edx,edx         ; Clear edx prior to dividing edx:eax by ebx
    div ebx             ; eax /= 10
    add dl,'0'          ; Convert the remainder to ASCII
    dec esi             ; store characters in reverse order
    inc ecx             ; length

    mov [esi],dl
    test eax,eax
    jnz .next_digit     ; Repeat until eax==0

    inc    ecx          ; The length + 1, I think the 0 at the end...
    ; call macro, calling malloc_0
    push dword [_s_133]
    push dword ecx
    call malloc_0
    add esp, 8


    ; call macro, calling memcopy_0
    push dword ecx
    push dword [eax]
    push dword esi
    call memcopy_0
    add esp, 12


    pop     edx
    ; call macro, calling freeMem_0
    push dword edx
    call freeMem_0
    add esp, 4


    pop    edx
    pop    ecx
    pop    ebx
    pop    esi
    pop     ebp                                                                     
    ret                                                                             
; function lambda352_deref(address:i32,descr:str)                               
lambda352_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:1:12
; function xDir_1(receiver:Ball_7,v:XDirection_1) -> Ball_7                     
xDir_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push   ebx                                                                      
    push   ecx                                                                      
    ; call macro, calling copy_2
    push dword [ebp+8]
    call copy_2
    add esp, 4
                                                           
    mov   dword ebx, [ebp+12]                                                             
    push   eax                                                                      
    mov dword eax,[eax]                                                             
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ecx                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:28:8               
; function enumerate_0(vec:Vec_0) -> Vec_10                                     
enumerate_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function zip_0, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function vecRange_0, added to stack 0 + 12      
    sub esp, 8                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          

    ; calling function len_1, added to stack 0 + 12 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function len_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:24
    call    len_1                                                                   
    add     esp,4                                                                   ; restore stack for len_1
    ; end calling function len_1                                                    
    mov dword [esp + 4], eax                                                        ; end = len_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:24
    ; Calling function vecRange_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:17
    call    vecRange_0                                                              
    add     esp,8                                                                   ; restore stack for vecRange_0
    ; end calling function vecRange_0                                               
    mov dword [esp + 0], eax                                                        ; vec1 = vecRange_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:17

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding val vec                                                                
    ; param vec2, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_276                                               
    mov  dword edx, static_memory_277                                               
    mov dword [edx], lambda880                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function zip_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:8
    call    zip_0                                                                   
    add     esp,12                                                                  ; restore stack for zip_0
    ; end calling function zip_0                                                    

    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  




    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:4:7               
; function List_Full_1(head:str,tail:List_9) -> List_9                          
List_Full_1:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                  
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+12]                                                                ; parameter tail
    mov dword  [eax + 4], ebx                                                       
    mov   ebx, [ebp+8]                                                                ; parameter head
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:163:27
; function lambda151(newGameState:GameState_5) -> State_14                      
lambda151:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function State_0, added to stack 0                                    
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newKeys original_param_name keys                               
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function Stage_Game_0, added to stack 0 + 16    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val newGameState                                                       
    ; param gameState, index_relative_to_bp 3                                       
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function Stage_Game_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:164:44
    call    Stage_Game_0                                                            
    add     esp,4                                                                   ; restore stack for Stage_Game_0
    ; end calling function Stage_Game_0                                             
    mov dword [esp + 8], eax                                                        ; stage = Stage_Game_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:164:44

    ; add ref 
    push     dword eax                                                              
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding let val highScores original_param_name highScores                      
    ; add_lambda_param_from_lambda_space, original_param_name highScores, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function State_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:164:18
    call    State_0                                                                 
    add     esp,16                                                                  ; restore stack for State_0
    ; end calling function State_0                                                  

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Stage_0_deref                                                          
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda177_deref(address:i32,descr:str)                               
lambda177_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     MenuState_4_deref                                                      
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda117_deref(address:i32,descr:str)                               
lambda117_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:14:8            
; function getOrElse_0(o:Option_14,default:i32) -> i32                          
getOrElse_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)

    ; calling function match_30, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val o                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_300                                               
    mov  dword edx, static_memory_301                                               
    mov dword [edx], lambda1161                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter default
    mov  dword [edx + 12], ecx                                                      ; context parameter default
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1162                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_30 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:15:10
    call    match_30                                                                
    add     esp,12                                                                  ; restore stack for match_30
    ; end calling function match_30                                                 

    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:55:24
; function lambda1039(prev:i32,act:FileFlag_18) -> i32                          
lambda1039:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function fileFlag_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val act                                                                
    ; param flag, index_relative_to_bp 4                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function fileFlag_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:56:33
    call    fileFlag_0                                                              
    add     esp,4                                                                   ; restore stack for fileFlag_0
    ; end calling function fileFlag_0                                               
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function add_1, added to stack 0                                     
    ; adding val prev                                                               
    ; param n1, index_relative_to_bp 3                                              
    ; adding let val flagValue original_param_name n2                               
    ; param n2, index_relative_to_bp -1                                             

    mov     eax, [ebp+12]
    add     eax, [ebp+-4]

    ; end inlining function add_1                                                   

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/list.rasm:91:9
; function chars_0(s:str) -> List_9                                             
chars_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push ebx
    push ecx
    push edx

    mov dword ebx, [ebp+8]
    mov dword ebx, [ebx]
    mov ecx,0

    mov eax, [_enum_List_Empty]

.loop:
    cmp     byte [ebx], 0
    je  .end
    mov     edx,0
    mov     dl, byte [ebx]
    push    eax
    ; call macro, calling substr_0
    push dword 1
    push dword ecx
    push dword [ebp+8]
    call substr_0
    add esp, 12

    ; it's an option of string
    ; so we get the real address to the option
    mov     dword eax,[eax]
    ; then we skip the first word that is the value for the "Some" variant (TODO check)
    add     eax, 4
    ; then we get the pointer to the allocation table of the string, that is what we need
    mov     dword eax,[eax]
    mov     edx, eax
    pop     eax
    
    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  

    
    ; add ref 
    push     dword edx                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; call macro, calling push_1
    push dword edx
    push dword eax
    call push_1
    add esp, 8

    inc ebx
    inc ecx
    jmp .loop

.end:
    pop edx
    pop ecx
    pop ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_4(value:EnumerateEntry_10) -> Option_17                  
Option_Some_4:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function lambda560_deref(address:i32,descr:str)                               
lambda560_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 8]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:141:12            
; function EnumerateEntry_1(index:i32,value:str) -> EnumerateEntry_10           
EnumerateEntry_1:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property index
    mov   ebx, [ebp+8]                                                               
    mov dword  [eax + 0], ebx                                                       

    ; property value
    mov   ebx, [ebp+12]                                                               
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function lambda216_deref(address:i32,descr:str)                               
lambda216_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:182:8             
; function map3_0(list:List_9,fun:fn (str,str,str) -> HighScore_3) -> Option_10 
map3_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)

    ; calling function match_8, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val list                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter fun
    mov  dword [edx + 12], ecx                                                      ; context parameter fun
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda551                                                      
    mov dword [edx + 4], lambda551_add_ref                                          
    mov dword [edx + 2 * 4], lambda551_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_214                                               
    mov  dword edx, static_memory_215                                               
    mov dword [edx], lambda552                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_8 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:183:10
    call    match_8                                                                 
    add     esp,12                                                                  ; restore stack for match_8
    ; end calling function match_8                                                  

    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda551_deref(address:i32,descr:str)                               
lambda551_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Brick_2_deref(address:Brick_2)                                       
Brick_2_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:369:9
; function sdlRenderText_0(ren:SDLRenderer_1,message:SDLTexture_13,rect:SDLRect_19)
sdlRenderText_0:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    eax
    mov     dword eax, [ebp+16]
    ; ccall macro, calling SDL_RenderCopy
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 16
    and   esp,0xfffffff0
    mov dword ecx, [eax]
    mov dword [esp+12], ecx

    mov dword ecx, 0
    mov dword [esp+8], ecx

    mov dword ecx, [ebp+12]
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_RenderCopy
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx

    pop     eax


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda108_deref(address:i32,descr:str)                               
lambda108_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_0_deref(address:Vec_0,descr:str)                                 
Vec_0_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_0                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push     dword [ebx]                                                            
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda674_add_ref(address:i32,descr:str)                             
lambda674_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_23_deref(address:EnumerateEntry_23)                   
EnumerateEntry_23_deref:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_17_addRef(address:EnumerateEntry_17)                  
EnumerateEntry_17_addRef:                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:153:14
; function lambda139() -> Vec_5                                                 
lambda139:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function filter_0, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val keys original_param_name vec                                   
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,36                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 16                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent key
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent key
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda157                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function filter_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:154:19
    call    filter_0                                                                
    add     esp,8                                                                   ; restore stack for filter_0
    ; end calling function filter_0                                                 

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:65              
; function lambda848() -> bool                                                  
lambda848:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:92:4
; function render_3(ren:SDLRenderer_1,resources:Resources_13,world:World_6,fps:i32)
render_3:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 116                                                                  ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function font_0, added to stack 0                                    
    ; adding val resources                                                          
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function font_0                                                  
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function forEach_2, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function bricks_0, added to stack 0 + 8       
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function bricks_0                                                
    mov dword [esp + 0], eax                                                        ; vec = bricks_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:95:25

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,28                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,44                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter ren
    mov  dword [edx + 12], ecx                                                      ; context parameter ren
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda459                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function forEach_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:95:12
    call    forEach_2                                                               
    add     esp,8                                                                   ; restore stack for forEach_2
    ; end calling function forEach_2                                                

    ; calling function sdlSetRenderDrawColor_0, added to stack 0                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [const_15]                                                       ; static WHITE
    mov dword [esp + 8], eax                                                        ; static WHITE
    pop eax                                                                         
    ; Calling function sdlSetRenderDrawColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:100:26
    call    sdlSetRenderDrawColor_0                                                 
    add     esp,8                                                                   ; restore stack for sdlSetRenderDrawColor_0
    ; end calling function sdlSetRenderDrawColor_0                                  

    ; calling function sdlRenderFillRect_0, added to stack 0                        
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 8       
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; calling function toi32_0, added to stack 0 + 8 + 16
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_0, added to stack 0 + 8 + 16 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function bar_0, added to stack 0 + 8 + 16 + 8 + 4
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function bar_0                                                   
    mov dword [esp + 0], eax                                                        ; v = bar_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:51

    ; add ref 
    push     dword eax                                                              
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 48], eax                                                   
    push ebx                                                                        
    mov   dword ebx, [ebp+-4-(0 + 8 + 16 + 8)-120]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    add     esp,4                                                                   ; restore stack for x_0
    ; end inlining function x_0                                                     
    mov dword [esp + 0], eax                                                        ; f = x_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:53
    mov dword [esp + 4], 0                                                          
    ; Calling function toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:41
    call    toi32_0                                                                 
    add     esp,8                                                                   ; restore stack for toi32_0
    ; end calling function toi32_0                                                  
    mov dword [esp + 0], eax                                                        ; x = toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:41

    ; inlining function sub_0, added to stack 0 + 8 + 16

    mov     eax, [const_7]
    sub     eax, [const_11]

    ; end inlining function sub_0                                                   
    mov dword [esp + 4], eax                                                        ; y = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:62
    push eax                                                                        
    mov dword eax, [const_10]                                                       ; static BARWIDTH
    mov dword [esp + 12], eax                                                       ; static BARWIDTH
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [const_11]                                                       ; static BARHEIGHT
    mov dword [esp + 16], eax                                                       ; static BARHEIGHT
    pop eax                                                                         
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:35
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 4], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:35

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 52], eax                                                   
    ; Calling function sdlRenderFillRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:102:22
    call    sdlRenderFillRect_0                                                     
    add     esp,8                                                                   ; restore stack for sdlRenderFillRect_0
    ; end calling function sdlRenderFillRect_0                                      

    ; calling function sdlRenderFillRect_0, added to stack 0                        
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 8       
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; calling function toi32_0, added to stack 0 + 8 + 16
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8 + 16 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function ball_0, added to stack 0 + 8 + 16 + 8 + 4
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function ball_0                                                  
    mov dword [esp + 0], eax                                                        ; v = ball_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:52

    ; add ref 
    push     dword eax                                                              
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 56], eax                                                   
    push ebx                                                                        
    mov   dword ebx, [ebp+-4-(0 + 8 + 16 + 8)-120]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    add     esp,4                                                                   ; restore stack for x_1
    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; f = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:54
    mov dword [esp + 4], 0                                                          
    ; Calling function toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:41
    call    toi32_0                                                                 
    add     esp,8                                                                   ; restore stack for toi32_0
    ; end calling function toi32_0                                                  
    mov dword [esp + 0], eax                                                        ; x = toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:41

    ; calling function toi32_0, added to stack 0 + 8 + 16
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 8 + 16 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function ball_0, added to stack 0 + 8 + 16 + 8 + 4
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function ball_0                                                  
    mov dword [esp + 0], eax                                                        ; v = ball_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:76

    ; add ref 
    push     dword eax                                                              
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 60], eax                                                   
    push ebx                                                                        
    mov   dword ebx, [ebp+-4-(0 + 8 + 16 + 8)-120]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    add     esp,4                                                                   ; restore stack for y_0
    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; f = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:78
    mov dword [esp + 4], 0                                                          
    ; Calling function toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:65
    call    toi32_0                                                                 
    add     esp,8                                                                   ; restore stack for toi32_0
    ; end calling function toi32_0                                                  
    mov dword [esp + 4], eax                                                        ; y = toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:65
    push eax                                                                        
    mov dword eax, [const_13]                                                       ; static BALLSIZE
    mov dword [esp + 12], eax                                                       ; static BALLSIZE
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [const_13]                                                       ; static BALLSIZE
    mov dword [esp + 16], eax                                                       ; static BALLSIZE
    pop eax                                                                         
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:35
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 4], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:35

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 64], eax                                                   
    ; Calling function sdlRenderFillRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:104:22
    call    sdlRenderFillRect_0                                                     
    add     esp,8                                                                   ; restore stack for sdlRenderFillRect_0
    ; end calling function sdlRenderFillRect_0                                      

    ; calling function sdlSetRenderDrawColor_0, added to stack 0                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [const_18]                                                       ; static BLUE
    mov dword [esp + 8], eax                                                        ; static BLUE
    pop eax                                                                         
    ; Calling function sdlSetRenderDrawColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:106:26
    call    sdlSetRenderDrawColor_0                                                 
    add     esp,8                                                                   ; restore stack for sdlSetRenderDrawColor_0
    ; end calling function sdlSetRenderDrawColor_0                                  

    ; calling function sdlRenderFillRect_0, added to stack 0                        
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 8       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    mov dword [esp + 4], 0                                                          
    push eax                                                                        
    mov dword eax, [const_6]                                                        ; static WIDTH
    mov dword [esp + 12], eax                                                       ; static WIDTH
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [const_12]                                                       ; static HEADERHEIGHT
    mov dword [esp + 16], eax                                                       ; static HEADERHEIGHT
    pop eax                                                                         
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:107:35
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 4], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:107:35

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 68], eax                                                   
    ; Calling function sdlRenderFillRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:107:22
    call    sdlRenderFillRect_0                                                     
    add     esp,8                                                                   ; restore stack for sdlRenderFillRect_0
    ; end calling function sdlRenderFillRect_0                                      

    ; calling function createSDLText_0, added to stack 0                            
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val font original_param_name font                                  
    ; param font, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function add_0, added to stack 0 + 16           
    sub esp, 8                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_207]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         

    ; calling function toString_0, added to stack 0 + 16 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function score_1, added to stack 0 + 16 + 8 + 4
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function score_1                                                 
    mov dword [esp + 0], eax                                                        ; n = score_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:109:81
    ; Calling function toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:109:69
    call    toString_0                                                              
    add     esp,4                                                                   ; restore stack for toString_0
    ; end calling function toString_0                                               
    mov dword [esp + 4], eax                                                        ; s2 = toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:109:69

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 76], eax                                                   
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:109:49
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    
    mov dword [esp + 8], eax                                                        ; text = add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:109:49

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 80], eax                                                   
    push eax                                                                        
    mov dword eax, [const_17]                                                       ; static GREEN
    mov dword [esp + 16], eax                                                       ; static GREEN
    pop eax                                                                         
    ; Calling function createSDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:109:34
    call    createSDLText_0                                                         
    add     esp,16                                                                  ; restore stack for createSDLText_0
    ; end calling function createSDLText_0                                          
    mov dword [ebp + -72], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 72]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function renderAndRelease_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val scoreText original_param_name text                             
    ; param text, index_relative_to_bp -18                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-72]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 12       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 2                                                          
    mov dword [esp + 4], 2                                                          
    mov dword [esp + 8], 100                                                        
    mov dword [esp + 12], 24                                                        
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:110:45
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 8], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:110:45

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 84], eax                                                   
    ; Calling function renderAndRelease_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:110:21
    call    renderAndRelease_0                                                      
    add     esp,12                                                                  ; restore stack for renderAndRelease_0
    ; end calling function renderAndRelease_0                                       

    ; calling function createSDLText_0, added to stack 0                            
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val font original_param_name font                                  
    ; param font, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function add_0, added to stack 0 + 16           
    sub esp, 8                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_209]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         

    ; calling function toString_0, added to stack 0 + 16 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function lives_0, added to stack 0 + 16 + 8 + 4
    ; adding val world                                                              
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 16]                                                      
    pop   ebx                                                                       

    ; end inlining function lives_0                                                 
    mov dword [esp + 0], eax                                                        ; n = lives_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:112:81
    ; Calling function toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:112:69
    call    toString_0                                                              
    add     esp,4                                                                   ; restore stack for toString_0
    ; end calling function toString_0                                               
    mov dword [esp + 4], eax                                                        ; s2 = toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:112:69

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 92], eax                                                   
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:112:49
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    
    mov dword [esp + 8], eax                                                        ; text = add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:112:49

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 96], eax                                                   
    push eax                                                                        
    mov dword eax, [const_17]                                                       ; static GREEN
    mov dword [esp + 16], eax                                                       ; static GREEN
    pop eax                                                                         
    ; Calling function createSDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:112:34
    call    createSDLText_0                                                         
    add     esp,16                                                                  ; restore stack for createSDLText_0
    ; end calling function createSDLText_0                                          
    mov dword [ebp + -88], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 88]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function renderAndRelease_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val livesText original_param_name text                             
    ; param text, index_relative_to_bp -22                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-88]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 12       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 200                                                        
    mov dword [esp + 4], 2                                                          
    mov dword [esp + 8], 100                                                        
    mov dword [esp + 12], 24                                                        
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:113:45
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 8], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:113:45

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 100], eax                                                  
    ; Calling function renderAndRelease_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:113:21
    call    renderAndRelease_0                                                      
    add     esp,12                                                                  ; restore stack for renderAndRelease_0
    ; end calling function renderAndRelease_0                                       

    ; calling function createSDLText_0, added to stack 0                            
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val font original_param_name font                                  
    ; param font, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function add_0, added to stack 0 + 16           
    sub esp, 8                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_211]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         

    ; calling function toString_0, added to stack 0 + 16 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val fps                                                                
    ; param n, index_relative_to_bp 5                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+20]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:115:65
    call    toString_0                                                              
    add     esp,4                                                                   ; restore stack for toString_0
    ; end calling function toString_0                                               
    mov dword [esp + 4], eax                                                        ; s2 = toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:115:65

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 108], eax                                                  
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:115:47
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    
    mov dword [esp + 8], eax                                                        ; text = add_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:115:47

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 112], eax                                                  
    push eax                                                                        
    mov dword eax, [const_17]                                                       ; static GREEN
    mov dword [esp + 16], eax                                                       ; static GREEN
    pop eax                                                                         
    ; Calling function createSDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:115:32
    call    createSDLText_0                                                         
    add     esp,16                                                                  ; restore stack for createSDLText_0
    ; end calling function createSDLText_0                                          
    mov dword [ebp + -104], eax                                                     ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 104]                                                      
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function renderAndRelease_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val fpsText original_param_name text                               
    ; param text, index_relative_to_bp -26                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-104]                                                      
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 12       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 400                                                        
    mov dword [esp + 4], 2                                                          
    mov dword [esp + 8], 100                                                        
    mov dword [esp + 12], 24                                                        
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:116:43
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 8], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:116:43

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 116], eax                                                  
    ; Calling function renderAndRelease_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:116:21
    call    renderAndRelease_0                                                      
    add     esp,12                                                                  ; restore stack for renderAndRelease_0
    ; end calling function renderAndRelease_0                                       

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 116]                                                      
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 112]                                                      
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 108]                                                      
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 104]                                                      
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 100]                                                      
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 96]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 92]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  




    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 88]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 84]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 80]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 76]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  




    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 72]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 68]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 64]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  





    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 60]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  





    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 56]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 52]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  






    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 48]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  




    pop eax                                                                         ; restoring return register
    add   esp, 116                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:6:8
; function flip_1(xDir:XDirection_1) -> XDirection_1                            
flip_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_32, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val xDir                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_296                                               
    mov  dword edx, static_memory_297                                               
    mov dword [edx], lambda1096                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_298                                               
    mov  dword edx, static_memory_299                                               
    mov dword [edx], lambda1097                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_32 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:7:10
    call    match_32                                                                
    add     esp,12                                                                  ; restore stack for match_32
    ; end calling function match_32                                                 

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:68:8               
; function panic_0(message:str)                                                 
panic_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function print_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_173]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; Calling function print_0 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:69:10
    call    print_0                                                                 
    add     esp,4                                                                   ; restore stack for print_0
    ; end calling function print_0                                                  

    ; calling function println_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val message                                                            
    ; param v, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function println_0 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:70:12
    call    println_0                                                               
    add     esp,4                                                                   ; restore stack for println_0
    ; end calling function println_0                                                

    ; calling function exitMain_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 1                                                          
    ; Calling function exitMain_0 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:71:13
    call    exitMain_0                                                              
    add     esp,4                                                                   ; restore stack for exitMain_0
    ; end calling function exitMain_0                                               


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:64            
; function lambda680() -> List_6                                                
lambda680:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function filter_3, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; add_lambda_param_from_lambda_space, original_param_name l, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function filter_3 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:75
    call    filter_3                                                                
    add     esp,8                                                                   ; restore stack for filter_3
    ; end calling function filter_3                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda190_add_ref(address:i32,descr:str)                             
lambda190_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 8]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 12]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 16]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda255_deref(address:i32,descr:str)                               
lambda255_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Brick_2_deref                                                          
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:184:22            
; function lambda554(head2:str,tail2:List_9) -> Option_10                       
lambda554:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_8, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val tail2                                                              
    ; param value, index_relative_to_bp 4                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,44                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 24                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent fun
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent fun
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent head1
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent head1
    mov  dword ebx, [ebp+12]                                                        ; context parameter head2
    mov  dword [ecx + 20], ebx                                                      ; context parameter head2
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda560                                                      
    mov dword [ecx + 4], lambda560_add_ref                                          
    mov dword [ecx + 2 * 4], lambda560_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_218                                               
    mov  dword ecx, static_memory_219                                               
    mov dword [ecx], lambda561                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_8 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:185:18
    call    match_8                                                                 
    add     esp,12                                                                  ; restore stack for match_8
    ; end calling function match_8                                                  

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:129:9
; function mul_1(f1:f32,n2:i32) -> f32                                          
mul_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fimul    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:250:17
; function lambda527() -> List_9                                                
lambda527:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function List_Empty_1, added to stack 0                              
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_1                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_6(value:Brick_2) -> Option_16                            
Option_Some_6:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function lambda739_add_ref(address:i32,descr:str)                             
lambda739_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:15:8
; function render_1(ren:SDLRenderer_1,resources:Resources_13,menuState:MenuState_4)
render_1:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 92                                                                   ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function font_0, added to stack 0                                    
    ; adding val resources                                                          
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function font_0                                                  
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function createSDLText_0, added to stack 0                            
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val font original_param_name font                                  
    ; param font, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [_s_195]                                                         
    mov dword [esp + 12], eax                                                       
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [const_17]                                                       ; static GREEN
    mov dword [esp + 16], eax                                                       ; static GREEN
    pop eax                                                                         
    ; Calling function createSDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:18:30
    call    createSDLText_0                                                         
    add     esp,16                                                                  ; restore stack for createSDLText_0
    ; end calling function createSDLText_0                                          
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function renderAndRelease_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val title original_param_name text                                 
    ; param text, index_relative_to_bp -2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 12       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 380                                                        
    mov dword [esp + 4], 200                                                        
    mov dword [esp + 8], 200                                                        
    mov dword [esp + 12], 24                                                        
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:19:41
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 8], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:19:41

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function renderAndRelease_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:19:21
    call    renderAndRelease_0                                                      
    add     esp,12                                                                  ; restore stack for renderAndRelease_0
    ; end calling function renderAndRelease_0                                       

    ; calling function take_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function sort_0, added to stack 0 + 8          
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function highScores_1, added to stack 0 + 8 + 8
    ; adding val menuState                                                          
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function highScores_1                                            
    mov dword [esp + 0], eax                                                        ; vec = highScores_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:21:42

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 20], eax                                                   
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_196                                               
    mov  dword edx, static_memory_197                                               
    mov dword [edx], lambda405                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function sort_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:21:31
    call    sort_0                                                                  
    add     esp,8                                                                   ; restore stack for sort_0
    ; end calling function sort_0                                                   
    mov dword [esp + 0], eax                                                        ; vec = sort_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:21:31

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 24], eax                                                   
    mov dword [esp + 4], 10                                                         
    ; Calling function take_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:21:26
    call    take_0                                                                  
    add     esp,8                                                                   ; restore stack for take_0
    ; end calling function take_0                                                   
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function first_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function sort_0, added to stack 0 + 4          
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function highScores_1, added to stack 0 + 4 + 8
    ; adding val menuState                                                          
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function highScores_1                                            
    mov dword [esp + 0], eax                                                        ; vec = highScores_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:27:37

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 32], eax                                                   
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_198                                               
    mov  dword edx, static_memory_199                                               
    mov dword [edx], lambda409                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function sort_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:27:26
    call    sort_0                                                                  
    add     esp,8                                                                   ; restore stack for sort_0
    ; end calling function sort_0                                                   
    mov dword [esp + 0], eax                                                        ; vec = sort_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:27:26

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 36], eax                                                   
    ; Calling function first_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:27:21
    call    first_0                                                                 
    add     esp,4                                                                   ; restore stack for first_0
    ; end calling function first_0                                                  
    mov dword [ebp + -28], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 28]                                                       
    call     Option_10_addRef                                                       
    add      esp,4                                                                  

    ; calling function forEach_0, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function enumerate_0, added to stack 0 + 8     
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val highScores original_param_name vec                             
    ; param vec, index_relative_to_bp -4                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-16]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function enumerate_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:33:22
    call    enumerate_0                                                             
    add     esp,4                                                                   ; restore stack for enumerate_0
    ; end calling function enumerate_0                                              
    mov dword [esp + 0], eax                                                        ; vec = enumerate_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:33:22

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_10_addRef                                                          
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 40], eax                                                   
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,60                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,84                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter font
    mov  dword [edx + 12], ecx                                                      ; context parameter font
    mov  dword ecx, [ebp+-28]                                                       ; context parameter last
    mov  dword [edx + 16], ecx                                                      ; context parameter last
    mov  dword ecx, [ebp+8]                                                         ; context parameter ren
    mov  dword [edx + 20], ecx                                                      ; context parameter ren
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda412                                                      
    mov dword [edx + 4], lambda412_add_ref                                          
    mov dword [edx + 2 * 4], lambda412_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function forEach_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:33:12
    call    forEach_0                                                               
    add     esp,8                                                                   ; restore stack for forEach_0
    ; end calling function forEach_0                                                

    ; calling function createSDLText_0, added to stack 0                            
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val font original_param_name font                                  
    ; param font, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [_s_201]                                                         
    mov dword [esp + 12], eax                                                       
    pop eax                                                                         
    push eax                                                                        
    mov dword eax, [const_16]                                                       ; static RED
    mov dword [esp + 16], eax                                                       ; static RED
    pop eax                                                                         
    ; Calling function createSDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:49:31
    call    createSDLText_0                                                         
    add     esp,16                                                                  ; restore stack for createSDLText_0
    ; end calling function createSDLText_0                                          
    mov dword [ebp + -88], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 88]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function renderAndRelease_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val footer original_param_name text                                
    ; param text, index_relative_to_bp -22                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-88]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 12       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 380                                                        
    mov dword [esp + 4], 700                                                        
    mov dword [esp + 8], 200                                                        
    mov dword [esp + 12], 24                                                        
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:50:42
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 8], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:50:42

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 92], eax                                                   
    ; Calling function renderAndRelease_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:50:21
    call    renderAndRelease_0                                                      
    add     esp,12                                                                  ; restore stack for renderAndRelease_0
    ; end calling function renderAndRelease_0                                       

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 92]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 88]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 40]                                                       
    call     Vec_10_deref                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 36]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 32]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 28]                                                       
    call     Option_10_deref                                                        
    add      esp,4                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 24]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 20]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop eax                                                                         ; restoring return register
    add   esp, 92                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda240_add_ref(address:i32,descr:str)                             
lambda240_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function FPS_9_addRef(address:FPS_9)                                          
FPS_9_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:199:8
; function lambda83() -> Vec_0                                                  
lambda83:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Vec_1, added to stack 0                                      
    ; Calling function Vec_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:199:16
    call    Vec_1                                                                   
    ; end calling function Vec_1                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:37:12
; function SDLColor_0(r:i32,g:i32,b:i32,a:i32) -> SDLColor_0                    
SDLColor_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 16
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property r
    mov   ebx, [ebp+8]                                                                   
    mov dword  [eax + 0], ebx                                                       

    ; property g
    mov   ebx, [ebp+12]                                                                   
    mov dword  [eax + 4], ebx                                                       

    ; property b
    mov   ebx, [ebp+16]                                                                   
    mov dword  [eax + 8], ebx                                                       

    ; property a
    mov   ebx, [ebp+20]                                                                   
    mov dword  [eax + 12], ebx                                                      
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:222:9
; function count_0(vec:Vec_5,f:fn (i32) -> bool) -> i32                         
count_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    add     ebx, 4              ; the address of the first value
    mov     dword edx, 0        ; result
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    inc     edx
.false:
    add     ebx, 4
    dec     ecx
    jmp     .loop
.end:
    mov     dword eax, edx
    pop     edx
    pop     ecx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:54:8
; function fileFlags_0(flags:Vec_8) -> i32                                      
fileFlags_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function foldLeft_0, added to stack 0                                 
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val flags                                                              
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], 0                                                          
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_290                                               
    mov  dword edx, static_memory_291                                               
    mov dword [edx], lambda1039                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function foldLeft_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:55:13
    call    foldLeft_0                                                              
    add     esp,12                                                                  ; restore stack for foldLeft_0
    ; end calling function foldLeft_0                                               

    pop     ebp                                                                     
    ret                                                                             
; function match_10(value:Option_10,Some:fn (HighScore_3) -> List_11,None:fn () -> List_11) -> List_11
match_10:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:64:37
; function lambda245() -> World_6                                               
lambda245:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 20                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function update_6, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function Ball_0, added to stack 0 + 8          
    sub esp, 20                                                                     ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8 + 20
    ; adding let val ball original_param_name v                                     
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; x = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:42

    ; inlining function y_0, added to stack 0 + 8 + 20
    ; adding let val ball original_param_name v                                     
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 4], eax                                                        ; y = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:50

    ; inlining function xDir_0, added to stack 0 + 8 + 20
    ; adding let val ball original_param_name v                                     
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function xDir_0                                                  
    mov dword [esp + 8], eax                                                        ; xDir = xDir_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:61

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    

    ; calling function flip_0, added to stack 0 + 8 + 20
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function yDir_0, added to stack 0 + 8 + 20 + 4
    ; adding let val ball original_param_name v                                     
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function yDir_0                                                  
    mov dword [esp + 0], eax                                                        ; yDir = yDir_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:77

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function flip_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:67
    call    flip_0                                                                  
    add     esp,4                                                                   ; restore stack for flip_0
    ; end calling function flip_0                                                   
    mov dword [esp + 12], eax                                                       ; yDir = flip_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:67

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   
    ; adding let val actualTime original_param_name lastUpdate                      
    ; add_lambda_param_from_lambda_space, original_param_name lastUpdate, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 20], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function Ball_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:35
    call    Ball_0                                                                  
    add     esp,20                                                                  ; restore stack for Ball_0
    ; end calling function Ball_0                                                   
    mov dword [esp + 0], eax                                                        ; ball = Ball_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:35

    ; add ref 
    push     dword eax                                                              
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 20], eax                                                   
    ; adding let val actualTime original_param_name actualTime                      
    ; add_lambda_param_from_lambda_space, original_param_name actualTime, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function update_6 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:65:30
    call    update_6                                                                
    add     esp,8                                                                   ; restore stack for update_6
    ; end calling function update_6                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; calling function World_0, added to stack 0                                    
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding let val newBricks original_param_name bricks                           
    ; add_lambda_param_from_lambda_space, original_param_name bricks, lambda_space_index 5
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 28]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newBall2 original_param_name ball                              
    ; param ball, index_relative_to_bp -1                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newBar original_param_name bar                                 
    ; add_lambda_param_from_lambda_space, original_param_name bar, lambda_space_index 4
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 24]                                                      
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newScore original_param_name score                             
    ; add_lambda_param_from_lambda_space, original_param_name score, lambda_space_index 6
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 32]                                                      
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val lives original_param_name lives                                
    ; add_lambda_param_from_lambda_space, original_param_name lives, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 20], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function World_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:66:14
    call    World_0                                                                 
    add     esp,20                                                                  ; restore stack for World_0
    ; end calling function World_0                                                  

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 20]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  





    ; deref 
    push     dword [ebp - 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 20                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda353_add_ref(address:i32,descr:str)                             
lambda353_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:134:5
; function lambda26(sdlRen:SDLRenderer_1,state:State_14)                        
lambda26:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function render_0, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val sdlRen                                                             
    ; param ren, index_relative_to_bp 3                                             
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val state                                                              
    ; param state, index_relative_to_bp 4                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function render_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:134:30
    call    render_0                                                                
    add     esp,8                                                                   ; restore stack for render_0
    ; end calling function render_0                                                 

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:23:44           
; function lambda769() -> Option_14                                             
lambda769:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function Option_None_2, added to stack 0                             
    mov    eax, [_enum_Option_None]

    ; end inlining function Option_None_2                                           

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda818_add_ref(address:i32,descr:str)                             
lambda818_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:127:8             
; function filter_3(l:List_6,f:fn (EnumerateEntry_10) -> bool) -> List_6        
filter_3:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)

    ; calling function match_25, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter f
    mov  dword [edx + 12], ecx                                                      ; context parameter f
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda674                                                      
    mov dword [edx + 4], lambda674_add_ref                                          
    mov dword [edx + 2 * 4], lambda674_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_230                                               
    mov  dword edx, static_memory_231                                               
    mov dword [edx], lambda675                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_25 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:128:10
    call    match_25                                                                
    add     esp,12                                                                  ; restore stack for match_25
    ; end calling function match_25                                                 

    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda151_add_ref(address:i32,descr:str)                             
lambda151_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:72:9
; function lambda273() -> World_6                                               
lambda273:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 104                                                                  ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function if_11, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function greater_1, added to stack 0 + 12       
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 12 + 8
    ; adding let val ball original_param_name v                                     
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; f1 = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:73:30

    ; inlining function sub_0, added to stack 0 + 12 + 8

    mov     eax, [const_7]
    sub     eax, [const_13]

    ; end inlining function sub_0                                                   
    mov dword [esp + 4], eax                                                        ; n2 = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:73:35
    ; Calling function greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:73:23
    call    greater_1                                                               
    add     esp,8                                                                   ; restore stack for greater_1
    ; end calling function greater_1                                                
    mov dword [esp + 0], eax                                                        ; cond = greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:73:23
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,52                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 32                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent actualTime
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent actualTime
    mov  dword ebx, [eax + 20]                                                      ; context parameter from parent lives
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent lives
    mov  dword ebx, [eax + 28]                                                      ; context parameter from parent newBar
    mov  dword [ecx + 20], ebx                                                      ; context parameter from parent newBar
    mov  dword ebx, [eax + 32]                                                      ; context parameter from parent newBricks
    mov  dword [ecx + 24], ebx                                                      ; context parameter from parent newBricks
    mov  dword ebx, [eax + 36]                                                      ; context parameter from parent newScore
    mov  dword [ecx + 28], ebx                                                      ; context parameter from parent newScore
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda288                                                      
    mov dword [ecx + 4], lambda288_add_ref                                          
    mov dword [ecx + 2 * 4], lambda288_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,104                                                               
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 32                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 20]                                                      ; context parameter from parent lives
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent lives
    mov  dword ebx, [eax + 24]                                                      ; context parameter from parent newBall
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent newBall
    mov  dword ebx, [eax + 28]                                                      ; context parameter from parent newBar
    mov  dword [ecx + 20], ebx                                                      ; context parameter from parent newBar
    mov  dword ebx, [eax + 32]                                                      ; context parameter from parent newBricks
    mov  dword [ecx + 24], ebx                                                      ; context parameter from parent newBricks
    mov  dword ebx, [eax + 36]                                                      ; context parameter from parent newScore
    mov  dword [ecx + 28], ebx                                                      ; context parameter from parent newScore
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda289                                                      
    mov dword [ecx + 4], lambda289_add_ref                                          
    mov dword [ecx + 2 * 4], lambda289_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-108]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-108]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-108]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_11
    ; end inlining function if_11                                                   




    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 104                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:429:9
; function first_0(vec:Vec_0) -> Option_10                                      
first_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    mov     dword eax, [ebx]
    cmp     eax, 0
    jz      .empty
    mov     dword eax, [ebx + 4]
    
    ; add ref 
    push     dword eax                                                              
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  

    ; call macro, calling Option_Some_0
    push dword eax
    call Option_Some_0
    add esp, 4

    jmp     .end
.empty:
    mov     dword eax, [_enum_Option_None]
.end:
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda758_deref(address:i32,descr:str)                               
lambda758_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:51:8              
; function listOf_0(v:HighScore_3) -> List_11                                   
listOf_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function List_Full_2, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param head, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function List_Empty_0, added to stack 0 + 8   
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_0                                            
    mov dword [esp + 4], eax                                                        ; tail = List_Empty_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:52:23

    ; add ref 
    push     dword eax                                                              
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_2 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:52:9
    call    List_Full_2                                                             
    add     esp,8                                                                   ; restore stack for List_Full_2
    ; end calling function List_Full_2                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/str.rasm:30:8               
; function print_5(file:File_6,s:IOError_16) -> Option_12                       
print_5:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function print_1, added to stack 0                                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val file                                                               
    ; param file, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function toString_1, added to stack 0 + 8      
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val s                                                                  
    ; param error, index_relative_to_bp 3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function toString_1 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:31:25
    call    toString_1                                                              
    add     esp,4                                                                   ; restore stack for toString_1
    ; end calling function toString_1                                               
    mov dword [esp + 4], eax                                                        ; s = toString_1 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:31:25

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function print_1 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:31:10
    call    print_1                                                                 
    add     esp,8                                                                   ; restore stack for print_1
    ; end calling function print_1                                                  

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:73:56
; function lambda288() -> World_6                                               
lambda288:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function World_0, added to stack 0                                    
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding let val newBricks original_param_name bricks                           
    ; add_lambda_param_from_lambda_space, original_param_name bricks, lambda_space_index 4
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 24]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function initialBall_0, added to stack 0 + 20   
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val actualTime original_param_name now                             
    ; add_lambda_param_from_lambda_space, original_param_name now, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function initialBall_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:74:45
    call    initialBall_0                                                           
    add     esp,4                                                                   ; restore stack for initialBall_0
    ; end calling function initialBall_0                                            
    mov dword [esp + 4], eax                                                        ; ball = initialBall_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:74:45

    ; add ref 
    push     dword eax                                                              
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding let val newBar original_param_name bar                                 
    ; add_lambda_param_from_lambda_space, original_param_name bar, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newScore original_param_name score                             
    ; add_lambda_param_from_lambda_space, original_param_name score, lambda_space_index 5
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 28]                                                      
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move

    ; inlining function sub_0, added to stack 0 + 20          
    ; adding let val lives original_param_name n1                                   
    ; add_lambda_param_from_lambda_space, original_param_name n1, lambda_space_index 2

    mov     eax, [edx + 16]
    sub     eax, 1

    ; end inlining function sub_0                                                   
    mov dword [esp + 16], eax                                                       ; lives = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:74:80
    ; Calling function World_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:74:22
    call    World_0                                                                 
    add     esp,20                                                                  ; restore stack for World_0
    ; end calling function World_0                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:189:8             
; function lambda552() -> Option_10                                             
lambda552:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function Option_None_0, added to stack 0                             
    mov    eax, [_enum_Option_None]

    ; end inlining function Option_None_0                                           

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function Pair_12_deref(address:Pair_12)                                       
Pair_12_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:146:9
; function div_1(f1:f32,f2:f32) -> f32                                          
div_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fdiv    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; function match_9(value:List_11,Full:fn (HighScore_3,List_11) -> Vec_0,Empty:fn () -> Vec_0) -> Vec_0
match_9:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:201:5
; function sysClose_0(descriptor:File_6)                                        
sysClose_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx

    mov     eax, 6         ; close syscall
    mov     dword ebx, [ebp+8]
    int     80h

    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:122:9
; function sdlDestroyTexture_0(tex:SDLTexture_13)                               
sdlDestroyTexture_0:                                                            
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_DestroyTexture
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_DestroyTexture
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda288_add_ref(address:i32,descr:str)                             
lambda288_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda139_add_ref(address:i32,descr:str)                             
lambda139_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:7:8
; function eq_2(b1:Brick_2,b2:Brick_2) -> bool                                  
eq_2:                                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; inlining function and_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 8            
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_2, added to stack 0 + 8 + 8
    ; adding val b1                                                                 
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_2                                                     
    mov dword [esp + 0], eax                                                        ; a = x_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:8:9

    ; inlining function x_2, added to stack 0 + 8 + 8
    ; adding val b2                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_2                                                     
    mov dword [esp + 4], eax                                                        ; b = x_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:8:17

    mov     eax,[ebp+-8-(0 + 8)-0]
    cmp     eax,[ebp+-4-(0 + 8)-0]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    add     esp,8                                                                   ; restore stack for eq_0
    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; a = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:8:12

    ; inlining function eq_0, added to stack 0 + 8            
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_1, added to stack 0 + 8 + 8
    ; adding val b1                                                                 
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_1                                                     
    mov dword [esp + 0], eax                                                        ; a = y_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:8:27

    ; inlining function y_1, added to stack 0 + 8 + 8
    ; adding val b2                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_1                                                     
    mov dword [esp + 4], eax                                                        ; b = y_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:8:35

    mov     eax,[ebp+-8-(0 + 8)-0]
    cmp     eax,[ebp+-4-(0 + 8)-0]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    add     esp,8                                                                   ; restore stack for eq_0
    ; end inlining function eq_0                                                    
    mov dword [esp + 4], eax                                                        ; b = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:8:30

    mov     eax,[ebp+-8-(0)-0]
    and     dword eax,[ebp+-4-(0)-0]

    add     esp,8                                                                   ; restore stack for and_0
    ; end inlining function and_0                                                   







    pop     ebp                                                                     
    ret                                                                             
; function Option_12_addRef(address:Option_12)                                  
Option_12_addRef:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     IOError_16_addRef                                                      
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Bar_8_deref(address:Bar_8)                                           
Bar_8_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_3(value:GameResult_4,Play:fn (GameState_5) -> State_14,End:fn (i32) -> State_14) -> State_14
match_3:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param state                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                    
    mov dword ebx,[ebx]                                                             
    ; param score                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_89]
    push dword 1
    call print_1
    add esp, 8
                       
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:261:14
; function lambda920(entry:EnumerateEntry_10) -> i32                            
lambda920:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function index_1, added to stack 0                                   
    ; adding val entry                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function index_1                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:17            
; function lambda940(head:HighScore_3,tail:List_11) -> List_11                  
lambda940:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_2, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param head, index_relative_to_bp 3                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function listAppend_1, added to stack 0 + 8    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param dest, index_relative_to_bp 4                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val source                                                             
    ; add_lambda_param_from_lambda_space, original_param_name source, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listAppend_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:59
    call    listAppend_1                                                            
    add     esp,8                                                                   ; restore stack for listAppend_1
    ; end calling function listAppend_1                                             
    mov dword [esp + 4], eax                                                        ; tail = listAppend_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:59

    ; add ref 
    push     dword eax                                                              
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_2 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:36
    call    List_Full_2                                                             
    add     esp,8                                                                   ; restore stack for List_Full_2
    ; end calling function List_Full_2                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_17_deref(address:EnumerateEntry_17)                   
EnumerateEntry_17_deref:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:10:8               
; function println_4(v:IOError_16)                                              
println_4:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function print_4, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param v, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function print_4 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:11:10
    call    print_4                                                                 
    add     esp,4                                                                   ; restore stack for print_4
    ; end calling function print_4                                                  

    ; calling function println_1, added to stack 0                                  
    ; Calling function println_1 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:12:12
    call    println_1                                                               
    ; end calling function println_1                                                


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda238_deref(address:i32,descr:str)                               
lambda238_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda197_deref(address:i32,descr:str)                               
lambda197_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_25(value:List_6,Full:fn (EnumerateEntry_10,List_6) -> List_6,Empty:fn () -> List_6) -> List_6
match_25:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function lambda66_add_ref(address:i32,descr:str)                              
lambda66_add_ref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 4]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 8]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:125:9
; function fileSize_0(descriptor:File_6) -> i32                                 
fileSize_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx

    ; call macro, calling malloc_0
    push dword [_s_139]
    push dword 1024
    call malloc_0
    add esp, 8

    ; we can immediately free the memory, because it is not "erased" and is not reused (malloc) in this function
    ; call macro, calling freeMem_0
    push dword eax
    call freeMem_0
    add esp, 4


    mov     dword ecx,[eax]

    mov     eax, 108          ; fstat syscall
    mov     ebx, [ebp+8]
    int     80h
    mov     dword eax, [ecx + 20]  ; +20 -> size

    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda674_deref(address:i32,descr:str)                               
lambda674_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_20_deref(address:EnumerateEntry_20)                   
EnumerateEntry_20_deref:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [ebx + 4]                                                        
    call     Brick_2_deref                                                          
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:81:9
; function fileExists_0(path:str) -> bool                                       
fileExists_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling sysOpen_0
    push dword 0
    push dword 0
    push dword [ebp+8]
    call sysOpen_0
    add esp, 12

    cmp     dword eax, 0
    jb      .error
    mov     dword eax, 0
.error:
    mov     dword eax, 1
.end:
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:8:29
; function lambda177() -> Stage_0                                               
lambda177:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Stage_Menu_0, added to stack 0                               
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val menuState                                                          
    ; add_lambda_param_from_lambda_space, original_param_name menuState, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function Stage_Menu_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:9:14
    call    Stage_Menu_0                                                            
    add     esp,4                                                                   ; restore stack for Stage_Menu_0
    ; end calling function Stage_Menu_0                                             

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda272_deref(address:i32,descr:str)                               
lambda272_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda827_deref(address:i32,descr:str)                               
lambda827_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:3:8                
; function cartesianProduct_0(vec1:Vec_5,vec2:Vec_5,zipFunction:fn (i32,i32) -> Brick_2) -> Vec_3
cartesianProduct_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)

    ; calling function fmap_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val vec1                                                               
    ; param l, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter vec2
    mov  dword [edx + 12], ecx                                                      ; context parameter vec2
    mov  dword ecx, [ebp+16]                                                        ; context parameter zipFunction
    mov  dword [edx + 16], ecx                                                      ; context parameter zipFunction
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1178                                                     
    mov dword [edx + 4], lambda1178_add_ref                                         
    mov dword [edx + 2 * 4], lambda1178_deref                                       
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function fmap_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:4:9
    call    fmap_1                                                                  
    add     esp,8                                                                   ; restore stack for fmap_1
    ; end calling function fmap_1                                                   

    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/utils.rasm:1:8
; function toi32_0(f:f32,default:i32) -> i32                                    
toi32_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function getOrElse_0, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function toi32_1, added to stack 0 + 8        
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val f                                                                  
    ; param n, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function toi32_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/utils.rasm:2:20
    call    toi32_1                                                                 
    add     esp,4                                                                   ; restore stack for toi32_1
    ; end calling function toi32_1                                                  
    mov dword [esp + 0], eax                                                        ; o = toi32_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/utils.rasm:2:20

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding val default                                                            
    ; param default, index_relative_to_bp 3                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function getOrElse_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/utils.rasm:2:14
    call    getOrElse_0                                                             
    add     esp,8                                                                   ; restore stack for getOrElse_0
    ; end calling function getOrElse_0                                              

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:82:4
; function collision_0(bricks:Vec_3,ball:Ball_7) -> Option_16                   
collision_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)

    ; calling function first_2, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function filter_2, added to stack 0 + 4       
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val bricks                                                             
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter ball
    mov  dword [edx + 12], ecx                                                      ; context parameter ball
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1055                                                     
    mov dword [edx + 4], lambda1055_add_ref                                         
    mov dword [edx + 2 * 4], lambda1055_deref                                       
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function filter_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:83:17
    call    filter_2                                                                
    add     esp,8                                                                   ; restore stack for filter_2
    ; end calling function filter_2                                                 
    mov dword [esp + 0], eax                                                        ; vec = filter_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:83:17

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 40], eax                                                   
    ; Calling function first_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:83:10
    call    first_2                                                                 
    add     esp,4                                                                   ; restore stack for first_2
    ; end calling function first_2                                                  

    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 40]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda1121_add_ref(address:i32,descr:str)                            
lambda1121_add_ref:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_10_deref(address:Vec_10,descr:str)                               
Vec_10_deref:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_10                                                                   
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push     dword [ebx]                                                            
    call     EnumerateEntry_17_deref                                                
    add      esp,4                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda739_deref(address:i32,descr:str)                               
lambda739_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda372_deref(address:i32,descr:str)                               
lambda372_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:24:17
; function lambda1209() -> f32                                                  
lambda1209:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function sub_3, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val y                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f1, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val diff                                                               
    ; add_lambda_param_from_lambda_space, original_param_name f2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sub_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:24:25
    call    sub_3                                                                   
    add     esp,8                                                                   ; restore stack for sub_3
    ; end calling function sub_3                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda240_deref(address:i32,descr:str)                               
lambda240_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:28:20
; function lambda1166(prev:i32,act:FilePermission_19) -> i32                    
lambda1166:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function filePermission_0, added to stack 0                           
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val act                                                                
    ; param p, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function filePermission_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:29:34
    call    filePermission_0                                                        
    add     esp,4                                                                   ; restore stack for filePermission_0
    ; end calling function filePermission_0                                         
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function add_1, added to stack 0                                     
    ; adding val prev                                                               
    ; param n1, index_relative_to_bp 3                                              
    ; adding let val perm original_param_name n2                                    
    ; param n2, index_relative_to_bp -1                                             

    mov     eax, [ebp+12]
    add     eax, [ebp+-4]

    ; end inlining function add_1                                                   

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:144:9
; function sdlSetRenderDrawColor_1(ren:SDLRenderer_1,r:i32,g:i32,b:i32,a:i32)   
sdlSetRenderDrawColor_1:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_SetRenderDrawColor
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 20
    and   esp,0xfffffff0
    mov dword ecx, [ebp+24]
    mov dword [esp+16], ecx

    mov dword ecx, [ebp+20]
    mov dword [esp+12], ecx

    mov dword ecx, [ebp+16]
    mov dword [esp+8], ecx

    mov dword ecx, [ebp+12]
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_SetRenderDrawColor
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/math.rasm:16:8              
; function cmp_0(a:i32,b:i32) -> Compare_5                                      
cmp_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; inlining function if_7, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function less_1, added to stack 0 + 12         
    ; adding val a                                                                  
    ; param a, index_relative_to_bp 2                                               
    ; adding val b                                                                  
    ; param b, index_relative_to_bp 3                                               

    mov     eax,[ebp+8]
    cmp     eax,[ebp+12]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    ; end inlining function less_1                                                  
    mov dword [esp + 0], eax                                                        ; cond = less_1 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:12

    ; inlining function Compare_Less_0, added to stack 0 + 12 
    mov    eax, [_enum_Compare_Less]

    ; end inlining function Compare_Less_0                                          
    mov dword [esp + 4], eax                                                        ; trueVal = Compare_Less_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:27

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; inlining function if_7, added to stack 0 + 12           
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 12 + 12
    ; adding val a                                                                  
    ; param a, index_relative_to_bp 2                                               
    ; adding val b                                                                  
    ; param b, index_relative_to_bp 3                                               

    mov     eax,[ebp+8]
    cmp     eax,[ebp+12]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:42

    ; inlining function Compare_Equal_0, added to stack 0 + 12 + 12
    mov    eax, [_enum_Compare_Equal]

    ; end inlining function Compare_Equal_0                                         
    mov dword [esp + 4], eax                                                        ; trueVal = Compare_Equal_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    

    ; inlining function Compare_Greater_0, added to stack 0 + 12 + 12
    mov    eax, [_enum_Compare_Greater]

    ; end inlining function Compare_Greater_0                                       
    mov dword [esp + 8], eax                                                        ; falseVal = Compare_Greater_0 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:75

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   

    push  ebx
    push  edx

    mov   dword eax, [ebp+-12-(0 + 12)-16]
    imul  dword eax, [ebp+-8-(0 + 12)-16]
    mov   dword ebx, [ebp+-12-(0 + 12)-16]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+-4-(0 + 12)-16]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,12                                                                  ; restore stack for if_7
    ; end inlining function if_7                                                    
    mov dword [esp + 8], eax                                                        ; falseVal = if_7 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:17:39

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   

    push  ebx
    push  edx

    mov   dword eax, [ebp+-12-(0)-16]
    imul  dword eax, [ebp+-8-(0)-16]
    mov   dword ebx, [ebp+-12-(0)-16]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+-4-(0)-16]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,12                                                                  ; restore stack for if_7
    ; end inlining function if_7                                                    

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  




    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  




    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:27
; function lambda1120() -> Ball_7                                               
lambda1120:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function xDir_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ball                                                               
    ; add_lambda_param_from_lambda_space, original_param_name receiver, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function flip_1, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function xDir_0, added to stack 0 + 8 + 4
    ; adding val ball                                                               
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function xDir_0                                                  
    mov dword [esp + 0], eax                                                        ; xDir = xDir_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:51

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function flip_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:56
    call    flip_1                                                                  
    add     esp,4                                                                   ; restore stack for flip_1
    ; end calling function flip_1                                                   
    mov dword [esp + 4], eax                                                        ; v = flip_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:56

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function xDir_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:41
    call    xDir_1                                                                  
    add     esp,8                                                                   ; restore stack for xDir_1
    ; end calling function xDir_1                                                   

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:257:8
; function println_3(file:File_6) -> Option_12                                  
println_3:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling sysPrint_0
    push dword 1
    push dword _NEW_LINE
    push dword [ebp+8]
    call sysPrint_0
    add esp, 12

    pop     ebp                                                                     
    ret                                                                             
; function lambda825_deref(address:i32,descr:str)                               
lambda825_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:12:8
; function print_4(v:IOError_16)                                                
print_4:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function toUnit_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function print_5, added to stack 0 + 4         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function STDOut_0, added to stack 0 + 4 + 8

    mov dword eax, 1

    ; end inlining function STDOut_0                                                
    mov dword [esp + 0], eax                                                        ; file = STDOut_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:17
    ; adding val v                                                                  
    ; param s, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function print_5 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:10
    call    print_5                                                                 
    add     esp,8                                                                   ; restore stack for print_5
    ; end calling function print_5                                                  
    mov dword [esp + 0], eax                                                        ; o = print_5 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:10

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    


    add     esp,4                                                                   ; restore stack for toUnit_0
    ; end inlining function toUnit_0                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  





    pop eax                                                                         ; restoring return register
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Vec_8_addRef(address:Vec_8,descr:str)                                
Vec_8_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_8                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx]                                                            
    call     addRef_0                                                               
    add      esp,8                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Option_10_addRef(address:Option_10)                                  
Option_10_addRef:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:191:34
; function lambda82() -> Vec_0                                                  
lambda82:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 12                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function readFile_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_175]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; Calling function readFile_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:192:30
    call    readFile_0                                                              
    add     esp,4                                                                   ; restore stack for readFile_0
    ; end calling function readFile_0                                               
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; calling function lines_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val scores original_param_name s                                   
    ; param s, index_relative_to_bp -1                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function lines_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:193:26
    call    lines_0                                                                 
    add     esp,4                                                                   ; restore stack for lines_0
    ; end calling function lines_0                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     List_9_addRef                                                          
    add      esp,4                                                                  

    ; calling function listToVec_0, added to stack 0                                
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function fmap_0, added to stack 0 + 4           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val lines original_param_name l                                    
    ; param l, index_relative_to_bp -2                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-8]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_180                                               
    mov  dword ecx, static_memory_181                                               
    mov dword [ecx], lambda88                                                       
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function fmap_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:194:23
    call    fmap_0                                                                  
    add     esp,8                                                                   ; restore stack for fmap_0
    ; end calling function fmap_0                                                   
    mov dword [esp + 0], eax                                                        ; l = fmap_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:194:23

    ; add ref 
    push     dword eax                                                              
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function listToVec_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:194:18
    call    listToVec_0                                                             
    add     esp,4                                                                   ; restore stack for listToVec_0
    ; end calling function listToVec_0                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 12]                                                       
    call     List_11_deref                                                          
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 8]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 12                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:79              
; function lambda858() -> bool                                                  
lambda858:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:17:8
; function lambda311() -> i32                                                   
lambda311:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function add_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function velocity_0, added to stack 0 + 8     
    ; adding val bar                                                                
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function velocity_0                                              
    mov dword [esp + 0], eax                                                        ; n1 = velocity_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:18:25

    ; inlining function mul_0, added to stack 0 + 8          
    ; adding let val leftOrRight original_param_name n1                             
    ; add_lambda_param_from_lambda_space, original_param_name n1, lambda_space_index 2

    push    edx
    mov     dword eax,[edx + 16]
    imul    dword eax,30
    pop     edx

    ; end inlining function mul_0                                                   
    mov dword [esp + 4], eax                                                        ; n2 = mul_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:18:30

    mov     eax, [ebp+-8-(0)-4]
    add     eax, [ebp+-4-(0)-4]

    add     esp,8                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   



    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function match_6(value:GameStage_0,RunBall:fn () -> (),Run:fn () -> ())       
match_6:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                    
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_91]
    push dword 1
    call print_1
    add esp, 8
                        
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_27(value:YDirection_2,Up:fn () -> YDirection_2,Down:fn () -> YDirection_2) -> YDirection_2
match_27:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                     
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_97]
    push dword 1
    call print_1
    add esp, 8
                       
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function match_17(value:Option_10,Some:fn (HighScore_3) -> Vec_0,None:fn () -> Vec_0) -> Vec_0
match_17:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:74:9
; function sdlInit_0()                                                          
sdlInit_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; SDL_Init(SDL_INIT_EVERYTHING)
    ; ccall macro, calling SDL_Init
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, 62001
    mov dword [esp+0], ecx

    call SDL_Init
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/conditionals.rasm:2:21      
; function lambda66() -> Pair_11                                                
lambda66:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function if_19, added to stack 0                                     
    ; adding val elseIfCond                                                         
    ; add_lambda_param_from_lambda_space, original_param_name cond, lambda_space_index 1
    ; adding val fElseIf                                                            
    ; add_lambda_param_from_lambda_space, original_param_name ftrue, lambda_space_index 2
    ; adding val ffalse                                                             
    ; add_lambda_param_from_lambda_space, original_param_name ffalse, lambda_space_index 3

    mov     eax,[edx + 12]
    cmp     eax, 0
    jz      $+19
    mov     eax, [edx + 16]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [edx + 20]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    ; end inlining function if_19                                                   

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda350_deref(address:i32,descr:str)                               
lambda350_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Option_17_deref(address:Option_17)                                   
Option_17_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     EnumerateEntry_10_deref                                                
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:12:8
; function print_0(v:str)                                                       
print_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function toUnit_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function print_1, added to stack 0 + 4         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function STDOut_0, added to stack 0 + 4 + 8

    mov dword eax, 1

    ; end inlining function STDOut_0                                                
    mov dword [esp + 0], eax                                                        ; file = STDOut_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:17
    ; adding val v                                                                  
    ; param s, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function print_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:10
    call    print_1                                                                 
    add     esp,8                                                                   ; restore stack for print_1
    ; end calling function print_1                                                  
    mov dword [esp + 0], eax                                                        ; o = print_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:10

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    


    add     esp,4                                                                   ; restore stack for toUnit_0
    ; end inlining function toUnit_0                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  





    pop eax                                                                         ; restoring return register
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda815_deref(address:i32,descr:str)                               
lambda815_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda560_add_ref(address:i32,descr:str)                             
lambda560_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda551_add_ref(address:i32,descr:str)                             
lambda551_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda534_add_ref(address:i32,descr:str)                             
lambda534_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:12:8
; function print_3(v:i32)                                                       
print_3:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function toUnit_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function print_2, added to stack 0 + 4         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function STDOut_0, added to stack 0 + 4 + 8

    mov dword eax, 1

    ; end inlining function STDOut_0                                                
    mov dword [esp + 0], eax                                                        ; file = STDOut_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:17
    ; adding val v                                                                  
    ; param n, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function print_2 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:10
    call    print_2                                                                 
    add     esp,8                                                                   ; restore stack for print_2
    ; end calling function print_2                                                  
    mov dword [esp + 0], eax                                                        ; o = print_2 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:13:10

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    


    add     esp,4                                                                   ; restore stack for toUnit_0
    ; end inlining function toUnit_0                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  





    pop eax                                                                         ; restoring return register
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:354:4
; function vecFlattenCreate_0(vec:i32) -> i32                                   
vecFlattenCreate_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    mov     edx, 0              ; the size of the new array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]
    mov     dword ecx, [ecx]
    add     dword edx, [ecx]
    pop     ecx
    add     ecx, 4
    dec     ebx
    jmp     .loop
.end:
    push    edx
    inc     edx
    shl     edx,2
    ; call macro, calling malloc_0
    push dword [_s_137]
    push dword edx
    call malloc_0
    add esp, 8

    pop     edx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], edx
    pop     eax
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/str.rasm:3:30               
; function lambda890() -> str                                                   
lambda890:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function padLeft_0, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_0, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_107]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; adding val s                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name s2, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function add_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:3:46
    call    add_0                                                                   
    add     esp,8                                                                   ; restore stack for add_0
    ; end calling function add_0                                                    
    mov dword [esp + 0], eax                                                        ; s = add_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:3:46

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding val len                                                                
    ; add_lambda_param_from_lambda_space, original_param_name len, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function padLeft_0 : file:////home/enrico/development/rust/rasm/stdlib/str.rasm:3:42
    call    padLeft_0                                                               
    add     esp,8                                                                   ; restore stack for padLeft_0
    ; end calling function padLeft_0                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:121:24
; function lambda10()                                                           
lambda10:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function panic_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_171]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; Calling function panic_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:121:34
    call    panic_0                                                                 
    add     esp,4                                                                   ; restore stack for panic_0
    ; end calling function panic_0                                                  

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:203:9
; function len_0(s:str) -> i32                                                  
len_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx

    mov     dword ebx, 0    ; the count
    mov     dword ecx, 0    ; the offset
.loop:
    ; call macro, calling nextChar_0
    push dword ecx
    push dword [ebp+8]
    call nextChar_0
    add esp, 8

    cmp     dword eax,0
    jz      .end
    mov     dword ecx,eax
    inc     ebx
    jmp      .loop
.end:
    mov     eax,ebx

    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:397:9
; function foldLeft_1(vec:Vec_9,zero:i32,accum:fn (i32,FilePermission_19) -> i32) -> i32
foldLeft_1:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the vector
    add     ecx, 4              ; the address of the value in the vector
    mov     eax, [ebp+12]          ; the actual value

.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    push    eax
    
    ; TODO I must dereference it
    mov     dword edx, [ebp+16]
    mov     dword edx,[edx]
    push    dword edx
    call    [edx]
    add     esp, 12
    add     ecx, 4
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; function lambda1055_add_ref(address:i32,descr:str)                            
lambda1055_add_ref:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:178:4
; function render_0(ren:SDLRenderer_1,state:State_14)                           
render_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 88                                                                   ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; calling function sdlSetRenderDrawColor_0, added to stack 0                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [const_14]                                                       ; static BLACK
    mov dword [esp + 8], eax                                                        ; static BLACK
    pop eax                                                                         
    ; Calling function sdlSetRenderDrawColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:179:26
    call    sdlSetRenderDrawColor_0                                                 
    add     esp,8                                                                   ; restore stack for sdlSetRenderDrawColor_0
    ; end calling function sdlSetRenderDrawColor_0                                  

    ; calling function sdlRenderClear_0, added to stack 0                           
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlRenderClear_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:180:19
    call    sdlRenderClear_0                                                        
    add     esp,4                                                                   ; restore stack for sdlRenderClear_0
    ; end calling function sdlRenderClear_0                                         

    ; inlining function resources_0, added to stack 0                               
    ; adding val state                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function resources_0                                             
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; inlining function stage_0, added to stack 0                                   
    ; adding val state                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function stage_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  

    ; calling function match_0, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val stage original_param_name value                                
    ; param value, index_relative_to_bp -2                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,28                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,48                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter ren
    mov  dword [edx + 12], ecx                                                      ; context parameter ren
    mov  dword ecx, [ebp+-4]                                                        ; context parameter resources
    mov  dword [edx + 16], ecx                                                      ; context parameter resources
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda389                                                      
    mov dword [edx + 4], lambda389_add_ref                                          
    mov dword [edx + 2 * 4], lambda389_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,68                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,88                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter ren
    mov  dword [edx + 12], ecx                                                      ; context parameter ren
    mov  dword ecx, [ebp+-4]                                                        ; context parameter resources
    mov  dword [edx + 16], ecx                                                      ; context parameter resources
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda390                                                      
    mov dword [edx + 4], lambda390_add_ref                                          
    mov dword [edx + 2 * 4], lambda390_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:185:10
    call    match_0                                                                 
    add     esp,12                                                                  ; restore stack for match_0
    ; end calling function match_0                                                  

    ; calling function sdlRenderPresent_0, added to stack 0                         
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlRenderPresent_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:187:21
    call    sdlRenderPresent_0                                                      
    add     esp,4                                                                   ; restore stack for sdlRenderPresent_0
    ; end calling function sdlRenderPresent_0                                       

    ; deref 
    push     dword [ebp - 8]                                                        
    call     Stage_0_deref                                                          
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop eax                                                                         ; restoring return register
    add   esp, 88                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Stage_0_deref(address:Stage_0)                                       
Stage_0_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     MenuState_4_deref                                                      
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    cmp dword [ebx], 1                                                              
    jne ._variant_1                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_1:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Stage_0_addRef(address:Stage_0)                                      
Stage_0_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     MenuState_4_addRef                                                     
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    cmp dword [ebx], 1                                                              
    jne ._variant_1                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_1:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:33:36
; function lambda412(enumerateEntry:EnumerateEntry_17)                          
lambda412:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 76                                                                   ; reserve stack local vals (let)
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function index_0, added to stack 0                                   
    ; adding val enumerateEntry                                                     
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function index_0                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function value_0, added to stack 0                                   
    ; adding val enumerateEntry                                                     
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function value_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  

    ; inlining function score_0, added to stack 0                                   
    ; adding let val highScore original_param_name v                                
    ; param v, index_relative_to_bp -2                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function score_0                                                 
    mov dword [ebp + -12], eax                                                      ; 

    ; inlining function time_0, added to stack 0                                    
    ; adding let val highScore original_param_name v                                
    ; param v, index_relative_to_bp -2                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function time_0                                                  
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function match_7, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val last original_param_name value                                 
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,56                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 16                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+-16]                                                       ; context parameter time
    mov  dword [ecx + 12], ebx                                                      ; context parameter time
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda427                                                      
    mov dword [ecx + 4], lambda427_add_ref                                          
    mov dword [ecx + 2 * 4], lambda427_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_202                                               
    mov  dword ecx, static_memory_203                                               
    mov dword [ecx], lambda428                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_7 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:39:26
    call    match_7                                                                 
    add     esp,12                                                                  ; restore stack for match_7
    ; end calling function match_7                                                  
    mov dword [ebp + -20], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 20]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function padLeft_0, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function toString_0, added to stack 0 + 8      
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val score original_param_name n                                    
    ; param n, index_relative_to_bp -3                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-12]                                                       
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:43:38
    call    toString_0                                                              
    add     esp,4                                                                   ; restore stack for toString_0
    ; end calling function toString_0                                               
    mov dword [esp + 0], eax                                                        ; s = toString_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:43:38

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 64], eax                                                   
    mov dword [esp + 4], 10                                                         
    ; Calling function padLeft_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:43:29
    call    padLeft_0                                                               
    add     esp,8                                                                   ; restore stack for padLeft_0
    ; end calling function padLeft_0                                                
    mov dword [ebp + -60], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 60]                                                       
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; calling function createSDLText_0, added to stack 0                            
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val font original_param_name font                                  
    ; add_lambda_param_from_lambda_space, original_param_name font, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val sScore original_param_name text                                
    ; param text, index_relative_to_bp -15                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-60]                                                       
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; adding let val color original_param_name color                                
    ; param color, index_relative_to_bp -5                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-20]                                                       
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function createSDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:44:38
    call    createSDLText_0                                                         
    add     esp,16                                                                  ; restore stack for createSDLText_0
    ; end calling function createSDLText_0                                          
    mov dword [ebp + -68], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 68]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; inlining function add_1, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function mul_0, added to stack 0 + 4          
    ; adding let val index original_param_name n1                                   
    ; param n1, index_relative_to_bp -1                                             

    push    edx
    mov     dword eax,[ebp+-4]
    imul    dword eax,30
    pop     edx

    ; end inlining function mul_0                                                   
    mov dword [esp + 0], eax                                                        ; n2 = mul_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:45:29

    mov     eax, 300
    add     eax, [ebp+-4-(0)-84]

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [ebp + -72], eax                                                      ; 

    ; calling function renderAndRelease_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val scoreText original_param_name text                             
    ; param text, index_relative_to_bp -17                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-68]                                                       
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 12       
    sub esp, 16                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 380                                                        
    ; adding let val y original_param_name y                                        
    ; param y, index_relative_to_bp -18                                             
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-72]                                                       
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function mul_0, added to stack 0 + 12 + 16
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function len_0, added to stack 0 + 12 + 16 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val sScore original_param_name s                                   
    ; param s, index_relative_to_bp -15                                             
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-60]                                                       
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function len_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:46:65
    call    len_0                                                                   
    add     esp,4                                                                   ; restore stack for len_0
    ; end calling function len_0                                                    
    mov dword [esp + 0], eax                                                        ; n1 = len_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:46:65

    push    edx
    mov     dword eax,[ebp+-4-(0 + 12 + 16)-84]
    imul    dword eax,24
    pop     edx

    add     esp,4                                                                   ; restore stack for mul_0
    ; end inlining function mul_0                                                   
    mov dword [esp + 8], eax                                                        ; width = mul_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:46:61
    mov dword [esp + 12], 24                                                        
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:46:49
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 8], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:46:49

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 76], eax                                                   
    ; Calling function renderAndRelease_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:46:25
    call    renderAndRelease_0                                                      
    add     esp,12                                                                  ; restore stack for renderAndRelease_0
    ; end calling function renderAndRelease_0                                       

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 76]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  






    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 68]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 64]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 60]                                                       
    call     str_deref_0                                                            
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 20]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push     dword [ebp - 8]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    add   esp, 76                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:63:8
; function slen_0(s:str) -> i32                                                 
slen_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx             ; Save ebx to the stack since we use it
    mov     eax, [ebp+8]         ; Get the parameter from the stack (4 the PC + 4 ebp) and put it in eax
    mov     dword eax,[eax]
    mov     ebx, eax

.nextchar:
    cmp     byte [eax], 0
    jz      .finished
    inc     eax
    jmp     .nextchar

.finished:
    sub     eax, ebx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:51:8
; function eq_1(t1:TimeVal_1,t2:TimeVal_1) -> bool                              
eq_1:                                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; inlining function sec_0, added to stack 0                                     
    ; adding val t1                                                                 
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function sec_0                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function nano_0, added to stack 0                                    
    ; adding val t1                                                                 
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function nano_0                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function sec_0, added to stack 0                                     
    ; adding val t2                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function sec_0                                                   
    mov dword [ebp + -12], eax                                                      ; 

    ; inlining function nano_0, added to stack 0                                    
    ; adding val t2                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function nano_0                                                  
    mov dword [ebp + -16], eax                                                      ; 

    ; inlining function and_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 8            
    ; adding let val sec1 original_param_name a                                     
    ; param a, index_relative_to_bp -1                                              
    ; adding let val sec2 original_param_name b                                     
    ; param b, index_relative_to_bp -3                                              

    mov     eax,[ebp+-4]
    cmp     eax,[ebp+-12]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; a = eq_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:58:11

    ; inlining function eq_0, added to stack 0 + 8            
    ; adding let val nano1 original_param_name a                                    
    ; param a, index_relative_to_bp -2                                              
    ; adding let val nano2 original_param_name b                                    
    ; param b, index_relative_to_bp -4                                              

    mov     eax,[ebp+-8]
    cmp     eax,[ebp+-16]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 4], eax                                                        ; b = eq_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:58:27

    mov     eax,[ebp+-8-(0)-16]
    and     dword eax,[ebp+-4-(0)-16]

    add     esp,8                                                                   ; restore stack for and_0
    ; end inlining function and_0                                                   



    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:1:9
; function vecOf_0(value:i32) -> Vec_5                                          
vecOf_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_109]
    push dword 8
    call malloc_0
    add esp, 8

    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 1
    push    ebx
    mov     dword ebx, [ebp+8]
    mov     dword [eax + 4], ebx
    pop     ebx

    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:27:50
; function lambda409(h1:HighScore_3,h2:HighScore_3) -> Compare_5                
lambda409:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function time_0, added to stack 0                                    
    ; adding val h1                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function time_0                                                  
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; inlining function time_0, added to stack 0                                    
    ; adding val h2                                                                 
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function time_0                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function cmp_1, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val t2 original_param_name a                                       
    ; param a, index_relative_to_bp -2                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-8]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val t1 original_param_name b                                       
    ; param b, index_relative_to_bp -1                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function cmp_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:30:13
    call    cmp_1                                                                   
    add     esp,8                                                                   ; restore stack for cmp_1
    ; end calling function cmp_1                                                    

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda827_add_ref(address:i32,descr:str)                             
lambda827_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda389_add_ref(address:i32,descr:str)                             
lambda389_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:24:24
; function lambda1201() -> i32                                                  
lambda1201:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 2                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda66_deref(address:i32,descr:str)                                
lambda66_deref:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 4]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 8]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:24:4
; function initialWorld_0() -> World_6                                          
initialWorld_0:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 24                                                                   ; reserve stack local vals (let)

    ; calling function cartesianProduct_0, added to stack 0                         
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function vecRange_0, added to stack 0 + 12     
    sub esp, 8                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    mov dword [esp + 4], 30                                                         
    ; Calling function vecRange_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:43
    call    vecRange_0                                                              
    add     esp,8                                                                   ; restore stack for vecRange_0
    ; end calling function vecRange_0                                               
    mov dword [esp + 0], eax                                                        ; vec1 = vecRange_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:43

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    

    ; calling function vecRange_0, added to stack 0 + 12     
    sub esp, 8                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    mov dword [esp + 4], 10                                                         
    ; Calling function vecRange_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:60
    call    vecRange_0                                                              
    add     esp,8                                                                   ; restore stack for vecRange_0
    ; end calling function vecRange_0                                               
    mov dword [esp + 4], eax                                                        ; vec2 = vecRange_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:60

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_288                                               
    mov  dword edx, static_memory_289                                               
    mov dword [edx], lambda1029                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function cartesianProduct_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:34
    call    cartesianProduct_0                                                      
    add     esp,12                                                                  ; restore stack for cartesianProduct_0
    ; end calling function cartesianProduct_0                                       
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function now_0, added to stack 0                                      
    ; Calling function now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:27:18
    call    now_0                                                                   
    ; end calling function now_0                                                    
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function World_0, added to stack 0                                    
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding let val bricks original_param_name bricks                              
    ; param bricks, index_relative_to_bp -1                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function initialBall_0, added to stack 0 + 20  
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val now original_param_name now                                    
    ; param now, index_relative_to_bp -4                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-16]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function initialBall_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:29:30
    call    initialBall_0                                                           
    add     esp,4                                                                   ; restore stack for initialBall_0
    ; end calling function initialBall_0                                            
    mov dword [esp + 4], eax                                                        ; ball = initialBall_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:29:30

    ; add ref 
    push     dword eax                                                              
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 20], eax                                                   

    ; calling function Bar_0, added to stack 0 + 20          
    sub esp, 12                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0x43fa0000                                                 
    mov dword [esp + 4], 0                                                          
    ; adding let val now original_param_name lastUpdate                             
    ; param lastUpdate, index_relative_to_bp -4                                     
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-16]                                                       
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function Bar_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:29:40
    call    Bar_0                                                                   
    add     esp,12                                                                  ; restore stack for Bar_0
    ; end calling function Bar_0                                                    
    mov dword [esp + 8], eax                                                        ; bar = Bar_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:29:40

    ; add ref 
    push     dword eax                                                              
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 24], eax                                                   
    mov dword [esp + 12], 0                                                         
    mov dword [esp + 16], 3                                                         
    ; Calling function World_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:29:10
    call    World_0                                                                 
    add     esp,20                                                                  ; restore stack for World_0
    ; end calling function World_0                                                  

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 24]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 20]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 12]                                                       
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    add   esp, 24                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_31(value:FileFlag_18,ReadOnly:fn () -> i32,WriteOnly:fn () -> i32,ReadWrite:fn () -> i32,Create:fn () -> i32,Truncate:fn () -> i32,Append:fn () -> i32) -> i32
match_31:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                               
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                              
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
    cmp dword [eax], 2                                                              
    jnz .variant2                                                                   
    mov ebx,[ebp+20]                                                              
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant2:                                                                      
    cmp dword [eax], 3                                                              
    jnz .variant3                                                                   
    mov ebx,[ebp+24]                                                                 
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant3:                                                                      
    cmp dword [eax], 4                                                              
    jnz .variant4                                                                   
    mov ebx,[ebp+28]                                                               
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant4:                                                                      
    cmp dword [eax], 5                                                              
    jnz .variant5                                                                   
    mov ebx,[ebp+32]                                                                 
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant5:                                                                      
; call macro, calling print_1
    push dword [_s_99]
    push dword 1
    call print_1
    add esp, 8
                         
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:6:8             
; function toList_0(o:Option_10) -> List_11                                     
toList_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_10, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val o                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_220                                               
    mov  dword edx, static_memory_221                                               
    mov dword [edx], lambda574                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_222                                               
    mov  dword edx, static_memory_223                                               
    mov dword [edx], lambda575                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_10 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:7:10
    call    match_10                                                                
    add     esp,12                                                                  ; restore stack for match_10
    ; end calling function match_10                                                 

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:39:33
; function lambda427(h:HighScore_3) -> SDLColor_0                               
lambda427:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function if_5, added to stack 0                                      
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function eq_1, added to stack 0 + 4            
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function time_0, added to stack 0 + 4 + 8
    ; adding val h                                                                  
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function time_0                                                  
    mov dword [esp + 0], eax                                                        ; t1 = time_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:40:25

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding let val time original_param_name t2                                    
    ; add_lambda_param_from_lambda_space, original_param_name t2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function eq_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:40:18
    call    eq_1                                                                    
    add     esp,8                                                                   ; restore stack for eq_1
    ; end calling function eq_1                                                     
    mov dword [esp + 0], eax                                                        ; cond = eq_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:40:18

    push  ebx
    push  edx

    mov   dword eax, [ebp+-4-(0)-8]
    imul  dword eax, [const_19]
    mov   dword ebx, [ebp+-4-(0)-8]
    xor   dword ebx, 1
    imul  dword ebx, [const_18]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,4                                                                   ; restore stack for if_5
    ; end inlining function if_5                                                    


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda134_deref(address:i32,descr:str)                               
lambda134_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:37              
; function lambda880(index:i32,value:HighScore_3) -> EnumerateEntry_17          
lambda880:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function EnumerateEntry_0, added to stack 0                           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val index                                                              
    ; param index, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val value                                                              
    ; param value, index_relative_to_bp 4                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function EnumerateEntry_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:29:69
    call    EnumerateEntry_0                                                        
    add     esp,8                                                                   ; restore stack for EnumerateEntry_0
    ; end calling function EnumerateEntry_0                                         

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:36:37
; function lambda189() -> GameState_5                                           
lambda189:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function fps_2, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val gameState                                                          
    ; add_lambda_param_from_lambda_space, original_param_name receiver, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val fps original_param_name v                                      
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function fps_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:36:55
    call    fps_2                                                                   
    add     esp,8                                                                   ; restore stack for fps_2
    ; end calling function fps_2                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:62
; function lambda118() -> SDLRenderer_1                                         
lambda118:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val value                                                              
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda311_deref(address:i32,descr:str)                               
lambda311_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Bar_8_deref                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:59:8
; function collides_0(ball:Ball_7,barPos:f32) -> bool                           
collides_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)
    push   ebx                                                                      
    mov ebx, [ebp + 12]                                                             ; let reference to par barPos
    mov dword [ebp + -4], ebx                                                       ; 
    pop   ebx                                                                       

    ; inlining function sub_0, added to stack 0                                     

    mov     eax, [const_7]
    sub     eax, [const_11]

    ; end inlining function sub_0                                                   
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function and_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function greater_2, added to stack 0 + 8      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_3, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; f1 = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:23
    push eax                                                                        
    mov dword eax, [const_13]                                                       ; static BALLSIZE
    mov dword [esp + 8], eax                                                        ; static BALLSIZE
    pop eax                                                                         
    ; Calling function add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:27
    call    add_3                                                                   
    add     esp,8                                                                   ; restore stack for add_3
    ; end calling function add_3                                                    
    mov dword [esp + 0], eax                                                        ; f1 = add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:27
    ; adding let val bx original_param_name f2                                      
    ; param f2, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function greater_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:45
    call    greater_2                                                               
    add     esp,8                                                                   ; restore stack for greater_2
    ; end calling function greater_2                                                
    mov dword [esp + 0], eax                                                        ; a = greater_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:45

    ; calling function less_2, added to stack 0 + 8         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; f1 = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:60

    ; calling function add_3, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val bx original_param_name f1                                      
    ; param f1, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [const_10]                                                       ; static BARWIDTH
    mov dword [esp + 8], eax                                                        ; static BARWIDTH
    pop eax                                                                         
    ; Calling function add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:72
    call    add_3                                                                   
    add     esp,8                                                                   ; restore stack for add_3
    ; end calling function add_3                                                    
    mov dword [esp + 4], eax                                                        ; f2 = add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:72
    ; Calling function less_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:65
    call    less_2                                                                  
    add     esp,8                                                                   ; restore stack for less_2
    ; end calling function less_2                                                   
    mov dword [esp + 4], eax                                                        ; b = less_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:63:65

    mov     eax,[ebp+-8-(0)-16]
    and     dword eax,[ebp+-4-(0)-16]

    add     esp,8                                                                   ; restore stack for and_0
    ; end inlining function and_0                                                   
    mov dword [ebp + -12], eax                                                      ; 

    ; calling function greater_1, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_3, added to stack 0 + 8          
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; f1 = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:64:23
    push eax                                                                        
    mov dword eax, [const_13]                                                       ; static BALLSIZE
    mov dword [esp + 8], eax                                                        ; static BALLSIZE
    pop eax                                                                         
    ; Calling function add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:64:27
    call    add_3                                                                   
    add     esp,8                                                                   ; restore stack for add_3
    ; end calling function add_3                                                    
    mov dword [esp + 0], eax                                                        ; f1 = add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:64:27
    ; adding let val by original_param_name n2                                      
    ; param n2, index_relative_to_bp -2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:64:45
    call    greater_1                                                               
    add     esp,8                                                                   ; restore stack for greater_1
    ; end calling function greater_1                                                
    mov dword [ebp + -16], eax                                                      ; 

    ; inlining function and_0, added to stack 0                                     
    ; adding let val xColl original_param_name a                                    
    ; param a, index_relative_to_bp -3                                              
    ; adding let val yColl original_param_name b                                    
    ; param b, index_relative_to_bp -4                                              

    mov     eax,[ebp+-12]
    and     dword eax,[ebp+-16]

    ; end inlining function and_0                                                   









    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:23:14           
; function lambda768(v:EnumerateEntry_10) -> Option_14                          
lambda768:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Option_Some_5, added to stack 0                              
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function f, added to stack 0 + 4               
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param p_771, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function f : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:23:35
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,4                                                                   ; restore stack for f
    ; end calling function f                                                        
    mov dword [esp + 0], eax                                                        ; value = f : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:23:35
    ; Calling function Option_Some_5 : file:////home/enrico/development/rust/rasm/stdlib/option.rasm:23:27
    call    Option_Some_5                                                           
    add     esp,4                                                                   ; restore stack for Option_Some_5
    ; end calling function Option_Some_5                                            


    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function HighScore_3_addRef(address:HighScore_3)                              
HighScore_3_addRef:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:226:9
; function add_3(f1:f32,n2:i32) -> f32                                          
add_3:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax
    fild    dword [ebp - 4]
    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax

    fadd    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:310:9
; function flatten_1(vec:Vec_7) -> Vec_0                                        
flatten_1:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling vecFlattenCreate_0
    push dword [ebp+8]
    call vecFlattenCreate_0
    add esp, 4

    push    eax

    push    ebx
    push    ecx
    push    edx

    mov     edx, [eax]
    add     edx, 4              ; the address of the value in the result array

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]    ; the address of the allocation table of the inner array
    mov     dword ecx, [ecx]    ; the address of the memory of the inner array
    mov     dword eax, [ecx]    ; the size of the inner array
    shl     eax, 2              ; the length in bytes

    add     ecx, 4
    ; call macro, calling memcopy_0
    push dword eax
    push dword edx
    push dword ecx
    call memcopy_0
    add esp, 12

    pop     ecx

    add     ecx, 4
    add     edx, eax
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:30:12
; function SDLRect_0(x:i32,y:i32,width:i32,height:i32) -> SDLRect_19            
SDLRect_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 16
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property x
    mov   ebx, [ebp+8]                                                                   
    mov dword  [eax + 0], ebx                                                       

    ; property y
    mov   ebx, [ebp+12]                                                                   
    mov dword  [eax + 4], ebx                                                       

    ; property width
    mov   ebx, [ebp+16]                                                               
    mov dword  [eax + 8], ebx                                                       

    ; property height
    mov   ebx, [ebp+20]                                                              
    mov dword  [eax + 12], ebx                                                      
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:100:8             
; function flatten_0(l:List_15) -> List_11                                      
flatten_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_18, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_246                                               
    mov  dword edx, static_memory_247                                               
    mov dword [edx], lambda780                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_248                                               
    mov  dword edx, static_memory_249                                               
    mov dword [edx], lambda781                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_18 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:101:10
    call    match_18                                                                
    add     esp,12                                                                  ; restore stack for match_18
    ; end calling function match_18                                                 

    pop     ebp                                                                     
    ret                                                                             
; function lambda353_deref(address:i32,descr:str)                               
lambda353_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:15:8
; function fileMode_0(f:FileMode_24) -> i32                                     
fileMode_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 12                                                                   ; reserve stack local vals (let)

    ; inlining function user_0, added to stack 0                                    
    ; adding val f                                                                  
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function user_0                                                  
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; inlining function group_0, added to stack 0                                   
    ; adding val f                                                                  
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function group_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; inlining function others_0, added to stack 0                                  
    ; adding val f                                                                  
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function others_0                                                
    mov dword [ebp + -12], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 12]                                                       
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; inlining function add_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function add_1, added to stack 0 + 8         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function mul_0, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function filePermissions_0, added to stack 0 + 8 + 8 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val user original_param_name p                                     
    ; param p, index_relative_to_bp -1                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function filePermissions_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:36
    call    filePermissions_0                                                       
    add     esp,4                                                                   ; restore stack for filePermissions_0
    ; end calling function filePermissions_0                                        
    mov dword [esp + 0], eax                                                        ; n2 = filePermissions_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:36

    push    edx
    mov     dword eax,64
    imul    dword eax,[ebp+-4-(0 + 8 + 8)-12]
    pop     edx

    add     esp,4                                                                   ; restore stack for mul_0
    ; end inlining function mul_0                                                   
    mov dword [esp + 0], eax                                                        ; n1 = mul_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:16

    ; inlining function mul_0, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function filePermissions_0, added to stack 0 + 8 + 8 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val group original_param_name p                                    
    ; param p, index_relative_to_bp -2                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function filePermissions_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:67
    call    filePermissions_0                                                       
    add     esp,4                                                                   ; restore stack for filePermissions_0
    ; end calling function filePermissions_0                                        
    mov dword [esp + 0], eax                                                        ; n2 = filePermissions_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:67

    push    edx
    mov     dword eax,8
    imul    dword eax,[ebp+-4-(0 + 8 + 8)-12]
    pop     edx

    add     esp,4                                                                   ; restore stack for mul_0
    ; end inlining function mul_0                                                   
    mov dword [esp + 4], eax                                                        ; n2 = mul_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:48

    mov     eax, [ebp+-8-(0 + 8)-12]
    add     eax, [ebp+-4-(0 + 8)-12]

    add     esp,8                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 0], eax                                                        ; n1 = add_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:12

    ; calling function filePermissions_0, added to stack 0 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val others original_param_name p                                   
    ; param p, index_relative_to_bp -3                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function filePermissions_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:93
    call    filePermissions_0                                                       
    add     esp,4                                                                   ; restore stack for filePermissions_0
    ; end calling function filePermissions_0                                        
    mov dword [esp + 4], eax                                                        ; n2 = filePermissions_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:20:93

    mov     eax, [ebp+-8-(0)-12]
    add     eax, [ebp+-4-(0)-12]

    add     esp,8                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   







    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 12]                                                       
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    add   esp, 12                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:36:64
; function lambda190() -> GameState_5                                           
lambda190:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function update_4, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val resources                                                          
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 4
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 24]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val keys                                                               
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function world_0, added to stack 0 + 12        
    ; adding val gameState                                                          
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function world_0                                                 
    mov dword [esp + 8], eax                                                        ; world = world_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:37:63

    ; add ref 
    push     dword eax                                                              
    call     World_6_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function update_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:37:30
    call    update_4                                                                
    add     esp,12                                                                  ; restore stack for update_4
    ; end calling function update_4                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     World_6_addRef                                                         
    add      esp,4                                                                  

    ; calling function GameState_0, added to stack 0                                
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val stage original_param_name stage                                
    ; add_lambda_param_from_lambda_space, original_param_name stage, lambda_space_index 5
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 28]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newWorld original_param_name world                             
    ; param world, index_relative_to_bp -1                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val fps original_param_name fps                                    
    ; add_lambda_param_from_lambda_space, original_param_name fps, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function GameState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:40:18
    call    GameState_0                                                             
    add     esp,12                                                                  ; restore stack for GameState_0
    ; end calling function GameState_0                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 4]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:23:8
; function filePermission_0(p:FilePermission_19) -> i32                         
filePermission_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_34, added to stack 0                                   
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val p                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_316                                               
    mov  dword edx, static_memory_317                                               
    mov dword [edx], lambda1200                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_318                                               
    mov  dword edx, static_memory_319                                               
    mov dword [edx], lambda1201                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_320                                               
    mov  dword edx, static_memory_321                                               
    mov dword [edx], lambda1202                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 16], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_34 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:24:10
    call    match_34                                                                
    add     esp,16                                                                  ; restore stack for match_34
    ; end calling function match_34                                                 

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:10:8
; function lambda178() -> Stage_0                                               
lambda178:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Stage_Game_0, added to stack 0                               
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function initialGameState_0, added to stack 0 + 4
    ; Calling function initialGameState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:11:37
    call    initialGameState_0                                                      
    ; end calling function initialGameState_0                                       
    mov dword [esp + 0], eax                                                        ; gameState = initialGameState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:11:37

    ; add ref 
    push     dword eax                                                              
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function Stage_Game_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:11:14
    call    Stage_Game_0                                                            
    add     esp,4                                                                   ; restore stack for Stage_Game_0
    ; end calling function Stage_Game_0                                             

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:3:9
; function exitMain_0(status:i32)                                               
exitMain_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    %ifdef LIBC
    push    dword [ebp+8]
    call    exit
    %else
    push    dword ebx
    mov     ebx, [ebp+8]    ; Arg one: the status
    mov     eax, 1          ; Syscall number: 1
    int     0x80
    pop     ebx
    %endif


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:26
; function lambda117() -> SDLRenderer_1                                         
lambda117:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function sdlFailure_0, added to stack 0                               
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val message                                                            
    ; add_lambda_param_from_lambda_space, original_param_name message, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sdlFailure_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:41
    call    sdlFailure_0                                                            
    add     esp,4                                                                   ; restore stack for sdlFailure_0
    ; end calling function sdlFailure_0                                             
    ; adding val value                                                              
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 2
    mov   dword eax,[edx + 16]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:14              
; function lambda583(head:HighScore_3,tail:List_11) -> Vec_0                    
lambda583:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 12                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function flatten_1, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function vecOf_2, added to stack 0 + 4         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function vecOf_1, added to stack 0 + 4 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param value, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function vecOf_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:49
    call    vecOf_1                                                                 
    add     esp,4                                                                   ; restore stack for vecOf_1
    ; end calling function vecOf_1                                                  
    mov dword [esp + 0], eax                                                        ; v1 = vecOf_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:49

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function listToVec_0, added to stack 0 + 4 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param l, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listToVec_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:66
    call    listToVec_0                                                             
    add     esp,4                                                                   ; restore stack for listToVec_0
    ; end calling function listToVec_0                                              
    mov dword [esp + 4], eax                                                        ; v2 = listToVec_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:66

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function vecOf_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:43
    call    vecOf_2                                                                 
    add     esp,8                                                                   ; restore stack for vecOf_2
    ; end calling function vecOf_2                                                  
    mov dword [esp + 0], eax                                                        ; vec = vecOf_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:43

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_7_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function flatten_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:37
    call    flatten_1                                                               
    add     esp,4                                                                   ; restore stack for flatten_1
    ; end calling function flatten_1                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 12]                                                       
    call     Vec_7_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 12                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:87:9
; function sdlCreateRenderer_0(win:SDLWindow_2) -> SDLRenderer_1                
sdlCreateRenderer_0:                                                            
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; SDL_RENDERER_ACCELERATED = 0x00000002
    ; SDL_RENDERER_PRESENTVSYNC = 0x00000004
    ; ccall macro, calling SDL_CreateRenderer
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 12
    and   esp,0xfffffff0
    mov dword ecx, 6
    mov dword [esp+8], ecx

    mov dword ecx, -1
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_CreateRenderer
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx


    pop     ebp                                                                     
    ret                                                                             
; function MenuState_4_addRef(address:MenuState_4)                              
MenuState_4_addRef:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda526_add_ref(address:i32,descr:str)                             
lambda526_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Option_13_addRef                                                       
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:376:12
; function SDLText_0(surface:SDLSurface_12,texture:SDLTexture_13) -> SDLText_18 
SDLText_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property surface
    mov   ebx, [ebp+8]                                                             
    mov dword  [eax + 0], ebx                                                       

    ; property texture
    mov   ebx, [ebp+12]                                                             
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:7:17
; function lambda1096() -> XDirection_1                                         
lambda1096:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function XDirection_Right_0, added to stack 0                        
    mov    eax, [_enum_XDirection_Right]

    ; end inlining function XDirection_Right_0                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:95:27
; function lambda459(brick:Brick_2)                                             
lambda459:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function sdlSetRenderDrawColor_0, added to stack 0                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function color_0, added to stack 0 + 8        
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function color_0                                                 
    mov dword [esp + 4], eax                                                        ; color = color_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:96:47

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function sdlSetRenderDrawColor_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:96:30
    call    sdlSetRenderDrawColor_0                                                 
    add     esp,8                                                                   ; restore stack for sdlSetRenderDrawColor_0
    ; end calling function sdlSetRenderDrawColor_0                                  

    ; calling function sdlRenderFillRect_0, added to stack 0                        
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function SDLRect_0, added to stack 0 + 8       
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; inlining function add_1, added to stack 0 + 8 + 16
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function x_2, added to stack 0 + 8 + 16 + 4
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_2                                                     
    mov dword [esp + 0], eax                                                        ; n1 = x_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:51

    mov     eax, [ebp+-4-(0 + 8 + 16)-16]
    add     eax, 1

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 0], eax                                                        ; x = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:43

    ; inlining function add_1, added to stack 0 + 8 + 16
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function y_1, added to stack 0 + 8 + 16 + 4
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_1                                                     
    mov dword [esp + 0], eax                                                        ; n1 = y_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:68

    mov     eax, [ebp+-4-(0 + 8 + 16)-16]
    add     eax, 1

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; y = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:60

    ; inlining function sub_0, added to stack 0 + 8 + 16

    mov     eax, [const_8]
    sub     eax, 2

    ; end inlining function sub_0                                                   
    mov dword [esp + 8], eax                                                        ; width = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:77

    ; inlining function sub_0, added to stack 0 + 8 + 16

    mov     eax, [const_9]
    sub     eax, 2

    ; end inlining function sub_0                                                   
    mov dword [esp + 12], eax                                                       ; height = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:97
    ; Calling function SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:39
    call    SDLRect_0                                                               
    add     esp,16                                                                  ; restore stack for SDLRect_0
    ; end calling function SDLRect_0                                                
    mov dword [esp + 4], eax                                                        ; rect = SDLRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:39

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function sdlRenderFillRect_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:97:26
    call    sdlRenderFillRect_0                                                     
    add     esp,8                                                                   ; restore stack for sdlRenderFillRect_0
    ; end calling function sdlRenderFillRect_0                                      

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  









    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda108_add_ref(address:i32,descr:str)                             
lambda108_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_10_addRef(address:Vec_10,descr:str)                              
Vec_10_addRef:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_10                                                                   
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push     dword [ebx]                                                            
    call     EnumerateEntry_17_addRef                                               
    add      esp,4                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:79:9
; function sdlCreateWindow_0(title:str,x:i32,y:i32,width:i32,height:i32) -> SDLWindow_2
sdlCreateWindow_0:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; ccall macro, calling SDL_CreateWindow
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 24
    and   esp,0xfffffff0
    mov dword ecx, 4
    mov dword [esp+20], ecx

    mov dword ecx, [ebp+24]
    mov dword [esp+16], ecx

    mov dword ecx, [ebp+20]
    mov dword [esp+12], ecx

    mov dword ecx, [ebp+16]
    mov dword [esp+8], ecx

    mov dword ecx, [ebp+12]
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword ecx, [ecx]
   mov dword [esp+0], ecx

    call SDL_CreateWindow
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx


    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:69:8
; function ballAfterCollision_0(ball:Ball_7,brick:Brick_2) -> Ball_7            
ballAfterCollision_0:                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 96                                                                   ; reserve stack local vals (let)

    ; calling function sub_1, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8           
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; f1 = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:70:24

    ; inlining function x_2, added to stack 0 + 8           
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_2                                                     
    mov dword [esp + 4], eax                                                        ; n2 = x_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:70:36
    ; Calling function sub_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:70:28
    call    sub_1                                                                   
    add     esp,8                                                                   ; restore stack for sub_1
    ; end calling function sub_1                                                    
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function sub_2, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function add_1, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function x_2, added to stack 0 + 8 + 4
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_2                                                     
    mov dword [esp + 0], eax                                                        ; n1 = x_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:71:25

    mov     eax, [ebp+-4-(0 + 8)-96]
    add     eax, [const_8]

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 0], eax                                                        ; n1 = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:71:29

    ; inlining function x_1, added to stack 0 + 8           
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 4], eax                                                        ; f2 = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:71:52
    ; Calling function sub_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:71:45
    call    sub_2                                                                   
    add     esp,8                                                                   ; restore stack for sub_2
    ; end calling function sub_2                                                    
    mov dword [ebp + -8], eax                                                       ; 

    ; calling function sub_1, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 8           
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; f1 = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:72:24

    ; inlining function y_1, added to stack 0 + 8           
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_1                                                     
    mov dword [esp + 4], eax                                                        ; n2 = y_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:72:36
    ; Calling function sub_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:72:28
    call    sub_1                                                                   
    add     esp,8                                                                   ; restore stack for sub_1
    ; end calling function sub_1                                                    
    mov dword [ebp + -12], eax                                                      ; 

    ; calling function sub_2, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function add_1, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function y_1, added to stack 0 + 8 + 4
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_1                                                     
    mov dword [esp + 0], eax                                                        ; n1 = y_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:73:25

    mov     eax, [ebp+-4-(0 + 8)-96]
    add     eax, [const_9]

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 0], eax                                                        ; n1 = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:73:29

    ; inlining function y_0, added to stack 0 + 8           
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 4], eax                                                        ; f2 = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:73:53
    ; Calling function sub_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:73:46
    call    sub_2                                                                   
    add     esp,8                                                                   ; restore stack for sub_2
    ; end calling function sub_2                                                    
    mov dword [ebp + -16], eax                                                      ; 

    ; calling function min_0, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val xDiff1 original_param_name f1                                  
    ; param f1, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val xDiff2 original_param_name f2                                  
    ; param f2, index_relative_to_bp -2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function min_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:75:20
    call    min_0                                                                   
    add     esp,8                                                                   ; restore stack for min_0
    ; end calling function min_0                                                    
    mov dword [ebp + -20], eax                                                      ; 

    ; calling function min_0, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val yDiff1 original_param_name f1                                  
    ; param f1, index_relative_to_bp -3                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val yDiff2 original_param_name f2                                  
    ; param f2, index_relative_to_bp -4                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-16]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function min_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:76:20
    call    min_0                                                                   
    add     esp,8                                                                   ; restore stack for min_0
    ; end calling function min_0                                                    
    mov dword [ebp + -24], eax                                                      ; 

    ; inlining function if_13, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function less_2, added to stack 0 + 12         
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val xDiff original_param_name f1                                   
    ; param f1, index_relative_to_bp -5                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-20]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val yDiff original_param_name f2                                   
    ; param f2, index_relative_to_bp -6                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-24]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function less_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:18
    call    less_2                                                                  
    add     esp,8                                                                   ; restore stack for less_2
    ; end calling function less_2                                                   
    mov dword [esp + 0], eax                                                        ; cond = less_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:18
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,44                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,60                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter ball
    mov  dword [edx + 12], ecx                                                      ; context parameter ball
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1120                                                     
    mov dword [edx + 4], lambda1120_add_ref                                         
    mov dword [edx + 2 * 4], lambda1120_deref                                       
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,80                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,96                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter ball
    mov  dword [edx + 12], ecx                                                      ; context parameter ball
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1121                                                     
    mov dword [edx + 4], lambda1121_add_ref                                         
    mov dword [edx + 2 * 4], lambda1121_deref                                       
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-96]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-96]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-96]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_13
    ; end inlining function if_13                                                   












    add   esp, 96                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_5(value:Option_7,Some:fn (KeyEvent_15) -> (),None:fn () -> ()) 
match_5:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda554_add_ref(address:i32,descr:str)                             
lambda554_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function str_deref_0(s:str)                                                   
str_deref_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push dword _s_3                                                                 
    push dword [ebp+8]                                                                   
    call    deref_0                                                                 
    add  esp, 8                                                                     


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function str_addRef_0(s:str)                                                  
str_addRef_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push dword _s_3                                                                 
    push dword [ebp+8]                                                                   
    call    addRef_0                                                                
    add  esp, 8                                                                     


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda768_add_ref(address:i32,descr:str)                             
lambda768_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda972_add_ref(address:i32,descr:str)                             
lambda972_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda350_add_ref(address:i32,descr:str)                             
lambda350_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:96:9
; function readFile_1(file:File_6) -> str                                       
readFile_1:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     ebx,[ebp+8]           ; the file descriptor

    ; call macro, calling fileSize_0
    push dword ebx
    call fileSize_0
    add esp, 4

    mov     edx, eax
    add     edx, 1  ; we allocate one more byte for 0 at the end of the string

    ; call macro, calling malloc_0
    push dword [_s_79]
    push dword edx
    call malloc_0
    add esp, 8

    push    eax

    sub     edx,1   ; we subtract one for 0 at the end of the string

    ; call macro, calling sysRead_0
    push dword edx
    push dword eax
    push dword ebx
    call sysRead_0
    add esp, 12


    ; call macro, calling sysClose_0
    push dword ebx
    call sysClose_0
    add esp, 4


    pop     eax
    add     dword edx, [eax]
    mov     byte    [edx],0     ;

    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:242:9
; function sub_1(f1:f32,n2:i32) -> f32                                          
sub_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fisub   dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:21            
; function lambda679() -> List_6                                                
lambda679:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_3, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; add_lambda_param_from_lambda_space, original_param_name head, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function filter_3, added to stack 0 + 8        
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; add_lambda_param_from_lambda_space, original_param_name l, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function filter_3 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:49
    call    filter_3                                                                
    add     esp,8                                                                   ; restore stack for filter_3
    ; end calling function filter_3                                                 
    mov dword [esp + 4], eax                                                        ; tail = filter_3 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:49

    ; add ref 
    push     dword eax                                                              
    call     List_6_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_3 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:129:30
    call    List_Full_3                                                             
    add     esp,8                                                                   ; restore stack for List_Full_3
    ; end calling function List_Full_3                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_6_deref                                                           
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:49:9
; function lambda1194() -> i32                                                  
lambda1194:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 512                                                          

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:85:9
; function forEach_0(vec:Vec_10,f:fn (EnumerateEntry_17) -> ())                 
forEach_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx
    push    ecx
    push    edx
    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    mov     dword ecx, [ebx]    ; count
    add     ebx, 4  ; address of first value
    mov     edx, [ebp+12]         ; points to the lambda space
    mov     dword edx,[edx]
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    push    dword edx       ; the address to the lambda space is the last argument of every lambda
    call    [edx]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 8
    add     ebx, 4
    dec     ecx
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:118:9
; function sdlDestroyRenderer_0(ren:SDLRenderer_1)                              
sdlDestroyRenderer_0:                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_DestroyRenderer
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_DestroyRenderer
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/compiler.rasm:7:8
; function createCmdLineArguments_0(address:i32,esp:i32) -> i32                 
createCmdLineArguments_0:                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx,[ebp+12]
    %ifdef LIBC
    add     ebx,4
    %endif
    mov     dword ecx,[ebx]     ; the counter
    mov     dword edx,[ebp+8]
    mov     dword [edx],ecx
    %ifdef LIBC
    add     ebx,4
    mov     dword ebx,[ebx]
    sub     ebx,4
    %endif
    add     ecx,1

.loop:
    add     ebx,4
    add     edx,4
    sub     ecx,1
    jz      .end
    ; call macro, calling addStaticStringToHeap_0
    push dword [ebx]
    call addStaticStringToHeap_0
    add esp, 4

    mov     dword [edx],eax
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:258:18
; function lambda720(keyEvent:KeyEvent_15)                                      
lambda720:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function key_0, added to stack 0                                     
    ; adding val keyEvent                                                           
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function key_0                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function if_0, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 12           
    ; adding let val key original_param_name a                                      
    ; param a, index_relative_to_bp -1                                              

    mov     eax,[ebp+-4]
    cmp     eax,41
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:260:14
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_238                                               
    mov  dword ecx, static_memory_239                                               
    mov dword [ecx], lambda732                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_240                                               
    mov  dword ecx, static_memory_241                                               
    mov dword [ecx], lambda733                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-12]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-12]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-12]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_0
    ; end inlining function if_0                                                    


    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:51:8              
; function listOf_1(v:str) -> List_9                                            
listOf_1:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function List_Full_1, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param head, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function List_Empty_1, added to stack 0 + 8   
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_1                                            
    mov dword [esp + 4], eax                                                        ; tail = List_Empty_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:52:23

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:52:9
    call    List_Full_1                                                             
    add     esp,8                                                                   ; restore stack for List_Full_1
    ; end calling function List_Full_1                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda940_deref(address:i32,descr:str)                               
lambda940_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:61:8
; function createFile_0(path:str) -> File_6                                     
createFile_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 56                                                                   ; reserve stack local vals (let)

    ; calling function sysOpen_0, added to stack 0                                  
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val path                                                               
    ; param path, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function fileFlags_0, added to stack 0 + 12     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function vecOf_3, added to stack 0 + 12 + 4
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function FileFlag_Create_0, added to stack 0 + 12 + 4 + 12
    mov    eax, [_enum_FileFlag_Create]

    ; end inlining function FileFlag_Create_0                                       
    mov dword [esp + 0], eax                                                        ; v1 = FileFlag_Create_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:43

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; inlining function FileFlag_Truncate_0, added to stack 0 + 12 + 4 + 12
    mov    eax, [_enum_FileFlag_Truncate]

    ; end inlining function FileFlag_Truncate_0                                     
    mov dword [esp + 4], eax                                                        ; v2 = FileFlag_Truncate_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:63

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    

    ; inlining function FileFlag_WriteOnly_0, added to stack 0 + 12 + 4 + 12
    mov    eax, [_enum_FileFlag_WriteOnly]

    ; end inlining function FileFlag_WriteOnly_0                                    
    mov dword [esp + 8], eax                                                        ; v3 = FileFlag_WriteOnly_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:85

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; Calling function vecOf_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:34
    call    vecOf_3                                                                 
    add     esp,12                                                                  ; restore stack for vecOf_3
    ; end calling function vecOf_3                                                  
    mov dword [esp + 0], eax                                                        ; flags = vecOf_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:34

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_8_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   
    ; Calling function fileFlags_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:28
    call    fileFlags_0                                                             
    add     esp,4                                                                   ; restore stack for fileFlags_0
    ; end calling function fileFlags_0                                              
    mov dword [esp + 4], eax                                                        ; flags = fileFlags_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:28

    ; calling function fileMode_0, added to stack 0 + 12      
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function FileMode_0, added to stack 0 + 12 + 4
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function vecOf_4, added to stack 0 + 12 + 4 + 12
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function FilePermission_Read_0, added to stack 0 + 12 + 4 + 12 + 8
    mov    eax, [_enum_FilePermission_Read]

    ; end inlining function FilePermission_Read_0                                   
    mov dword [esp + 0], eax                                                        ; v1 = FilePermission_Read_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:64:33

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 20], eax                                                   

    ; inlining function FilePermission_Write_0, added to stack 0 + 12 + 4 + 12 + 8
    mov    eax, [_enum_FilePermission_Write]

    ; end inlining function FilePermission_Write_0                                  
    mov dword [esp + 4], eax                                                        ; v2 = FilePermission_Write_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:64:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 24], eax                                                   
    ; Calling function vecOf_4 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:64:18
    call    vecOf_4                                                                 
    add     esp,8                                                                   ; restore stack for vecOf_4
    ; end calling function vecOf_4                                                  
    mov dword [esp + 0], eax                                                        ; user = vecOf_4 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:64:18

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 28], eax                                                   

    ; calling function vecOf_4, added to stack 0 + 12 + 4 + 12
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function FilePermission_Read_0, added to stack 0 + 12 + 4 + 12 + 8
    mov    eax, [_enum_FilePermission_Read]

    ; end inlining function FilePermission_Read_0                                   
    mov dword [esp + 0], eax                                                        ; v1 = FilePermission_Read_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:65:33

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 32], eax                                                   

    ; inlining function FilePermission_Write_0, added to stack 0 + 12 + 4 + 12 + 8
    mov    eax, [_enum_FilePermission_Write]

    ; end inlining function FilePermission_Write_0                                  
    mov dword [esp + 4], eax                                                        ; v2 = FilePermission_Write_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:65:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 36], eax                                                   
    ; Calling function vecOf_4 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:65:18
    call    vecOf_4                                                                 
    add     esp,8                                                                   ; restore stack for vecOf_4
    ; end calling function vecOf_4                                                  
    mov dword [esp + 4], eax                                                        ; group = vecOf_4 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:65:18

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 40], eax                                                   

    ; calling function vecOf_4, added to stack 0 + 12 + 4 + 12
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function FilePermission_Read_0, added to stack 0 + 12 + 4 + 12 + 8
    mov    eax, [_enum_FilePermission_Read]

    ; end inlining function FilePermission_Read_0                                   
    mov dword [esp + 0], eax                                                        ; v1 = FilePermission_Read_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:66:33

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 44], eax                                                   

    ; inlining function FilePermission_Write_0, added to stack 0 + 12 + 4 + 12 + 8
    mov    eax, [_enum_FilePermission_Write]

    ; end inlining function FilePermission_Write_0                                  
    mov dword [esp + 4], eax                                                        ; v2 = FilePermission_Write_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:66:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 48], eax                                                   
    ; Calling function vecOf_4 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:66:18
    call    vecOf_4                                                                 
    add     esp,8                                                                   ; restore stack for vecOf_4
    ; end calling function vecOf_4                                                  
    mov dword [esp + 8], eax                                                        ; others = vecOf_4 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:66:18

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 52], eax                                                   
    ; Calling function FileMode_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:63:26
    call    FileMode_0                                                              
    add     esp,12                                                                  ; restore stack for FileMode_0
    ; end calling function FileMode_0                                               
    mov dword [esp + 0], eax                                                        ; f = FileMode_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:63:26

    ; add ref 
    push     dword eax                                                              
    call     FileMode_24_addRef                                                     
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 56], eax                                                   
    ; Calling function fileMode_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:63:17
    call    fileMode_0                                                              
    add     esp,4                                                                   ; restore stack for fileMode_0
    ; end calling function fileMode_0                                               
    mov dword [esp + 8], eax                                                        ; mode = fileMode_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:63:17
    ; Calling function sysOpen_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:62:12
    call    sysOpen_0                                                               
    add     esp,12                                                                  ; restore stack for sysOpen_0
    ; end calling function sysOpen_0                                                


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 56]                                                       
    call     FileMode_24_deref                                                      
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 52]                                                       
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 48]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 44]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 40]                                                       
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 36]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 32]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 28]                                                       
    call     Vec_9_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 24]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 20]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  




    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_8_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 56                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Option_13_addRef(address:Option_13)                                  
Option_13_addRef:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:114:9
; function sdlRenderPresent_0(ren:SDLRenderer_1)                                
sdlRenderPresent_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_RenderPresent
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_RenderPresent
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:47:9
; function lambda1192() -> i32                                                  
lambda1192:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 2                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:41:4
; function update_8(y:f32,yDir:YDirection_2,diff:f32) -> Pair_12                
update_8:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 84                                                                   ; reserve stack local vals (let)

    ; calling function move_1, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val y                                                                  
    ; param y, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val yDir                                                               
    ; param yDir, index_relative_to_bp 3                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val diff                                                               
    ; param diff, index_relative_to_bp 4                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function move_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:42:22
    call    move_1                                                                  
    add     esp,12                                                                  ; restore stack for move_1
    ; end calling function move_1                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function if_18, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function less_3, added to stack 0 + 12          
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newY original_param_name f1                                    
    ; param f1, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [const_12]                                                       ; static HEADERHEIGHT
    mov dword [esp + 8], eax                                                        ; static HEADERHEIGHT
    pop eax                                                                         
    ; Calling function less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:43:12
    call    less_3                                                                  
    add     esp,8                                                                   ; restore stack for less_3
    ; end calling function less_3                                                   
    mov dword [esp + 0], eax                                                        ; cond = less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:43:12
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,24                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,44                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter newY
    mov  dword [edx + 12], ecx                                                      ; context parameter newY
    mov  dword ecx, [ebp+12]                                                        ; context parameter yDir
    mov  dword [edx + 16], ecx                                                      ; context parameter yDir
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda371                                                      
    mov dword [edx + 4], lambda371_add_ref                                          
    mov dword [edx + 2 * 4], lambda371_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,64                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,84                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter newY
    mov  dword [edx + 12], ecx                                                      ; context parameter newY
    mov  dword ecx, [ebp+12]                                                        ; context parameter yDir
    mov  dword [edx + 16], ecx                                                      ; context parameter yDir
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda372                                                      
    mov dword [edx + 4], lambda372_add_ref                                          
    mov dword [edx + 2 * 4], lambda372_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-84]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-84]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-84]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_18
    ; end inlining function if_18                                                   


    add   esp, 84                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda517_add_ref(address:i32,descr:str)                             
lambda517_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:10:35
; function lambda304(k:i32) -> bool                                             
lambda304:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function eq_0, added to stack 0                                      
    ; adding val k                                                                  
    ; param a, index_relative_to_bp 3                                               

    mov     eax,[ebp+12]
    cmp     eax,80
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:482:8
; function VecReferences_0(vec:i32,generic:i32) -> i32                          
VecReferences_0:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    ; adding val vec                                                                
    ; param vec, index_relative_to_bp 2                                             
    mov dword eax, [ebp+8]                                                          

    pop     ebp                                                                     
    ret                                                                             
; function lambda134_add_ref(address:i32,descr:str)                             
lambda134_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:41:12
; function lambda428() -> SDLColor_0                                            
lambda428:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    push eax                                                                        
    mov dword eax, [const_18]                                                       ; static BLUE
    mov dword [esp + 4], eax                                                        ; static BLUE
    pop eax                                                                         

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function IOError_16_addRef(address:IOError_16)                                
IOError_16_addRef:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda152_add_ref(address:i32,descr:str)                             
lambda152_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_3_deref(address:Vec_3,descr:str)                                 
Vec_3_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_3                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push     dword [ebx]                                                            
    call     Brick_2_deref                                                          
    add      esp,4                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_34(value:FilePermission_19,Read:fn () -> i32,Write:fn () -> i32,Execute:fn () -> i32) -> i32
match_34:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
    cmp dword [eax], 2                                                              
    jnz .variant2                                                                   
    mov ebx,[ebp+20]                                                                
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant2:                                                                      
; call macro, calling print_1
    push dword [_s_103]
    push dword 1
    call print_1
    add esp, 8
                   
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:297:9
; function less_2(f1:f32,f2:f32) -> bool                                        
less_2:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling cmp_3
    push dword [ebp+12]
    push dword [ebp+8]
    call cmp_3
    add esp, 8

    cmp     dword eax,0x100
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:62
; function lambda109() -> SDLWindow_2                                           
lambda109:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val value                                                              
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:74:8               
; function take_0(vec:Vec_0,count:i32) -> Vec_0                                 
take_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)

    ; calling function enumerate_0, added to stack 0                                
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function enumerate_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:75:23
    call    enumerate_0                                                             
    add     esp,4                                                                   ; restore stack for enumerate_0
    ; end calling function enumerate_0                                              
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_10_addRef                                                          
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function filter_4, added to stack 0                                   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val es original_param_name vec                                     
    ; param vec, index_relative_to_bp -1                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,28                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,44                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter count
    mov  dword [edx + 12], ecx                                                      ; context parameter count
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda864                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function filter_4 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:77:26
    call    filter_4                                                                
    add     esp,8                                                                   ; restore stack for filter_4
    ; end calling function filter_4                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_10_addRef                                                          
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function map_2, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val filtered original_param_name vec                               
    ; param vec, index_relative_to_bp -2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_270                                               
    mov  dword edx, static_memory_271                                               
    mov dword [edx], lambda866                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function map_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:79:8
    call    map_2                                                                   
    add     esp,8                                                                   ; restore stack for map_2
    ; end calling function map_2                                                    

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_10_deref                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_10_deref                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  


    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda245_deref(address:i32,descr:str)                               
lambda245_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 12]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 16]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:397:9
; function foldLeft_0(vec:Vec_8,zero:i32,accum:fn (i32,FileFlag_18) -> i32) -> i32
foldLeft_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the vector
    add     ecx, 4              ; the address of the value in the vector
    mov     eax, [ebp+12]          ; the actual value

.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    push    eax
    
    ; TODO I must dereference it
    mov     dword edx, [ebp+16]
    mov     dword edx,[edx]
    push    dword edx
    call    [edx]
    add     esp, 12
    add     ecx, 4
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:14             
; function lambda739(head:str,tail:List_9) -> List_9                            
lambda739:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_1, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param head, index_relative_to_bp 3                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function push_1, added to stack 0 + 8          
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param l, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val value                                                              
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function push_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:51
    call    push_1                                                                  
    add     esp,8                                                                   ; restore stack for push_1
    ; end calling function push_1                                                   
    mov dword [esp + 4], eax                                                        ; tail = push_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:51

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:34
    call    List_Full_1                                                             
    add     esp,8                                                                   ; restore stack for List_Full_1
    ; end calling function List_Full_1                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/conditionals.rasm:1:8       
; function if_17(cond:bool,ftrue:fn () -> Pair_11,elseIfCond:bool,fElseIf:fn () -> Pair_11,ffalse:fn () -> Pair_11) -> Pair_11
if_17:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)

    ; inlining function if_19, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val cond                                                               
    ; param cond, index_relative_to_bp 2                                            
    ; adding val ftrue                                                              
    ; param ftrue, index_relative_to_bp 3                                           
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,44                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter elseIfCond
    mov  dword [edx + 12], ecx                                                      ; context parameter elseIfCond
    mov  dword ecx, [ebp+20]                                                        ; context parameter fElseIf
    mov  dword [edx + 16], ecx                                                      ; context parameter fElseIf
    mov  dword ecx, [ebp+24]                                                        ; context parameter ffalse
    mov  dword [edx + 20], ecx                                                      ; context parameter ffalse
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda66                                                       
    mov dword [edx + 4], lambda66_add_ref                                           
    mov dword [edx + 2 * 4], lambda66_deref                                         
    pop   edx                                                                       
    mov dword [esp + 4], edx                                                        
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+8]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+12]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-44]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,4                                                                   ; restore stack for if_19
    ; end inlining function if_19                                                   

    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:9
; function lambda371() -> Pair_12                                               
lambda371:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Pair_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_4, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function tof32_0, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [const_12]                                                       ; static HEADERHEIGHT
    mov dword [esp + 4], eax                                                        ; static HEADERHEIGHT
    pop eax                                                                         
    ; Calling function tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:24
    call    tof32_0                                                                 
    add     esp,4                                                                   ; restore stack for tof32_0
    ; end calling function tof32_0                                                  
    mov dword [esp + 0], eax                                                        ; f1 = tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:24

    ; calling function sub_3, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function tof32_0, added to stack 0 + 8 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [const_12]                                                       ; static HEADERHEIGHT
    mov dword [esp + 4], eax                                                        ; static HEADERHEIGHT
    pop eax                                                                         
    ; Calling function tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:48
    call    tof32_0                                                                 
    add     esp,4                                                                   ; restore stack for tof32_0
    ; end calling function tof32_0                                                  
    mov dword [esp + 0], eax                                                        ; f1 = tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:48
    ; adding let val newY original_param_name f2                                    
    ; add_lambda_param_from_lambda_space, original_param_name f2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sub_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:66
    call    sub_3                                                                   
    add     esp,8                                                                   ; restore stack for sub_3
    ; end calling function sub_3                                                    
    mov dword [esp + 4], eax                                                        ; f2 = sub_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:66
    ; Calling function add_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:42
    call    add_4                                                                   
    add     esp,8                                                                   ; restore stack for add_4
    ; end calling function add_4                                                    
    mov dword [esp + 0], eax                                                        ; first = add_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:42

    ; calling function flip_0, added to stack 0 + 8          
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val yDir                                                               
    ; add_lambda_param_from_lambda_space, original_param_name yDir, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function flip_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:79
    call    flip_0                                                                  
    add     esp,4                                                                   ; restore stack for flip_0
    ; end calling function flip_0                                                   
    mov dword [esp + 4], eax                                                        ; second = flip_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:79

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function Pair_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:44:18
    call    Pair_1                                                                  
    add     esp,8                                                                   ; restore stack for Pair_1
    ; end calling function Pair_1                                                   

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  







    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:85:9
; function forEach_1(vec:Vec_0,f:fn (HighScore_3) -> ())                        
forEach_1:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx
    push    ecx
    push    edx
    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    mov     dword ecx, [ebx]    ; count
    add     ebx, 4  ; address of first value
    mov     edx, [ebp+12]         ; points to the lambda space
    mov     dword edx,[edx]
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    push    dword edx       ; the address to the lambda space is the last argument of every lambda
    call    [edx]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 8
    add     ebx, 4
    dec     ecx
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:154:26
; function lambda157(k:i32) -> bool                                             
lambda157:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function not_0, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 4           
    ; adding val k                                                                  
    ; param a, index_relative_to_bp 3                                               
    ; adding let val key original_param_name b                                      
    ; add_lambda_param_from_lambda_space, original_param_name b, lambda_space_index 1

    mov     eax,[ebp+12]
    cmp     eax,[edx + 12]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; a = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:154:39

    mov     eax,[ebp+-4-(0)-4]
    xor     dword eax,1

    add     esp,4                                                                   ; restore stack for not_0
    ; end inlining function not_0                                                   


    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda517_deref(address:i32,descr:str)                               
lambda517_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_3(value:IOError_16) -> Option_12                         
Option_Some_3:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function Option_13_deref(address:Option_13)                                   
Option_13_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:65              
; function lambda839() -> bool                                                  
lambda839:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 1                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function HighScore_3_deref(address:HighScore_3)                               
HighScore_3_deref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:260:25
; function lambda732()                                                          
lambda732:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function exitMain_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    ; Calling function exitMain_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:260:38
    call    exitMain_0                                                              
    add     esp,4                                                                   ; restore stack for exitMain_0
    ; end calling function exitMain_0                                               

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:159:17            
; function lambda872(head:EnumerateEntry_10,tail:List_6) -> Option_17           
lambda872:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Option_Some_4, added to stack 0                              
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param value, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function Option_Some_4 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:159:39
    call    Option_Some_4                                                           
    add     esp,4                                                                   ; restore stack for Option_Some_4
    ; end calling function Option_Some_4                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:15:9
; function vecOf_4(v1:FilePermission_19,v2:FilePermission_19) -> Vec_9          
vecOf_4:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_111]
    push dword 12
    call malloc_0
    add esp, 8

    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 2

    push    ebx

    mov     dword ebx, [ebp+8]
    mov     dword [eax + 4], ebx
    mov     dword ebx, [ebp+12]
    mov     dword [eax + 8], ebx
    pop     ebx
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; function Vec_11_deref(address:Vec_11,descr:str)                               
Vec_11_deref:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_11                                                                   
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx]                                                            
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:422:9
; function removeFromReused_0(address:i32)                                      
removeFromReused_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    eax

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_0
    push dword [_s_105]
    call print_0
    add esp, 4

    ; call macro, calling print_3
    push dword [ebp+8]
    call print_3
    add esp, 4

    ; call macro, calling print_0
    push dword [_s_107]
    call print_0
    add esp, 4

    mov     dword eax, [ebp+8]
    ; call macro, calling print_3
    push dword [eax]
    call print_3
    add esp, 4

    pop     eax
    %endif

    mov     dword eax,[_reusable_heap_table_next]
    sub     eax,4
    mov     dword [_reusable_heap_table_next],eax

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_107]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword eax
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    cmp     dword eax,[ebp+8]
    jbe     .end

    push    ebx

    mov     dword eax,[eax]      ; the pointer to the allocation table that we want to move
    mov     dword ebx,[ebp+8]   ; the pointer to the reusable table that we want to delete
    mov     dword [ebx],eax      ; we move the pointer to the allocation table that we want to move, to the reusable table that we want to delete
    mov     dword [eax + 16],ebx ; we must update the pointer in the allocation table

    pop     ebx

.end:
    pop     eax

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:61:37
; function lambda237(b:Brick_2) -> i32                                          
lambda237:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function add_1, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function score_1, added to stack 0 + 4        
    ; adding val world                                                              
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function score_1                                                 
    mov dword [esp + 0], eax                                                        ; n1 = score_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:61:59

    mov     eax, [ebp+-4-(0)-4]
    add     eax, 10

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   


    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda1055_deref(address:i32,descr:str)                              
lambda1055_deref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:194:9
; function add_4(f1:f32,f2:f32) -> f32                                          
add_4:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fadd    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:91:8
; function readFile_0(path:str) -> str                                          
readFile_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function sysOpen_1, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val path                                                               
    ; param path, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], 0                                                          
    ; Calling function sysOpen_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:92:23
    call    sysOpen_1                                                               
    add     esp,8                                                                   ; restore stack for sysOpen_1
    ; end calling function sysOpen_1                                                
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function readFile_1, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name file                                  
    ; param file, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function readFile_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:93:13
    call    readFile_1                                                              
    add     esp,4                                                                   ; restore stack for readFile_1
    ; end calling function readFile_1                                               

    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:79            
; function lambda931() -> List_9                                                
lambda931:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val source                                                             
    ; add_lambda_param_from_lambda_space, original_param_name source, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:107:8             
; function listAppend_0(dest:List_9,source:List_9) -> List_9                    
listAppend_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 72                                                                   ; reserve stack local vals (let)

    ; calling function match_23, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val dest                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter source
    mov  dword [edx + 12], ecx                                                      ; context parameter source
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda930                                                      
    mov dword [edx + 4], lambda930_add_ref                                          
    mov dword [edx + 2 * 4], lambda930_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,56                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter source
    mov  dword [edx + 12], ecx                                                      ; context parameter source
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda931                                                      
    mov dword [edx + 4], lambda931_add_ref                                          
    mov dword [edx + 2 * 4], lambda931_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_23 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:10
    call    match_23                                                                
    add     esp,12                                                                  ; restore stack for match_23
    ; end calling function match_23                                                 

    add   esp, 72                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:50:9
; function lambda1195() -> i32                                                  
lambda1195:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 1024                                                         

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:56:5
; function isSDLNull_1(value:SDLWindow_2) -> bool                               
isSDLNull_1:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    mov dword   eax, [ebp+8]
    cmp     eax,0
    je .null
    mov dword eax, 0
    jmp .end
.null:
    mov dword eax, 1
.end:

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:269:9
; function sdlLoop_0(ctx:SDLRenderer_1,model:State_14,update:fn (Option_7,State_14) -> State_14,render:fn (SDLRenderer_1,State_14) -> ())
sdlLoop_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx
    push    ecx
    push    edx

    mov     dword edx, [ebp+12]
    mov     dword ebx, [ebp+12]
.loop:
    ; $call(printTotalMemory)
    ; $call(printAllocated)
    ; $call(printTableSlotsAllocated)
    mov     dword ecx, [ebx]
    ; call macro, calling sdlSingleLoop_0
    push dword [ebp+20]
    push dword [ebp+16]
    push dword ebx
    push dword [ebp+8]
    call sdlSingleLoop_0
    add esp, 16

    cmp     dword ebx,eax
    jne     .doRef
    ; call macro, calling println_0
    push dword [_s_77]
    call println_0
    add esp, 4

    jmp     .skipRef
.doRef:
    
    ; add ref 
    push     dword eax                                                              
    call     State_14_addRef                                                        
    add      esp,4                                                                  

    ;$call(println, "New state ")
    ;$printRef(eax:MODEL)
    cmp     ebx,[ebp+12]
    je      .skipRef
    ;$call(println, "Old state ")
    ; $printRef(ebx:MODEL)
    
    ; deref 
    push     dword ebx                                                              
    call     State_14_deref                                                         
    add      esp,4                                                                  


.skipRef:
    mov     dword edx, ebx
    mov     dword ebx, eax
    jmp     .loop

    pop     edx
    pop     ecx
    pop     ebx

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:210:4
; function writeHighScores_0(highScores:Vec_0)                                  
writeHighScores_0:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; calling function createFile_0, added to stack 0                               
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_175]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; Calling function createFile_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:211:26
    call    createFile_0                                                            
    add     esp,4                                                                   ; restore stack for createFile_0
    ; end calling function createFile_0                                             
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function forEach_1, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val highScores                                                         
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,24                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-4]                                                        ; context parameter file
    mov  dword [edx + 12], ecx                                                      ; context parameter file
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda698                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function forEach_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:213:12
    call    forEach_1                                                               
    add     esp,8                                                                   ; restore stack for forEach_1
    ; end calling function forEach_1                                                

    ; calling function close_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val file original_param_name descriptor                            
    ; param descriptor, index_relative_to_bp -1                                     
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function close_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:225:10
    call    close_0                                                                 
    add     esp,4                                                                   ; restore stack for close_0
    ; end calling function close_0                                                  


    pop eax                                                                         ; restoring return register
    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:54:12              
; function lambda819() -> Vec_0                                                 
lambda819:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Vec_1, added to stack 0                                      
    ; Calling function Vec_1 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:54:20
    call    Vec_1                                                                   
    ; end calling function Vec_1                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda919_add_ref(address:i32,descr:str)                             
lambda919_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_23(value:List_9,Full:fn (str,List_9) -> List_9,Empty:fn () -> List_9) -> List_9
match_23:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:4:16               
; function lambda1178(v1:i32) -> Vec_3                                          
lambda1178:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function map_3, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val vec2                                                               
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,40                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+12]                                                        ; context parameter v1
    mov  dword [ecx + 12], ebx                                                      ; context parameter v1
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent zipFunction
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent zipFunction
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda1180                                                     
    mov dword [ecx + 4], lambda1180_add_ref                                         
    mov dword [ecx + 2 * 4], lambda1180_deref                                       
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function map_3 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:5:12
    call    map_3                                                                   
    add     esp,8                                                                   ; restore stack for map_3
    ; end calling function map_3                                                    

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda823_deref(address:i32,descr:str)                               
lambda823_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:23:8
; function move_1(y:f32,yDir:YDirection_2,diff:f32) -> f32                      
move_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 80                                                                   ; reserve stack local vals (let)

    ; calling function match_33, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val yDir                                                               
    ; param value, index_relative_to_bp 3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter diff
    mov  dword [edx + 12], ecx                                                      ; context parameter diff
    mov  dword ecx, [ebp+8]                                                         ; context parameter y
    mov  dword [edx + 16], ecx                                                      ; context parameter y
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1209                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,60                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,80                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter diff
    mov  dword [edx + 12], ecx                                                      ; context parameter diff
    mov  dword ecx, [ebp+8]                                                         ; context parameter y
    mov  dword [edx + 16], ecx                                                      ; context parameter y
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1210                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_33 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:24:10
    call    match_33                                                                
    add     esp,12                                                                  ; restore stack for match_33
    ; end calling function match_33                                                 

    add   esp, 80                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:15:14           
; function lambda1161(v:i32) -> i32                                             
lambda1161:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val v                                                                  
    ; param v, index_relative_to_bp 3                                               
    mov dword eax, [ebp+12]                                                         

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda189_deref(address:i32,descr:str)                               
lambda189_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:83:26
; function lambda1055(brick:Brick_2) -> bool                                    
lambda1055:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function collides_1, added to stack 0                                 
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ball                                                               
    ; add_lambda_param_from_lambda_space, original_param_name ball, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val brick                                                              
    ; param brick, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function collides_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:83:45
    call    collides_1                                                              
    add     esp,8                                                                   ; restore stack for collides_1
    ; end calling function collides_1                                               

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:79            
; function lambda941() -> List_11                                               
lambda941:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val source                                                             
    ; add_lambda_param_from_lambda_space, original_param_name source, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:31:9
; function vecOf_3(v1:FileFlag_18,v2:FileFlag_18,v3:FileFlag_18) -> Vec_8       
vecOf_3:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_109]
    push dword 16
    call malloc_0
    add esp, 8

    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 3
    push    ebx
    mov     dword ebx, [ebp+8]
    mov     dword [eax + 4], ebx
    mov     dword ebx, [ebp+12]
    mov     dword [eax + 8], ebx
    mov     dword ebx, [ebp+16]
    mov     dword [eax + 12], ebx
    pop     ebx

    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; function lambda246_deref(address:i32,descr:str)                               
lambda246_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 8]                                                        
    call     Option_16_deref                                                        
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 16]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 20]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 24]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:137:8             
; function listEnumerateInternal_0(l:List_9,index:i32) -> List_6                
listEnumerateInternal_0:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)

    ; calling function match_29, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter index
    mov  dword [edx + 12], ecx                                                      ; context parameter index
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda985                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_286                                               
    mov  dword edx, static_memory_287                                               
    mov dword [edx], lambda986                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_29 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:10
    call    match_29                                                                
    add     esp,12                                                                  ; restore stack for match_29
    ; end calling function match_29                                                 

    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_5(value:i32) -> Option_14                                
Option_Some_5:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:161:8
; function lambda134(gameState:GameState_5) -> State_14                         
lambda134:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 92                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function update_2, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newKeys original_param_name keys                               
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val gameState                                                          
    ; param gameState, index_relative_to_bp 3                                       
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function update_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:162:32
    call    update_2                                                                
    add     esp,12                                                                  ; restore stack for update_2
    ; end calling function update_2                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     GameResult_4_addRef                                                    
    add      esp,4                                                                  

    ; calling function match_3, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val gameResult original_param_name value                           
    ; param value, index_relative_to_bp -1                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,24                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,48                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 24                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent highScores
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent highScores
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent newKeys
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent newKeys
    mov  dword ebx, [eax + 20]                                                      ; context parameter from parent resources
    mov  dword [ecx + 20], ebx                                                      ; context parameter from parent resources
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda151                                                      
    mov dword [ecx + 4], lambda151_add_ref                                          
    mov dword [ecx + 2 * 4], lambda151_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,68                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,92                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 24                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent highScores
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent highScores
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent newKeys
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent newKeys
    mov  dword ebx, [eax + 20]                                                      ; context parameter from parent resources
    mov  dword [ecx + 20], ebx                                                      ; context parameter from parent resources
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda152                                                      
    mov dword [ecx + 4], lambda152_add_ref                                          
    mov dword [ecx + 2 * 4], lambda152_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:163:14
    call    match_3                                                                 
    add     esp,12                                                                  ; restore stack for match_3
    ; end calling function match_3                                                  

    ; deref 
    push     dword [ebp - 4]                                                        
    call     GameResult_4_deref                                                     
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 92                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda241_deref(address:i32,descr:str)                               
lambda241_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function GameResult_4_deref(address:GameResult_4)                             
GameResult_4_deref:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    cmp dword [ebx], 1                                                              
    jne ._variant_1                                                                 
    jmp .end                                                                        
._variant_1:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:340:9
; function cmp_2(f1:f32,n2:i32) -> i32                                          
cmp_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    finit

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    ficom    dword [ebp - 4]
    fstsw   [ebp - 4]
    mov     dword eax,[ebp - 4]
    and     dword eax,0x4500    ; c0 bit 8 (0 based), c2 bit 10, c3 bit 14

    finit

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:61:68
; function lambda238() -> i32                                                   
lambda238:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function score_1, added to stack 0                                   
    ; adding val world                                                              
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function score_1                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda197_add_ref(address:i32,descr:str)                             
lambda197_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:81:8
; function GameResult_End_0(score:i32) -> GameResult_4                          
GameResult_End_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 1                                                             
    mov   ebx, [ebp+8]                                                               ; parameter score
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:4:7               
; function List_Full_3(head:EnumerateEntry_10,tail:List_6) -> List_6            
List_Full_3:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                  
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+12]                                                                ; parameter tail
    mov dword  [eax + 4], ebx                                                       
    mov   ebx, [ebp+8]                                                                ; parameter head
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:14            
; function lambda985(head:str,tail:List_9) -> List_6                            
lambda985:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_3, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function EnumerateEntry_1, added to stack 0 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val index                                                              
    ; add_lambda_param_from_lambda_space, original_param_name index, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val head                                                               
    ; param value, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function EnumerateEntry_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:54
    call    EnumerateEntry_1                                                        
    add     esp,8                                                                   ; restore stack for EnumerateEntry_1
    ; end calling function EnumerateEntry_1                                         
    mov dword [esp + 0], eax                                                        ; head = EnumerateEntry_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:54

    ; add ref 
    push     dword eax                                                              
    call     EnumerateEntry_10_addRef                                               
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function listEnumerateInternal_0, added to stack 0 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param l, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function add_1, added to stack 0 + 8 + 8
    ; adding val index                                                              
    ; add_lambda_param_from_lambda_space, original_param_name n1, lambda_space_index 1

    mov     eax, [edx + 12]
    add     eax, 1

    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; index = add_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:100
    ; Calling function listEnumerateInternal_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:90
    call    listEnumerateInternal_0                                                 
    add     esp,8                                                                   ; restore stack for listEnumerateInternal_0
    ; end calling function listEnumerateInternal_0                                  
    mov dword [esp + 4], eax                                                        ; tail = listEnumerateInternal_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:90

    ; add ref 
    push     dword eax                                                              
    call     List_6_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function List_Full_3 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:33
    call    List_Full_3                                                             
    add     esp,8                                                                   ; restore stack for List_Full_3
    ; end calling function List_Full_3                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     List_6_deref                                                           
    add      esp,4                                                                  




    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     EnumerateEntry_10_deref                                                
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Vec_11_addRef(address:Vec_11,descr:str)                              
Vec_11_addRef:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_11                                                                   
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx]                                                            
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function World_6_deref(address:World_6)                                       
World_6_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda352_add_ref(address:i32,descr:str)                             
lambda352_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Option_7_addRef(address:Option_7)                                    
Option_7_addRef:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     KeyEvent_15_addRef                                                     
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:92              
; function lambda841() -> bool                                                  
lambda841:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:486:9
; function Vec_0() -> Vec_5                                                     
Vec_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_75]
    push dword 4
    call malloc_0
    add esp, 8

    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 0
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; function lambda215_deref(address:i32,descr:str)                               
lambda215_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 4]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:240:9
; function lambda517(index:i32) -> List_9                                       
lambda517:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 48                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function substr_0, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val s                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name s, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov dword [esp + 4], 0                                                          
    ; adding val index                                                              
    ; param len, index_relative_to_bp 3                                             
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function substr_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:241:30
    call    substr_0                                                                
    add     esp,12                                                                  ; restore stack for substr_0
    ; end calling function substr_0                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     Option_13_addRef                                                       
    add      esp,4                                                                  

    ; calling function substr_0, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val s                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name s, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function add_1, added to stack 0 + 12          
    ; adding val index                                                              
    ; param n1, index_relative_to_bp 3                                              

    mov     eax, [ebp+12]
    add     eax, 1

    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; pos = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:242:42

    ; inlining function sub_0, added to stack 0 + 12          
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function sub_0, added to stack 0 + 12 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function len_0, added to stack 0 + 12 + 4 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val s                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name s, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function len_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:242:65
    call    len_0                                                                   
    add     esp,4                                                                   ; restore stack for len_0
    ; end calling function len_0                                                    
    mov dword [esp + 0], eax                                                        ; n1 = len_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:242:65
    ; adding val index                                                              
    ; param n2, index_relative_to_bp 3                                              

    mov     eax, [ebp+-4-(0 + 12 + 4)-52]
    sub     eax, [ebp+12]

    add     esp,4                                                                   ; restore stack for sub_0
    ; end inlining function sub_0                                                   
    mov dword [esp + 0], eax                                                        ; n1 = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:242:61

    mov     eax, [ebp+-4-(0 + 12)-52]
    sub     eax, 1

    add     esp,4                                                                   ; restore stack for sub_0
    ; end inlining function sub_0                                                   
    mov dword [esp + 8], eax                                                        ; len = sub_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:242:57
    ; Calling function substr_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:242:35
    call    substr_0                                                                
    add     esp,12                                                                  ; restore stack for substr_0
    ; end calling function substr_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     Option_13_addRef                                                       
    add      esp,4                                                                  

    ; calling function match_11, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val item original_param_name value                                 
    ; param value, index_relative_to_bp -1                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,28                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,48                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+-8]                                                        ; context parameter remainder
    mov  dword [ecx + 12], ebx                                                      ; context parameter remainder
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent separator
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent separator
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda526                                                      
    mov dword [ecx + 4], lambda526_add_ref                                          
    mov dword [ecx + 2 * 4], lambda526_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_212                                               
    mov  dword ecx, static_memory_213                                               
    mov dword [ecx], lambda527                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_11 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:243:18
    call    match_11                                                                
    add     esp,12                                                                  ; restore stack for match_11
    ; end calling function match_11                                                 





    ; deref 
    push     dword [ebp - 8]                                                        
    call     Option_13_deref                                                        
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_13_deref                                                        
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 48                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:5:12               
; function Pair_0(first:f32,second:XDirection_1) -> Pair_11                     
Pair_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property first
    mov   ebx, [ebp+8]                                                               
    mov dword  [eax + 0], ebx                                                       

    ; property second
    mov   ebx, [ebp+12]                                                              
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:45:9
; function lambda1190() -> i32                                                  
lambda1190:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:162:9
; function div_2(f1:f32,n2:i32) -> f32                                          
div_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fidiv    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; function lambda940_add_ref(address:i32,descr:str)                             
lambda940_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda190_deref(address:i32,descr:str)                               
lambda190_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_deref                                                      
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 8]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:8:7
; function println_1()                                                          
println_1:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register

    ; inlining function toUnit_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function println_3, added to stack 0 + 4       
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function STDOut_0, added to stack 0 + 4 + 4

    mov dword eax, 1

    ; end inlining function STDOut_0                                                
    mov dword [esp + 0], eax                                                        ; file = STDOut_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:9:19
    ; Calling function println_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:9:12
    call    println_3                                                               
    add     esp,4                                                                   ; restore stack for println_3
    ; end calling function println_3                                                
    mov dword [esp + 0], eax                                                        ; o = println_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:9:12

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    


    add     esp,4                                                                   ; restore stack for toUnit_0
    ; end inlining function toUnit_0                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  





    pop eax                                                                         ; restoring return register
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:247:25
; function lambda535() -> List_9                                                
lambda535:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function listOf_1, added to stack 0                                   
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listOf_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:247:36
    call    listOf_1                                                                
    add     esp,4                                                                   ; restore stack for listOf_1
    ; end calling function listOf_1                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:556:9
; function add_2(vec1:Vec_0,vec2:Vec_0) -> Vec_0                                
add_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    ; call macro, calling len_1
    push dword [ebp+8]
    call len_1
    add esp, 4

    mov     dword ebx, eax
    ; call macro, calling len_1
    push dword [ebp+12]
    call len_1
    add esp, 4

    add     dword eax, ebx
    push    eax                 ; the size of the new vec

    inc     eax                 ; + 1 for the size
    add     eax, eax
    add     eax, eax
    ; call macro, calling malloc_0
    push dword [_s_69]
    push dword eax
    call malloc_0
    add esp, 8

    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; call macro, calling addRef_0
    push dword [_s_71]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ecx                 ; the size of the new vec

    push    eax

    mov     dword eax, [eax]

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    mov     dword edx, ebx
    mov     dword edx, [edx]
    inc     edx
    add     edx, edx
    add     edx, edx
    ; call macro, calling memcopy_0
    push dword edx
    push dword eax
    push dword ebx
    call memcopy_0
    add esp, 12

    add     dword eax,edx

    mov     dword ebx, [ebp+12]
    mov     dword ebx, [ebx]    ; in ebx we have the address of the memory
    mov     dword edx, ebx      ;
    mov     dword edx, [edx]    ; the size of the vec
    add     dword ebx, 4        ; we skip the size
    add     edx, edx
    add     edx, edx
    ; call macro, calling memcopy_0
    push dword edx
    push dword eax
    push dword ebx
    call memcopy_0
    add esp, 12


    pop     eax
    ; call macro, calling deref_0
    push dword [_s_73]
    push dword eax
    call deref_0
    add esp, 8

    mov     dword ebx, [eax]
    mov     dword [ebx], ecx

    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda372_add_ref(address:i32,descr:str)                             
lambda372_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function List_9_deref(address:List_9)                                         
List_9_deref:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:185:70
; function lambda390(gameState:GameState_5)                                     
lambda390:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function render_2, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val gameState                                                          
    ; param gameState, index_relative_to_bp 3                                       
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function render_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:185:91
    call    render_2                                                                
    add     esp,12                                                                  ; restore stack for render_2
    ; end calling function render_2                                                 

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:185:26            
; function lambda560(head3:str,tail3:List_9) -> Option_10                       
lambda560:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Option_Some_0, added to stack 0                              
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function fun, added to stack 0 + 4             
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val head1                                                              
    ; add_lambda_param_from_lambda_space, original_param_name p_566, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val head2                                                              
    ; add_lambda_param_from_lambda_space, original_param_name p_567, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val head3                                                              
    ; param p_568, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function fun : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:186:33
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,12                                                                  ; restore stack for fun
    ; end calling function fun                                                      
    mov dword [esp + 0], eax                                                        ; value = fun : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:186:33

    ; add ref 
    push     dword eax                                                              
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function Option_Some_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:186:23
    call    Option_Some_0                                                           
    add     esp,4                                                                   ; restore stack for Option_Some_0
    ; end calling function Option_Some_0                                            

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:41
; function lambda92(score:str,sec:str,nano:str) -> HighScore_3                  
lambda92:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function HighScore_0, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function atoi_0, added to stack 0 + 8           
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val score                                                              
    ; param s, index_relative_to_bp 3                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function atoi_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:77
    call    atoi_0                                                                  
    add     esp,4                                                                   ; restore stack for atoi_0
    ; end calling function atoi_0                                                   
    mov dword [esp + 0], eax                                                        ; score = atoi_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:77

    ; calling function TimeVal_0, added to stack 0 + 8        
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function atoi_0, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val sec                                                                
    ; param s, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function atoi_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:98
    call    atoi_0                                                                  
    add     esp,4                                                                   ; restore stack for atoi_0
    ; end calling function atoi_0                                                   
    mov dword [esp + 0], eax                                                        ; sec = atoi_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:98

    ; calling function atoi_0, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val nano                                                               
    ; param s, index_relative_to_bp 5                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+20]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function atoi_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:109
    call    atoi_0                                                                  
    add     esp,4                                                                   ; restore stack for atoi_0
    ; end calling function atoi_0                                                   
    mov dword [esp + 4], eax                                                        ; nano = atoi_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:109
    ; Calling function TimeVal_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:93
    call    TimeVal_0                                                               
    add     esp,8                                                                   ; restore stack for TimeVal_0
    ; end calling function TimeVal_0                                                
    mov dword [esp + 4], eax                                                        ; time = TimeVal_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:93

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function HighScore_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:72
    call    HighScore_0                                                             
    add     esp,8                                                                   ; restore stack for HighScore_0
    ; end calling function HighScore_0                                              

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  






    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:1:8
; function fps_2(receiver:GameState_5,v:FPS_9) -> GameState_5                   
fps_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push   ebx                                                                      
    push   ecx                                                                      
    ; call macro, calling copy_0
    push dword [ebp+8]
    call copy_0
    add esp, 4
                                                           
    mov   dword ebx, [ebp+12]                                                             
    push   eax                                                                      
    mov dword eax,[eax]                                                             
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ecx                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function match_30(value:Option_14,Some:fn (i32) -> i32,None:fn () -> i32) -> i32
match_30:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function match_12(value:Option_14,Some:fn (i32) -> List_9,None:fn () -> List_9) -> List_9
match_12:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function Vec_8_deref(address:Vec_8,descr:str)                                 
Vec_8_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_8                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx]                                                            
    call     deref_0                                                                
    add      esp,8                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Option_17_addRef(address:Option_17)                                  
Option_17_addRef:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     EnumerateEntry_10_addRef                                               
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:35:27           
; function lambda973() -> Option_12                                             
lambda973:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val o1                                                                 
    ; add_lambda_param_from_lambda_space, original_param_name o1, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:85:9
; function forEach_2(vec:Vec_3,f:fn (Brick_2) -> ())                            
forEach_2:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx
    push    ecx
    push    edx
    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    mov     dword ecx, [ebx]    ; count
    add     ebx, 4  ; address of first value
    mov     edx, [ebp+12]         ; points to the lambda space
    mov     dword edx,[edx]
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    push    dword edx       ; the address to the lambda space is the last argument of every lambda
    call    [edx]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 8
    add     ebx, 4
    dec     ecx
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:446:9
; function push_0(vec:Vec_0,o:HighScore_3) -> Vec_0                             
push_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    inc     ecx               ; for the new element, now in ecx we have the new size

    mov     edx,ecx
    inc     edx               ; to store the size itself
    ; naive * 4
    add     edx, edx
    add     edx, edx
    ; now in edx we have the size, in bytes of the memory needed for the new vec
    ; call macro, calling malloc_0
    push dword [_s_123]
    push dword edx
    call malloc_0
    add esp, 8

    push    eax
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; $call(addRef, eax, "for map")
    sub     edx,4               ; the total size in bytes of the memory of old vec
    mov     dword eax, [eax]
    ; call macro, calling memcopy_0
    push dword edx
    push dword eax
    push dword ebx
    call memcopy_0
    add esp, 12


    mov      dword [eax], ecx ; the size
    add     dword eax,edx
    mov     dword edx,[ebp+12]
    mov     dword [eax],edx
    pop     eax
    ;$call(deref, eax, "for map")

    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:56:5
; function isSDLNull_0(value:SDLRenderer_1) -> bool                             
isSDLNull_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    mov dword   eax, [ebp+8]
    cmp     eax,0
    je .null
    mov dword eax, 0
    jmp .end
.null:
    mov dword eax, 1
.end:

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:6:36
; function lambda174(k:i32) -> bool                                             
lambda174:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function eq_0, added to stack 0                                      
    ; adding val k                                                                  
    ; param a, index_relative_to_bp 3                                               

    mov     eax,[ebp+12]
    cmp     eax,44
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:618:9
; function copy_2(o:Ball_7) -> Ball_7                                           
copy_2:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx

    mov     dword ebx,[ebp+8]
    mov     dword ecx,[ebx + 8] ; size
    ; call macro, calling malloc_0
    push dword [_s_141]
    push dword ecx
    call malloc_0
    add esp, 8

    ; call macro, calling memcopy_0
    push dword ecx
    push dword [eax]
    push dword [ebx]
    call memcopy_0
    add esp, 12

    ; $addRef(eax:T)
    ; $call(deref,eax:i32, "deref for clone")

    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda758_add_ref(address:i32,descr:str)                             
lambda758_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:19:8
; function flip_0(yDir:YDirection_2) -> YDirection_2                            
flip_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_27, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val yDir                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_292                                               
    mov  dword edx, static_memory_293                                               
    mov dword [edx], lambda1091                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_294                                               
    mov  dword edx, static_memory_295                                               
    mov dword [edx], lambda1092                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_27 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:20:10
    call    match_27                                                                
    add     esp,12                                                                  ; restore stack for match_27
    ; end calling function match_27                                                 

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:69             
; function lambda740() -> List_9                                                
lambda740:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_1, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val value                                                              
    ; add_lambda_param_from_lambda_space, original_param_name head, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function List_Empty_1, added to stack 0 + 8   
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_1                                            
    mov dword [esp + 4], eax                                                        ; tail = List_Empty_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:96

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:78
    call    List_Full_1                                                             
    add     esp,8                                                                   ; restore stack for List_Full_1
    ; end calling function List_Full_1                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function List_15_deref(address:List_15)                                       
List_15_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     List_15_deref                                                          
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:7:45
; function lambda1097() -> XDirection_1                                         
lambda1097:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function XDirection_Left_0, added to stack 0                         
    mov    eax, [_enum_XDirection_Left]

    ; end inlining function XDirection_Left_0                                       

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:346:9
; function addRef_0(address:i32,descr:str)                                      
addRef_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    eax
    push    ebx

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_21]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword [ebp+8]
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_25]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [ebp+12]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    %ifdef LOG_DEBUG
    push    eax
    push    ecx
    mov     dword ecx, _reusable_heap_table
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,ecx
    ; call macro, calling print_1
    push dword [_s_27]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword ebx
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     ecx
    pop     eax
    %endif

    %ifdef LOG_DEBUG
    ; we check if the address is valid
    mov     dword eax,_heap_table
    cmp     [ebp+8],eax
    jb     .invalid_address
    add     eax,[_heap_table_size]
    cmp     [ebp+8],eax
    jg      .invalid_address
    %endif

    mov     dword eax,[ebp+8]

    mov     dword ebx,[eax + 12] ; the count
    add     ebx,1

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_29]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword ebx
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword [eax + 12],ebx

    mov     dword ebx,[eax + 16]
    test    ebx,ebx                ; no reusable_table
    jz     .allocate

    ; call macro, calling removeFromReused_0
    push dword ebx
    call removeFromReused_0
    add esp, 4

    mov     dword [eax + 16],0

.allocate:
    mov     dword [eax + 4],1   ; allocated true
    jmp     .end
.invalid_address:
    ; call macro, calling invalidAddress_0

    call invalidAddress_0
    add esp, 0

.end:
    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_31]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    pop     ebx
    pop     eax

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:257:4
; function indexOf_0(list:List_6,what:str) -> Option_14                         
indexOf_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)

    ; calling function map_1, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function first_1, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function filter_3, added to stack 0 + 8 + 4
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val list                                                               
    ; param l, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter what
    mov  dword [edx + 12], ecx                                                      ; context parameter what
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda919                                                      
    mov dword [edx + 4], lambda919_add_ref                                          
    mov dword [edx + 2 * 4], lambda919_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function filter_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:259:16
    call    filter_3                                                                
    add     esp,8                                                                   ; restore stack for filter_3
    ; end calling function filter_3                                                 
    mov dword [esp + 0], eax                                                        ; list = filter_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:259:16

    ; add ref 
    push     dword eax                                                              
    call     List_6_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 40], eax                                                   
    ; Calling function first_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:260:15
    call    first_1                                                                 
    add     esp,4                                                                   ; restore stack for first_1
    ; end calling function first_1                                                  
    mov dword [esp + 0], eax                                                        ; o = first_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:260:15

    ; add ref 
    push     dword eax                                                              
    call     Option_17_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 44], eax                                                   
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_282                                               
    mov  dword edx, static_memory_283                                               
    mov dword [edx], lambda920                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function map_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:261:13
    call    map_1                                                                   
    add     esp,8                                                                   ; restore stack for map_1
    ; end calling function map_1                                                    

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 44]                                                       
    call     Option_17_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 40]                                                       
    call     List_6_deref                                                           
    add      esp,4                                                                  



    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda273_add_ref(address:i32,descr:str)                             
lambda273_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 12]                                                       
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 16]                                                       
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 20]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:67:5
; function sdlFailure_0(message:str)                                            
sdlFailure_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_GetError
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 0
    and   esp,0xfffffff0

    call SDL_GetError
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx

    ; ccall macro, calling printf
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 8
    and   esp,0xfffffff0
    mov dword ecx, eax
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword ecx, [ecx]
   mov dword [esp+0], ecx

    call printf
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx

    ; ccall macro, calling SDL_Quit
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 0
    and   esp,0xfffffff0

    call SDL_Quit
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx

    ; ccall macro, calling exit
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, 1
    mov dword [esp+0], ecx

    call exit
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda130_add_ref(address:i32,descr:str)                             
lambda130_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:158:8             
; function first_1(list:List_6) -> Option_17                                    
first_1:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_26, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val list                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_272                                               
    mov  dword edx, static_memory_273                                               
    mov dword [edx], lambda872                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_274                                               
    mov  dword edx, static_memory_275                                               
    mov dword [edx], lambda873                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_26 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:159:10
    call    match_26                                                                
    add     esp,12                                                                  ; restore stack for match_26
    ; end calling function match_26                                                 

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:147:32
; function lambda130(e:KeyEvent_15) -> Vec_5                                    
lambda130:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 84                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function key_0, added to stack 0                                     
    ; adding val e                                                                  
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function key_0                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function state_0, added to stack 0                                   
    ; adding val e                                                                  
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function state_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function match_1, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val keyState original_param_name value                             
    ; param value, index_relative_to_bp -2                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-8]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,28                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,44                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 16                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+-4]                                                        ; context parameter key
    mov  dword [ecx + 12], ebx                                                      ; context parameter key
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda138                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,64                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,84                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+-4]                                                        ; context parameter key
    mov  dword [ecx + 12], ebx                                                      ; context parameter key
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent keys
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent keys
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda139                                                      
    mov dword [ecx + 4], lambda139_add_ref                                          
    mov dword [ecx + 2 * 4], lambda139_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:151:16
    call    match_1                                                                 
    add     esp,12                                                                  ; restore stack for match_1
    ; end calling function match_1                                                  

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 84                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function List_6_addRef(address:List_6)                                        
List_6_addRef:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     List_6_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     EnumerateEntry_10_addRef                                               
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:47:32              
; function lambda815() -> Vec_0                                                 
lambda815:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function first_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val vec                                                                
    ; add_lambda_param_from_lambda_space, original_param_name vec, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function first_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:48:31
    call    first_0                                                                 
    add     esp,4                                                                   ; restore stack for first_0
    ; end calling function first_0                                                  
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     Option_10_addRef                                                       
    add      esp,4                                                                  

    ; calling function match_17, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val firstOfVec original_param_name value                           
    ; param value, index_relative_to_bp -1                                          
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,24                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,44                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent cmpFunction
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent cmpFunction
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent vec
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent vec
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda818                                                      
    mov dword [ecx + 4], lambda818_add_ref                                          
    mov dword [ecx + 2 * 4], lambda818_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_250                                               
    mov  dword ecx, static_memory_251                                               
    mov dword [ecx], lambda819                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_17 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:49:14
    call    match_17                                                                
    add     esp,12                                                                  ; restore stack for match_17
    ; end calling function match_17                                                 

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_10_deref                                                        
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function State_14_deref(address:State_14)                                     
State_14_deref:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     Stage_0_deref                                                          
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:26:8              
; function map_0(l:List_9,f:fn (str) -> List_11) -> List_15                     
map_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 36                                                                   ; reserve stack local vals (let)

    ; calling function match_14, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter f
    mov  dword [edx + 12], ecx                                                      ; context parameter f
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda758                                                      
    mov dword [edx + 4], lambda758_add_ref                                          
    mov dword [edx + 2 * 4], lambda758_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_242                                               
    mov  dword edx, static_memory_243                                               
    mov dword [edx], lambda759                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_14 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:10
    call    match_14                                                                
    add     esp,12                                                                  ; restore stack for match_14
    ; end calling function match_14                                                 

    add   esp, 36                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:133:8             
; function listEnumerate_0(l:List_9) -> List_6                                  
listEnumerate_0:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function listEnumerateInternal_0, added to stack 0                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param l, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], 0                                                          
    ; Calling function listEnumerateInternal_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:134:26
    call    listEnumerateInternal_0                                                 
    add     esp,8                                                                   ; restore stack for listEnumerateInternal_0
    ; end calling function listEnumerateInternal_0                                  

    pop     ebp                                                                     
    ret                                                                             
; function lambda1120_add_ref(address:i32,descr:str)                            
lambda1120_add_ref:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:256:9
; function filter_4(vec:Vec_10,filter:fn (EnumerateEntry_17) -> bool) -> Vec_10 
filter_4:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    push    ebx
    ; multiply ebx by 4
    shl     ebx, 2
    ; add the space for the size
    add     ebx, 4
    ; call macro, calling malloc_0
    push dword [_s_113]
    push dword ebx
    call malloc_0
    add esp, 8

    ; call macro, calling addRef_0
    push dword [_s_115]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ebx

    push    eax

    mov     dword edx, [eax]
    add     edx, 4  ; the address of the value in the new array
.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    mov     dword eax, [ecx]
    mov     dword [edx], eax
    add     edx, 4
.false:
    dec     ebx
    add     ecx, 4
    jmp     .loop
.end:
    pop     eax
    ; call macro, calling deref_0
    push dword [_s_115]
    push dword eax
    call deref_0
    add esp, 8

    sub     dword edx, [eax]
    ; divide ebx by 4, we get the len
    shr     edx, 2
    dec     edx         ; we remove 1 for the size
    mov     dword ecx, [eax]
    mov     dword [ecx], edx
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:330:8
; function freeMem_0(address:i32)                                               
freeMem_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx
    push    eax

    mov     eax, [ebp+8]
    mov     dword [eax + 4],0; allocated false
    mov     dword ebx,[_reusable_heap_table_next]
    mov     dword [eax + 16],ebx; reusable table
    mov     dword [ebx],eax
    add     ebx,4
    mov     dword [_reusable_heap_table_next],ebx

    pop     eax
    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:7:34            
; function lambda575() -> List_11                                               
lambda575:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function List_Empty_0, added to stack 0                              
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_0                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda1120_deref(address:i32,descr:str)                              
lambda1120_deref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda390_add_ref(address:i32,descr:str)                             
lambda390_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:210:9
; function sub_3(f1:f32,f2:f32) -> f32                                          
sub_3:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fsub    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; function match_21(value:Option_16,Some:fn (Brick_2) -> World_6,None:fn () -> World_6) -> World_6
match_21:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:47:9
; function toi32_1(n:f32) -> Option_14                                          
toi32_1:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    ; mantissa
    mov     dword edx, [ebp+8]
    and     dword edx, 0x7FFFFF

    mov     dword ebx, [ebp+8]
    and     dword ebx, 0x7F800000
    shr     dword ebx, 23
    ;$call(println, "exponent ", ebx)
    cmp     dword ebx, 255
    jne     .defined
.undefined:
    mov     dword eax,[_enum_Option_None]
    jmp     .end
.defined:
    cmp     dword ebx, 0
    je      .denorm
    or      dword edx,0x800000
    cmp     dword ebx, 127
    jb      .below
    sub     ebx,126
    ; call macro, calling getAligned_0
    push dword ebx
    push dword edx
    call getAligned_0
    add esp, 8

    jmp      .some
.below:
    mov     dword ecx,126
    sub     dword ecx,ebx
    shr     edx,cl
    ; call macro, calling getAligned_0
    push dword 0
    push dword edx
    call getAligned_0
    add esp, 8

    jmp     .some
.denorm:
    ; call macro, calling getAligned_0
    push dword 1
    push dword edx
    call getAligned_0
    add esp, 8

.some:
    mov     dword edx, [ebp+8]
    and     dword edx, 0x80000000
    jz      .positive
    ; call macro, calling negate_0
    push dword eax
    call negate_0
    add esp, 4

.positive:
    ; call macro, calling Option_Some_5
    push dword eax
    call Option_Some_5
    add esp, 4

.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:88:12
; function HighScore_0(score:i32,time:TimeVal_1) -> HighScore_3                 
HighScore_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property score
    mov   ebx, [ebp+8]                                                               
    mov dword  [eax + 0], ebx                                                       

    ; property time
    mov   ebx, [ebp+12]                                                                
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:339:9
; function sdlRenderTextSolid_0(font:SDLFont_4,message:str,color:SDLColor_0) -> SDLSurface_12
sdlRenderTextSolid_0:                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword edx, [ebp+16]
    mov     dword edx, [edx]

    ; call macro, calling malloc_0
    push dword [_s_149]
    push dword 5
    call malloc_0
    add esp, 8
 ; why 5???
    push    eax

    mov     ecx, [eax]
    mov     dword ebx, [edx]
    mov     byte [ecx], bl
    mov     dword ebx, [edx + 4]
    mov     byte [ecx + 1], bl
    mov     dword ebx, [edx + 8]
    mov     byte [ecx + 2], bl
    mov     dword ebx, [edx + 12]
    mov     byte [ecx + 3], bl

    ; ccall macro, calling TTF_RenderText_Solid
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 12
    and   esp,0xfffffff0
    mov dword ecx, [ecx]
    mov dword [esp+8], ecx

    mov dword ecx, [ebp+12]
    mov dword ecx, [ecx]
   mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call TTF_RenderText_Solid
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx

    pop     ecx
    ; call macro, calling freeMem_0
    push dword ecx
    call freeMem_0
    add esp, 4


    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda768_deref(address:i32,descr:str)                               
lambda768_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:180:5
; function sysRead_0(descriptor:File_6,buffer:str,size:i32)                     
sysRead_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx
    push    ecx
    push    edx

    mov     eax,  3         ; read syscall
    mov     dword ebx, [ebp+8]
    mov     dword ecx, [ebp+12]
    mov     dword ecx, [ecx]
    mov     edx,  [ebp+16]      ; bufsize
    int     80h

    pop     edx
    pop     ecx
    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:101:9
; function Stage_Menu_0(menuState:MenuState_4) -> Stage_0                       
Stage_Menu_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                           ; parameter menuState
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:93
; function lambda241() -> Vec_3                                                 
lambda241:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding let val bricks original_param_name bricks                              
    ; add_lambda_param_from_lambda_space, original_param_name bricks, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:344:4
; function someIOError_0(msg:str) -> Option_12                                  
someIOError_0:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function IOError_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val msg                                                                
    ; param message, index_relative_to_bp 2                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function IOError_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:345:24
    call    IOError_0                                                               
    add     esp,4                                                                   ; restore stack for IOError_0
    ; end calling function IOError_0                                                
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     IOError_16_addRef                                                      
    add      esp,4                                                                  

    ; calling function Option_Some_3, added to stack 0                              
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val error original_param_name value                                
    ; param value, index_relative_to_bp -1                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function Option_Some_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:346:11
    call    Option_Some_3                                                           
    add     esp,4                                                                   ; restore stack for Option_Some_3
    ; end calling function Option_Some_3                                            

    ; deref 
    push     dword [ebp - 4]                                                        
    call     IOError_16_deref                                                       
    add      esp,4                                                                  


    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:1:12
; function TimeVal_0(sec:i32,nano:i32) -> TimeVal_1                             
TimeVal_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property sec
    mov   ebx, [ebp+8]                                                                 
    mov dword  [eax + 0], ebx                                                       

    ; property nano
    mov   ebx, [ebp+12]                                                                
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:9
; function lambda350() -> Pair_11                                               
lambda350:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Pair_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function sub_2, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val rightMargin original_param_name n1                             
    ; add_lambda_param_from_lambda_space, original_param_name n1, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function sub_1, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newX original_param_name f1                                    
    ; add_lambda_param_from_lambda_space, original_param_name f1, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val rightMargin original_param_name n2                             
    ; add_lambda_param_from_lambda_space, original_param_name n2, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sub_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:43
    call    sub_1                                                                   
    add     esp,8                                                                   ; restore stack for sub_1
    ; end calling function sub_1                                                    
    mov dword [esp + 4], eax                                                        ; f2 = sub_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:43
    ; Calling function sub_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:34
    call    sub_2                                                                   
    add     esp,8                                                                   ; restore stack for sub_2
    ; end calling function sub_2                                                    
    mov dword [esp + 0], eax                                                        ; first = sub_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:34

    ; calling function flip_1, added to stack 0 + 8          
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val xDir                                                               
    ; add_lambda_param_from_lambda_space, original_param_name xDir, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function flip_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:63
    call    flip_1                                                                  
    add     esp,4                                                                   ; restore stack for flip_1
    ; end calling function flip_1                                                   
    mov dword [esp + 4], eax                                                        ; second = flip_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:63

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function Pair_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:34:18
    call    Pair_0                                                                  
    add     esp,8                                                                   ; restore stack for Pair_0
    ; end calling function Pair_0                                                   

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  





    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda273_deref(address:i32,descr:str)                               
lambda273_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 12]                                                       
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 16]                                                       
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 20]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:20:44
; function lambda1092() -> YDirection_2                                         
lambda1092:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function YDirection_Up_0, added to stack 0                           
    mov    eax, [_enum_YDirection_Up]

    ; end inlining function YDirection_Up_0                                         

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:16:8
; function println_2(file:File_6,v:i32) -> Option_12                            
println_2:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)

    ; calling function or_0, added to stack 0                                       
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function print_2, added to stack 0 + 8         
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val file                                                               
    ; param file, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val v                                                                  
    ; param n, index_relative_to_bp 3                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function print_2 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:17:10
    call    print_2                                                                 
    add     esp,8                                                                   ; restore stack for print_2
    ; end calling function print_2                                                  
    mov dword [esp + 0], eax                                                        ; o = print_2 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:17:10

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function println_3, added to stack 0 + 8       
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val file                                                               
    ; param file, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function println_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:18:16
    call    println_3                                                               
    add     esp,4                                                                   ; restore stack for println_3
    ; end calling function println_3                                                
    mov dword [esp + 4], eax                                                        ; o1 = println_3 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:18:16

    ; add ref 
    push     dword eax                                                              
    call     Option_12_addRef                                                       
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function or_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:18:8
    call    or_0                                                                    
    add     esp,8                                                                   ; restore stack for or_0
    ; end calling function or_0                                                     

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  



    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Vec_7_addRef(address:Vec_7,descr:str)                                
Vec_7_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_7                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx]                                                            
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_8(value:List_9,Full:fn (str,List_9) -> Option_10,Empty:fn () -> Option_10) -> Option_10
match_8:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:101:5
; function getAligned_0(alignedMantissa:i32,intNumbersCount:i32) -> i32         
getAligned_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ecx

    mov     dword ecx, 24
    sub     dword ecx, [ebp+12]
    mov     dword eax, [ebp+8]
    shr     dword eax, cl

    pop     ecx

    pop     ebp                                                                     
    ret                                                                             
; function lambda130_deref(address:i32,descr:str)                               
lambda130_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda238_add_ref(address:i32,descr:str)                             
lambda238_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     World_6_addRef                                                         
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda526_deref(address:i32,descr:str)                               
lambda526_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Option_13_deref                                                        
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:33:5
; function countBits_0(n:i32) -> i32                                            
countBits_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    mov     dword eax,0
    mov     dword ebx,[ebp+8]
.loop:
    cmp     dword ebx,0
    jz      .end
    shr     ebx,1
    inc     eax
    jmp     .loop
.end:
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; function Option_16_deref(address:Option_16)                                   
Option_16_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     Brick_2_deref                                                          
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_5_addRef(address:Vec_5,descr:str)                                
Vec_5_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_5                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:307:9
; function sdlTTFInit_0() -> i32                                                
sdlTTFInit_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; ccall macro, calling TTF_Init
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 0
    and   esp,0xfffffff0

    call TTF_Init
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx


    pop     ebp                                                                     
    ret                                                                             
; function match_2(value:Option_7,Some:fn (KeyEvent_15) -> Vec_5,None:fn () -> Vec_5) -> Vec_5
match_2:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:93              
; function lambda859() -> bool                                                  
lambda859:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 1                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:618:9
; function copy_1(o:FPS_9) -> FPS_9                                             
copy_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx

    mov     dword ebx,[ebp+8]
    mov     dword ecx,[ebx + 8] ; size
    ; call macro, calling malloc_0
    push dword [_s_141]
    push dword ecx
    call malloc_0
    add esp, 8

    ; call macro, calling memcopy_0
    push dword ecx
    push dword [eax]
    push dword [ebx]
    call memcopy_0
    add esp, 12

    ; $addRef(eax:T)
    ; $call(deref,eax:i32, "deref for clone")

    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:130:8             
; function lambda675() -> List_6                                                
lambda675:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function List_Empty_3, added to stack 0                              
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_3                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function List_6_deref(address:List_6)                                         
List_6_deref:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; deref 
    push     dword [ebx + 4]                                                        
    call     List_6_deref                                                           
    add      esp,4                                                                  



    ; deref 
    push     dword [ebx + 8]                                                        
    call     EnumerateEntry_10_deref                                                
    add      esp,4                                                                  


    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda237_add_ref(address:i32,descr:str)                             
lambda237_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     World_6_addRef                                                         
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:165:12
; function lambda152(score:i32) -> State_14                                     
lambda152:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 12                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function addScore_0, added to stack 0                                 
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val highScores original_param_name highScores                      
    ; add_lambda_param_from_lambda_space, original_param_name highScores, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val score                                                              
    ; param score, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function addScore_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:166:41
    call    addScore_0                                                              
    add     esp,8                                                                   ; restore stack for addScore_0
    ; end calling function addScore_0                                               
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function writeHighScores_0, added to stack 0                          
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val newHighScores original_param_name highScores                   
    ; param highScores, index_relative_to_bp -1                                     
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function writeHighScores_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:167:28
    call    writeHighScores_0                                                       
    add     esp,4                                                                   ; restore stack for writeHighScores_0
    ; end calling function writeHighScores_0                                        

    ; calling function State_0, added to stack 0                                    
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding let val resources original_param_name resources                        
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newKeys original_param_name keys                               
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function Stage_Menu_0, added to stack 0 + 16    
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function MenuState_0, added to stack 0 + 16 + 4
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val newHighScores original_param_name highScores                   
    ; param highScores, index_relative_to_bp -1                                     
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function MenuState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:168:60
    call    MenuState_0                                                             
    add     esp,4                                                                   ; restore stack for MenuState_0
    ; end calling function MenuState_0                                              
    mov dword [esp + 0], eax                                                        ; menuState = MenuState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:168:60

    ; add ref 
    push     dword eax                                                              
    call     MenuState_4_addRef                                                     
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function Stage_Menu_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:168:44
    call    Stage_Menu_0                                                            
    add     esp,4                                                                   ; restore stack for Stage_Menu_0
    ; end calling function Stage_Menu_0                                             
    mov dword [esp + 8], eax                                                        ; stage = Stage_Menu_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:168:44

    ; add ref 
    push     dword eax                                                              
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    ; adding let val newHighScores original_param_name highScores                   
    ; param highScores, index_relative_to_bp -1                                     
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 16], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function State_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:168:18
    call    State_0                                                                 
    add     esp,16                                                                  ; restore stack for State_0
    ; end calling function State_0                                                  

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 12]                                                       
    call     Stage_0_deref                                                          
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     MenuState_4_deref                                                      
    add      esp,4                                                                  



    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 12                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:101:14            
; function lambda780(head:List_11,tail:List_15) -> List_11                      
lambda780:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function listAppend_1, added to stack 0                               
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param dest, index_relative_to_bp 3                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function flatten_0, added to stack 0 + 8       
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param l, index_relative_to_bp 4                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function flatten_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:102:33
    call    flatten_0                                                               
    add     esp,4                                                                   ; restore stack for flatten_0
    ; end calling function flatten_0                                                
    mov dword [esp + 4], eax                                                        ; source = flatten_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:102:33

    ; add ref 
    push     dword eax                                                              
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function listAppend_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:102:19
    call    listAppend_1                                                            
    add     esp,8                                                                   ; restore stack for listAppend_1
    ; end calling function listAppend_1                                             

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function KeyEvent_15_deref(address:KeyEvent_15)                               
KeyEvent_15_deref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:190:9
; function addStaticStringToHeap_0(s:i32) -> i32                                
addStaticStringToHeap_0:                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    ; we can't print here
    ; mov     dword eax,[_heap_table_next]; the pointer to the heap table
    ; mov     dword edx,[_heap_table_size]
    ; add     edx,_heap_table
    ; cmp     eax,edx
    ; jb     .ok
    ; $call(println, "Out of heap space")
    ; $call(exitMain, 1)

.ok:
    mov     dword eax,[_heap_table_next]

    mov     dword ecx,[ebp+8]
    mov     dword [eax],ecx
    mov     dword [eax + 5 * 4],0 ; to be sure that the next slot is considered free

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 8], 0      ; size
    mov     dword [eax + 12], 1     ; count
    mov     dword [eax + 16], 0     ; reusable table
    add     eax, 20
    mov     [_heap_table_next],eax
    sub     eax, 20

.end:
    pop     edx
    pop     ecx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:49:8
; function collides_1(ball:Ball_7,brick:Brick_2) -> bool                        
collides_1:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; inlining function x_2, added to stack 0                                       
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_2                                                     
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function y_1, added to stack 0                                       
    ; adding val brick                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_1                                                     
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function and_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function greater_1, added to stack 0 + 8      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_3, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; f1 = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:23
    push eax                                                                        
    mov dword eax, [const_13]                                                       ; static BALLSIZE
    mov dword [esp + 8], eax                                                        ; static BALLSIZE
    pop eax                                                                         
    ; Calling function add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:27
    call    add_3                                                                   
    add     esp,8                                                                   ; restore stack for add_3
    ; end calling function add_3                                                    
    mov dword [esp + 0], eax                                                        ; f1 = add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:27
    ; adding let val bx original_param_name n2                                      
    ; param n2, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:45
    call    greater_1                                                               
    add     esp,8                                                                   ; restore stack for greater_1
    ; end calling function greater_1                                                
    mov dword [esp + 0], eax                                                        ; a = greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:45

    ; calling function less_3, added to stack 0 + 8         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; f1 = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:60

    ; inlining function add_1, added to stack 0 + 8 + 8
    ; adding let val bx original_param_name n1                                      
    ; param n1, index_relative_to_bp -1                                             

    mov     eax, [ebp+-4]
    add     eax, [const_8]

    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; n2 = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:72
    ; Calling function less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:65
    call    less_3                                                                  
    add     esp,8                                                                   ; restore stack for less_3
    ; end calling function less_3                                                   
    mov dword [esp + 4], eax                                                        ; b = less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:53:65

    mov     eax,[ebp+-8-(0)-16]
    and     dword eax,[ebp+-4-(0)-16]

    add     esp,8                                                                   ; restore stack for and_0
    ; end inlining function and_0                                                   
    mov dword [ebp + -12], eax                                                      ; 

    ; inlining function and_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function greater_1, added to stack 0 + 8      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function add_3, added to stack 0 + 8 + 8
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 8 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; f1 = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:23
    push eax                                                                        
    mov dword eax, [const_13]                                                       ; static BALLSIZE
    mov dword [esp + 8], eax                                                        ; static BALLSIZE
    pop eax                                                                         
    ; Calling function add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:27
    call    add_3                                                                   
    add     esp,8                                                                   ; restore stack for add_3
    ; end calling function add_3                                                    
    mov dword [esp + 0], eax                                                        ; f1 = add_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:27
    ; adding let val by original_param_name n2                                      
    ; param n2, index_relative_to_bp -2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:45
    call    greater_1                                                               
    add     esp,8                                                                   ; restore stack for greater_1
    ; end calling function greater_1                                                
    mov dword [esp + 0], eax                                                        ; a = greater_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:45

    ; calling function less_3, added to stack 0 + 8         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 8 + 8
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; f1 = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:60

    ; inlining function add_1, added to stack 0 + 8 + 8
    ; adding let val by original_param_name n1                                      
    ; param n1, index_relative_to_bp -2                                             

    mov     eax, [ebp+-8]
    add     eax, [const_9]

    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; n2 = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:72
    ; Calling function less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:65
    call    less_3                                                                  
    add     esp,8                                                                   ; restore stack for less_3
    ; end calling function less_3                                                   
    mov dword [esp + 4], eax                                                        ; b = less_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:54:65

    mov     eax,[ebp+-8-(0)-16]
    and     dword eax,[ebp+-4-(0)-16]

    add     esp,8                                                                   ; restore stack for and_0
    ; end inlining function and_0                                                   
    mov dword [ebp + -16], eax                                                      ; 

    ; inlining function and_0, added to stack 0                                     
    ; adding let val xColl original_param_name a                                    
    ; param a, index_relative_to_bp -3                                              
    ; adding let val yColl original_param_name b                                    
    ; param b, index_relative_to_bp -4                                              

    mov     eax,[ebp+-12]
    and     dword eax,[ebp+-16]

    ; end inlining function and_0                                                   













    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:197:8
; function close_0(descriptor:File_6)                                           
close_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function sysClose_0, added to stack 0                                 
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val descriptor                                                         
    ; param descriptor, index_relative_to_bp 2                                      
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sysClose_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:198:13
    call    sysClose_0                                                              
    add     esp,4                                                                   ; restore stack for sysClose_0
    ; end calling function sysClose_0                                               


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda131_add_ref(address:i32,descr:str)                             
lambda131_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda237_deref(address:i32,descr:str)                               
lambda237_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_32(value:XDirection_1,Left:fn () -> XDirection_1,Right:fn () -> XDirection_1) -> XDirection_1
match_32:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_101]
    push dword 1
    call print_1
    add esp, 8
                       
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:1:8
; function GameState_0(stage:GameStage_0,world:World_6,fps:FPS_9) -> GameState_5
GameState_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property stage
    mov   ebx, [ebp+8]                                                               
    mov dword  [eax + 0], ebx                                                       

    ; property world
    mov   ebx, [ebp+12]                                                               
    mov dword  [eax + 4], ebx                                                       

    ; property fps
    mov   ebx, [ebp+16]                                                                 
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:33              
; function lambda825(v:HighScore_3) -> bool                                     
lambda825:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_16, added to stack 0                                   
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; calling function cmpFunction, added to stack 0 + 16     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param p_845, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name p_846, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function cmpFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:57
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,8                                                                   ; restore stack for cmpFunction
    ; end calling function cmpFunction                                              
    mov dword [esp + 0], eax                                                        ; value = cmpFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_258                                               
    mov  dword ecx, static_memory_259                                               
    mov dword [ecx], lambda848                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_260                                               
    mov  dword ecx, static_memory_261                                               
    mov dword [ecx], lambda849                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_262                                               
    mov  dword ecx, static_memory_263                                               
    mov dword [ecx], lambda850                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 16], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_16 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:45
    call    match_16                                                                
    add     esp,16                                                                  ; restore stack for match_16
    ; end calling function match_16                                                 

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:147:9
; function map_3(vec:Vec_5,f:fn (i32) -> Brick_2) -> Vec_3                      
map_3:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    push    ecx
    inc     ecx                 ; + 1 for the size
    add     ecx, ecx
    add     ecx, ecx
    ; call macro, calling malloc_0
    push dword [_s_127]
    push dword ecx
    call malloc_0
    add esp, 8

    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; call macro, calling addRef_0
    push dword [_s_129]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ecx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], ecx
    mov     edx, eax
    add     edx, 4          ; address of first value to write
    add     ebx, 4          ; address of first value to read
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    
    ; add ref 
    push     dword eax                                                              
    call     Brick_2_addRef                                                         
    add      esp,4                                                                  

    mov     dword [edx], eax
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    
    ; deref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:113:9
; function vecRange_0(start:i32,end:i32) -> Vec_5                               
vecRange_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, [ebp+12]
    sub     dword ebx, [ebp+8]
    push    ebx                 ; the size
    inc     ebx                 ; + 1 for the size
    add     ebx, ebx
    add     ebx, ebx
    ; call macro, calling malloc_0
    push dword [_s_143]
    push dword ebx
    call malloc_0
    add esp, 8

    pop     ebx
    push    eax
    mov     dword ecx, [eax]
    mov     dword [ecx], ebx    ; the size
    add     ecx, 4              ; the pointer to the next value
    mov     dword edx, 0        ; the actual value
.loop:
    cmp     dword ebx, 0
    jz      .end
    mov     dword [ecx], edx

    add     ecx, 4
    dec     ebx
    inc     edx
    jmp     .loop
.end:
    pop     eax
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:244:17
; function lambda526(f:str) -> List_9                                           
lambda526:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 76                                                                   ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_11, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val remainder original_param_name value                            
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,40                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 20                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+12]                                                        ; context parameter f
    mov  dword [ecx + 12], ebx                                                      ; context parameter f
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent separator
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent separator
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda534                                                      
    mov dword [ecx + 4], lambda534_add_ref                                          
    mov dword [ecx + 2 * 4], lambda534_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,60                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,76                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 16                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    mov  dword ebx, [ebp+12]                                                        ; context parameter f
    mov  dword [ecx + 12], ebx                                                      ; context parameter f
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda535                                                      
    mov dword [ecx + 4], lambda535_add_ref                                          
    mov dword [ecx + 2 * 4], lambda535_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_11 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:245:26
    call    match_11                                                                
    add     esp,12                                                                  ; restore stack for match_11
    ; end calling function match_11                                                 

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 76                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda680_deref(address:i32,descr:str)                               
lambda680_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     List_6_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:11:17
; function lambda1204() -> f32                                                  
lambda1204:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function sub_3, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val x                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f1, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val diff                                                               
    ; add_lambda_param_from_lambda_space, original_param_name f2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sub_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:11:25
    call    sub_3                                                                   
    add     esp,8                                                                   ; restore stack for sub_3
    ; end calling function sub_3                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:1:12
; function frameCount_1(receiver:FPS_9,v:i32) -> FPS_9                          
frameCount_1:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push   ebx                                                                      
    push   ecx                                                                      
    ; call macro, calling copy_1
    push dword [ebp+8]
    call copy_1
    add esp, 4
                                                           
    mov   dword ebx, [ebp+12]                                                             
    push   eax                                                                      
    mov dword eax,[eax]                                                             
    mov dword  [eax + 0], ebx                                                       
    pop   eax                                                                       
    pop   ecx                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:7:12
; function World_0(bricks:Vec_3,ball:Ball_7,bar:Bar_8,score:i32,lives:i32) -> World_6
World_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 20
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property bricks
    mov   ebx, [ebp+8]                                                              
    mov dword  [eax + 0], ebx                                                       

    ; property ball
    mov   ebx, [ebp+12]                                                                
    mov dword  [eax + 4], ebx                                                       

    ; property bar
    mov   ebx, [ebp+16]                                                                 
    mov dword  [eax + 8], ebx                                                       

    ; property score
    mov   ebx, [ebp+20]                                                               
    mov dword  [eax + 12], ebx                                                      

    ; property lives
    mov   ebx, [ebp+24]                                                               
    mov dword  [eax + 16], ebx                                                      
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function lambda534_deref(address:i32,descr:str)                               
lambda534_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:168:9
; function eq_3(s1:str,s2:str) -> bool                                          
eq_3:                                                                           
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push   ebx
    push   ecx

    mov    eax, 1
    mov    ebx, [ebp+8]
    mov    dword ebx, [ebx]
    mov    ecx, [ebp+12]
    mov    dword ecx, [ecx]

.loop:
    mov    dl,[ebx]
    cmp    byte [ecx],dl
    jne    .false
    cmp    byte [ecx],0
    je     .end
    add     ebx,1
    add     ecx,1
    jmp    .loop

.false:
    mov     eax,0
.end:
    pop   ecx
    pop   ebx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:65              
; function lambda857() -> bool                                                  
lambda857:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda412_deref(address:i32,descr:str)                               
lambda412_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 4]                                                        
    call     Option_10_deref                                                        
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda427_deref(address:i32,descr:str)                               
lambda427_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_0_addRef(address:Vec_0,descr:str)                                
Vec_0_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_0                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; add ref 
    push     dword [ebx]                                                            
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  

    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:188:12            
; function lambda555() -> Option_10                                             
lambda555:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function Option_None_0, added to stack 0                             
    mov    eax, [_enum_Option_None]

    ; end inlining function Option_None_0                                           

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda133_deref(address:i32,descr:str)                               
lambda133_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/brick.rasm:1:12
; function Brick_0(x:i32,y:i32,color:SDLColor_0) -> Brick_2                     
Brick_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property x
    mov   ebx, [ebp+8]                                                                   
    mov dword  [eax + 0], ebx                                                       

    ; property y
    mov   ebx, [ebp+12]                                                                   
    mov dword  [eax + 4], ebx                                                       

    ; property color
    mov   ebx, [ebp+16]                                                               
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:41:8
; function less_0(t1:TimeVal_1,t2:TimeVal_1) -> bool                            
less_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; inlining function sec_0, added to stack 0                                     
    ; adding val t1                                                                 
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function sec_0                                                   
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function nano_0, added to stack 0                                    
    ; adding val t1                                                                 
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function nano_0                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function sec_0, added to stack 0                                     
    ; adding val t2                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function sec_0                                                   
    mov dword [ebp + -12], eax                                                      ; 

    ; inlining function nano_0, added to stack 0                                    
    ; adding val t2                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function nano_0                                                  
    mov dword [ebp + -16], eax                                                      ; 

    ; inlining function if_14, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function less_1, added to stack 0 + 8        
    ; adding let val sec1 original_param_name a                                     
    ; param a, index_relative_to_bp -1                                              
    ; adding let val sec2 original_param_name b                                     
    ; param b, index_relative_to_bp -3                                              

    mov     eax,[ebp+-4]
    cmp     eax,[ebp+-12]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    ; end inlining function less_1                                                  
    mov dword [esp + 0], eax                                                        ; cond = less_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:48:12

    ; inlining function if_14, added to stack 0 + 8         
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 8 + 8
    ; adding let val sec1 original_param_name a                                     
    ; param a, index_relative_to_bp -1                                              
    ; adding let val sec2 original_param_name b                                     
    ; param b, index_relative_to_bp -3                                              

    mov     eax,[ebp+-4]
    cmp     eax,[ebp+-12]
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:48:37

    ; inlining function less_1, added to stack 0 + 8 + 8
    ; adding let val nano1 original_param_name a                                    
    ; param a, index_relative_to_bp -2                                              
    ; adding let val nano2 original_param_name b                                    
    ; param b, index_relative_to_bp -4                                              

    mov     eax,[ebp+-8]
    cmp     eax,[ebp+-16]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    ; end inlining function less_1                                                  
    mov dword [esp + 4], eax                                                        ; trueVal = less_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:48:55

    push  ebx
    push  edx

    mov   dword eax, [ebp+-8-(0 + 8)-16]
    imul  dword eax, [ebp+-4-(0 + 8)-16]
    mov   dword ebx, [ebp+-8-(0 + 8)-16]
    xor   dword ebx, 1
    imul  dword ebx, 0
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,8                                                                   ; restore stack for if_14
    ; end inlining function if_14                                                   
    mov dword [esp + 4], eax                                                        ; falseVal = if_14 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:48:34

    push  ebx
    push  edx

    mov   dword eax, [ebp+-8-(0)-16]
    imul  dword eax, 1
    mov   dword ebx, [ebp+-8-(0)-16]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+-4-(0)-16]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,8                                                                   ; restore stack for if_14
    ; end inlining function if_14                                                   





    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda554_deref(address:i32,descr:str)                               
lambda554_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:1:12
; function yDir_1(receiver:Ball_7,v:YDirection_2) -> Ball_7                     
yDir_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push   ebx                                                                      
    push   ecx                                                                      
    ; call macro, calling copy_2
    push dword [ebp+8]
    call copy_2
    add esp, 4
                                                           
    mov   dword ebx, [ebp+12]                                                             
    push   eax                                                                      
    mov dword eax,[eax]                                                             
    mov dword  [eax + 12], ebx                                                      
    pop   eax                                                                       
    pop   ecx                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function Vec_9_deref(address:Vec_9,descr:str)                                 
Vec_9_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_9                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx]                                                            
    call     deref_0                                                                
    add      esp,8                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_28(value:Option_17,Some:fn (EnumerateEntry_10) -> Option_14,None:fn () -> Option_14) -> Option_14
match_28:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function lambda390_deref(address:i32,descr:str)                               
lambda390_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Ball_7_addRef(address:Ball_7)                                        
Ball_7_addRef:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 12]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 16]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda941_add_ref(address:i32,descr:str)                             
lambda941_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     List_11_addRef                                                         
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_1(value:str) -> Option_13                                
Option_Some_1:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function World_6_addRef(address:World_6)                                      
World_6_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda289_add_ref(address:i32,descr:str)                             
lambda289_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda152_deref(address:i32,descr:str)                               
lambda152_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:264:8
; function print_1(file:File_6,s:str) -> Option_12                              
print_1:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx

    ; call macro, calling slen_0
    push dword [ebp+12]
    call slen_0
    add esp, 4

    mov     ebx, eax
    mov     eax, [ebp+12]

    ; call macro, calling sysPrint_0
    push dword ebx
    push dword [eax]
    push dword [ebp+8]
    call sysPrint_0
    add esp, 12


    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_0(value:HighScore_3) -> Option_10                        
Option_Some_0:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:147:9
; function map_4(vec:Vec_5,f:fn (i32) -> Vec_3) -> Vec_11                       
map_4:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    push    ecx
    inc     ecx                 ; + 1 for the size
    add     ecx, ecx
    add     ecx, ecx
    ; call macro, calling malloc_0
    push dword [_s_127]
    push dword ecx
    call malloc_0
    add esp, 8

    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; call macro, calling addRef_0
    push dword [_s_129]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ecx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], ecx
    mov     edx, eax
    add     edx, 4          ; address of first value to write
    add     ebx, 4          ; address of first value to read
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    
    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    mov     dword [edx], eax
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    
    ; deref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_11_deref                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:311:9
; function sdlOpenFont_0(file:str,size:i32) -> SDLFont_4                        
sdlOpenFont_0:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; ccall macro, calling TTF_OpenFont
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 8
    and   esp,0xfffffff0
    mov dword ecx, [ebp+12]
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword ecx, [ecx]
   mov dword [esp+0], ecx

    call TTF_OpenFont
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx


    pop     ebp                                                                     
    ret                                                                             
; function lambda246_add_ref(address:i32,descr:str)                             
lambda246_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     Option_16_addRef                                                       
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 16]                                                       
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 20]                                                       
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 24]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:381:8
; function createSDLText_0(ren:SDLRenderer_1,font:SDLFont_4,text:str,color:SDLColor_0) -> SDLText_18
createSDLText_0:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)

    ; calling function sdlRenderTextSolid_0, added to stack 0                       
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val font                                                               
    ; param font, index_relative_to_bp 3                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val text                                                               
    ; param message, index_relative_to_bp 4                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val color                                                              
    ; param color, index_relative_to_bp 5                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+20]                                                        
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlRenderTextSolid_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:382:37
    call    sdlRenderTextSolid_0                                                    
    add     esp,12                                                                  ; restore stack for sdlRenderTextSolid_0
    ; end calling function sdlRenderTextSolid_0                                     
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function sdlCreateTextureFromSurface_0, added to stack 0              
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ren                                                                
    ; param ren, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val surface original_param_name surface                            
    ; param surface, index_relative_to_bp -1                                        
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function sdlCreateTextureFromSurface_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:383:46
    call    sdlCreateTextureFromSurface_0                                           
    add     esp,8                                                                   ; restore stack for sdlCreateTextureFromSurface_0
    ; end calling function sdlCreateTextureFromSurface_0                            
    mov dword [ebp + -8], eax                                                       ; 

    ; calling function SDLText_0, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val surface original_param_name surface                            
    ; param surface, index_relative_to_bp -1                                        
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val texture original_param_name texture                            
    ; param texture, index_relative_to_bp -2                                        
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function SDLText_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:385:12
    call    SDLText_0                                                               
    add     esp,8                                                                   ; restore stack for SDLText_0
    ; end calling function SDLText_0                                                

    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_10_addRef(address:EnumerateEntry_10)                  
EnumerateEntry_10_addRef:                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda973_deref(address:i32,descr:str)                               
lambda973_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:253:9
; function lambda518() -> List_9                                                
lambda518:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function listOf_1, added to stack 0                                   
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val s                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listOf_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:253:20
    call    listOf_1                                                                
    add     esp,4                                                                   ; restore stack for listOf_1
    ; end calling function listOf_1                                                 

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:80:9
; function GameResult_Play_0(state:GameState_5) -> GameResult_4                 
GameResult_Play_0:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter state
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function Pair_11_deref(address:Pair_11)                                       
Pair_11_deref:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda310_deref(address:i32,descr:str)                               
lambda310_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Bar_8_deref                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:11:29
; function lambda306(k:i32) -> bool                                             
lambda306:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function eq_0, added to stack 0                                      
    ; adding val k                                                                  
    ; param a, index_relative_to_bp 3                                               

    mov     eax,[ebp+12]
    cmp     eax,79
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function match_0(value:Stage_0,Menu:fn (MenuState_4) -> (),Game:fn (GameState_5) -> ())
match_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param menuState                                                               
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param gameState                                                               
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_83]
    push dword 1
    call print_1
    add esp, 8
                            
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda255_add_ref(address:i32,descr:str)                             
lambda255_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Brick_2_addRef                                                         
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda518_deref(address:i32,descr:str)                               
lambda518_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda310_add_ref(address:i32,descr:str)                             
lambda310_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda815_add_ref(address:i32,descr:str)                             
lambda815_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Ball_7_deref(address:Ball_7)                                         
Ball_7_deref:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 16]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda919_deref(address:i32,descr:str)                               
lambda919_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:138:117           
; function lambda986() -> List_6                                                
lambda986:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function List_Empty_3, added to stack 0                              
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_3                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:77:31              
; function lambda864(e:EnumerateEntry_17) -> bool                               
lambda864:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function less_1, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function index_0, added to stack 0 + 4        
    ; adding val e                                                                  
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function index_0                                                 
    mov dword [esp + 0], eax                                                        ; a = index_0 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:77:48
    ; adding val count                                                              
    ; add_lambda_param_from_lambda_space, original_param_name b, lambda_space_index 1

    mov     eax,[ebp+-4-(0)-4]
    cmp     eax,[edx + 12]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    add     esp,4                                                                   ; restore stack for less_1
    ; end inlining function less_1                                                  


    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda1180_deref(address:i32,descr:str)                              
lambda1180_deref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 4]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:176:4
; function sysOpen_1(path:str,flags:i32) -> File_6                              
sysOpen_1:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function sysOpen_0, added to stack 0                                  
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val path                                                               
    ; param path, index_relative_to_bp 2                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val flags                                                              
    ; param flags, index_relative_to_bp 3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 8], 0                                                          
    ; Calling function sysOpen_0 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:177:12
    call    sysOpen_0                                                               
    add     esp,12                                                                  ; restore stack for sysOpen_0
    ; end calling function sysOpen_0                                                

    pop     ebp                                                                     
    ret                                                                             
; function lambda890_add_ref(address:i32,descr:str)                             
lambda890_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda535_add_ref(address:i32,descr:str)                             
lambda535_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:178:9
; function divf_0(n1:i32,n2:i32) -> f32                                         
divf_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fild    dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fidiv    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:5:8
; function update_1(resources:Resources_13,keys:Vec_5,menuState:MenuState_4) -> Stage_0
update_1:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 40                                                                   ; reserve stack local vals (let)

    ; calling function count_0, added to stack 0                                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val keys                                                               
    ; param vec, index_relative_to_bp 3                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_186                                               
    mov  dword edx, static_memory_187                                               
    mov dword [edx], lambda174                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function count_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:6:29
    call    count_0                                                                 
    add     esp,8                                                                   ; restore stack for count_0
    ; end calling function count_0                                                  
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function if_4, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 12           
    ; adding let val spacePressed original_param_name a                             
    ; param a, index_relative_to_bp -1                                              

    mov     eax,[ebp+-4]
    cmp     eax,0
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:8:10
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,24                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter menuState
    mov  dword [edx + 12], ecx                                                      ; context parameter menuState
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda177                                                      
    mov dword [edx + 4], lambda177_add_ref                                          
    mov dword [edx + 2 * 4], lambda177_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_188                                               
    mov  dword edx, static_memory_189                                               
    mov dword [edx], lambda178                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-40]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-40]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-40]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_4
    ; end inlining function if_4                                                    


    add   esp, 40                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:24:39
; function lambda1210() -> f32                                                  
lambda1210:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function add_4, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val y                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f1, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val diff                                                               
    ; add_lambda_param_from_lambda_space, original_param_name f2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function add_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:24:47
    call    add_4                                                                   
    add     esp,8                                                                   ; restore stack for add_4
    ; end calling function add_4                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:253:4
; function sdlSingleLoop_0(ctx:SDLRenderer_1,model:State_14,updateFun:fn (Option_7,State_14) -> State_14,renderFun:fn (SDLRenderer_1,State_14) -> ()) -> State_14
sdlSingleLoop_0:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)

    ; calling function keyEvent_0, added to stack 0                                 
    ; Calling function keyEvent_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:256:25
    call    keyEvent_0                                                              
    ; end calling function keyEvent_0                                               
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     Option_7_addRef                                                        
    add      esp,4                                                                  

    ; calling function match_5, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val event original_param_name value                                
    ; param value, index_relative_to_bp -1                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_234                                               
    mov  dword edx, static_memory_235                                               
    mov dword [edx], lambda720                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_236                                               
    mov  dword edx, static_memory_237                                               
    mov dword [edx], lambda721                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_5 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:258:10
    call    match_5                                                                 
    add     esp,12                                                                  ; restore stack for match_5
    ; end calling function match_5                                                  

    ; calling function updateFun, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val event original_param_name p_722                                
    ; param p_722, index_relative_to_bp -1                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val model                                                              
    ; param p_723, index_relative_to_bp 3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; calling lambda parameter reference to updateFun                               
    mov eax, [ebp + 16]                                                             
    mov dword eax, [eax]                                                            
    ; Calling function updateFun : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:263:29
    ; address to the "lambda space"                                                 
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,8                                                                   ; restore stack for updateFun
    ; end calling function updateFun                                                
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     State_14_addRef                                                        
    add      esp,4                                                                  

    ; calling function renderFun, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ctx                                                                
    ; param p_725, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val newModel original_param_name p_726                             
    ; param p_726, index_relative_to_bp -2                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-8]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; calling lambda parameter reference to renderFun                               
    mov eax, [ebp + 20]                                                             
    mov dword eax, [eax]                                                            
    ; Calling function renderFun : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:264:14
    ; address to the "lambda space"                                                 
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,8                                                                   ; restore stack for renderFun
    ; end calling function renderFun                                                
    ; adding let val newModel original_param_name newModel                          
    ; param newModel, index_relative_to_bp -2                                       
    mov dword eax, [ebp+-8]                                                         

    ; deref 
    push     dword [ebp - 8]                                                        
    call     State_14_deref                                                         
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 4]                                                        
    call     Option_7_deref                                                         
    add      esp,4                                                                  


    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda449_add_ref(address:i32,descr:str)                             
lambda449_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda131_deref(address:i32,descr:str)                               
lambda131_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/math.rasm:9:8               
; function between_0(actual:i32,minValue:i32,maxValue:i32) -> i32               
between_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)

    ; inlining function greater_0, added to stack 0                                 
    ; adding val actual                                                             
    ; param a, index_relative_to_bp 2                                               
    ; adding val maxValue                                                           
    ; param b, index_relative_to_bp 4                                               

    mov     eax,[ebp+8]
    cmp     eax,[ebp+16]
    mov     eax,1 ; true
    jg      $+7  ; Jump if greater unsigned comparison
    mov     eax,0 ; false

    ; end inlining function greater_0                                               
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function less_1, added to stack 0                                    
    ; adding val actual                                                             
    ; param a, index_relative_to_bp 2                                               
    ; adding val minValue                                                           
    ; param b, index_relative_to_bp 3                                               

    mov     eax,[ebp+8]
    cmp     eax,[ebp+12]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    ; end inlining function less_1                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; inlining function if_16, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val g original_param_name cond                                     
    ; param cond, index_relative_to_bp -1                                           
    ; adding val maxValue                                                           
    ; param trueVal, index_relative_to_bp 4                                         

    ; inlining function if_16, added to stack 0 + 4         
    ; adding let val l original_param_name cond                                     
    ; param cond, index_relative_to_bp -2                                           
    ; adding val minValue                                                           
    ; param trueVal, index_relative_to_bp 3                                         
    ; adding val actual                                                             
    ; param falseVal, index_relative_to_bp 2                                        

    push  ebx
    push  edx

    mov   dword eax, [ebp+-8]
    imul  dword eax, [ebp+12]
    mov   dword ebx, [ebp+-8]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+8]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    ; end inlining function if_16                                                   
    mov dword [esp + 0], eax                                                        ; falseVal = if_16 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:13:23

    push  ebx
    push  edx

    mov   dword eax, [ebp+-4]
    imul  dword eax, [ebp+16]
    mov   dword ebx, [ebp+-4]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+-4-(0)-8]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,4                                                                   ; restore stack for if_16
    ; end inlining function if_16                                                   


    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function List_11_addRef(address:List_11)                                      
List_11_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     List_11_addRef                                                         
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_7(value:Option_10,Some:fn (HighScore_3) -> SDLColor_0,None:fn () -> SDLColor_0) -> SDLColor_0
match_7:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:12:9
; function lambda215() -> FPS_9                                                 
lambda215:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function div_0, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function mul_0, added to stack 0 + 8          
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function frameCount_0, added to stack 0 + 8 + 4
    ; adding val fps                                                                
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 2
    push ebx                                                                        
    mov   dword ebx, [edx + 16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function frameCount_0                                            
    mov dword [esp + 0], eax                                                        ; n1 = frameCount_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:13:40

    push    edx
    mov     dword eax,[ebp+-4-(0 + 8)-8]
    imul    dword eax,1000000
    pop     edx

    add     esp,4                                                                   ; restore stack for mul_0
    ; end inlining function mul_0                                                   
    mov dword [esp + 0], eax                                                        ; n1 = mul_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:13:44
    ; adding let val et original_param_name n2                                      
    ; add_lambda_param_from_lambda_space, original_param_name n2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function div_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:13:57
    call    div_0                                                                   
    add     esp,8                                                                   ; restore stack for div_0
    ; end calling function div_0                                                    
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function FPS_0, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          
    ; adding let val now original_param_name lastFPSUpdate                          
    ; add_lambda_param_from_lambda_space, original_param_name lastFPSUpdate, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val newFps original_param_name fps                                 
    ; param fps, index_relative_to_bp -1                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 12], ecx                                                      
    pop ecx                                                                         ; tmp_for_move
    ; Calling function FPS_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:14:16
    call    FPS_0                                                                   
    add     esp,12                                                                  ; restore stack for FPS_0
    ; end calling function FPS_0                                                    



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda941_deref(address:i32,descr:str)                               
lambda941_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     List_11_deref                                                          
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:121:57
; function lambda11()                                                           
lambda11:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda931_deref(address:i32,descr:str)                               
lambda931_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:93:8
; function State_0(resources:Resources_13,keys:Vec_5,stage:Stage_0,highScores:Vec_0) -> State_14
State_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 16
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property resources
    mov   ebx, [ebp+8]                                                           
    mov dword  [eax + 0], ebx                                                       

    ; property keys
    mov   ebx, [ebp+12]                                                                
    mov dword  [eax + 4], ebx                                                       

    ; property stage
    mov   ebx, [ebp+16]                                                               
    mov dword  [eax + 8], ebx                                                       

    ; property highScores
    mov   ebx, [ebp+20]                                                          
    mov dword  [eax + 12], ebx                                                      
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:17            
; function lambda930(head:str,tail:List_9) -> List_9                            
lambda930:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function List_Full_1, added to stack 0                                
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val head                                                               
    ; param head, index_relative_to_bp 3                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function listAppend_0, added to stack 0 + 8    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val tail                                                               
    ; param dest, index_relative_to_bp 4                                            
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+16]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val source                                                             
    ; add_lambda_param_from_lambda_space, original_param_name source, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listAppend_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:59
    call    listAppend_0                                                            
    add     esp,8                                                                   ; restore stack for listAppend_0
    ; end calling function listAppend_0                                             
    mov dword [esp + 4], eax                                                        ; tail = listAppend_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:59

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function List_Full_1 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:36
    call    List_Full_1                                                             
    add     esp,8                                                                   ; restore stack for List_Full_1
    ; end calling function List_Full_1                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:1:12               
; function IOError_0(message:str) -> IOError_16                                 
IOError_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 4
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property message
    mov   ebx, [ebp+8]                                                             
    mov dword  [eax + 0], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:37:9
; function memcopy_0(source:i32,dest:i32,len:i32)                               
memcopy_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ecx
    push    esi
    push    edi

    mov     esi, [ebp+8]
    mov     edi, [ebp+12]
    mov     ecx, [ebp+16]
    rep     movsb

    pop     edi
    pop     esi
    pop     ecx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda890_deref(address:i32,descr:str)                               
lambda890_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda931_add_ref(address:i32,descr:str)                             
lambda931_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:43:8
; function fileFlag_0(flag:FileFlag_18) -> i32                                  
fileFlag_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_31, added to stack 0                                   
    sub esp, 28                                                                     ; Prepare stack for parameters
    ; adding val flag                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_304                                               
    mov  dword edx, static_memory_305                                               
    mov dword [edx], lambda1190                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_306                                               
    mov  dword edx, static_memory_307                                               
    mov dword [edx], lambda1191                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_308                                               
    mov  dword edx, static_memory_309                                               
    mov dword [edx], lambda1192                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 16], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_310                                               
    mov  dword edx, static_memory_311                                               
    mov dword [edx], lambda1193                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 20], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_312                                               
    mov  dword edx, static_memory_313                                               
    mov dword [edx], lambda1194                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 24], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_314                                               
    mov  dword edx, static_memory_315                                               
    mov dword [edx], lambda1195                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 28], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_31 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:44:10
    call    match_31                                                                
    add     esp,28                                                                  ; restore stack for match_31
    ; end calling function match_31                                                 

    pop     ebp                                                                     
    ret                                                                             
; function Option_16_addRef(address:Option_16)                                  
Option_16_addRef:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     Brick_2_addRef                                                         
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_22(value:Option_12,Some:fn (IOError_16) -> Option_12,None:fn () -> Option_12) -> Option_12
match_22:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function match_14(value:List_9,Full:fn (str,List_9) -> List_15,Empty:fn () -> List_15) -> List_15
match_14:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:156:10
; function lambda131() -> Vec_5                                                 
lambda131:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding let val keys original_param_name keys                                  
    ; add_lambda_param_from_lambda_space, original_param_name keys, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:159:55            
; function lambda873() -> Option_17                                             
lambda873:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function Option_None_1, added to stack 0                             
    mov    eax, [_enum_Option_None]

    ; end inlining function Option_None_1                                           

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:256:9
; function filter_2(vec:Vec_3,filter:fn (Brick_2) -> bool) -> Vec_3             
filter_2:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    push    ebx
    ; multiply ebx by 4
    shl     ebx, 2
    ; add the space for the size
    add     ebx, 4
    ; call macro, calling malloc_0
    push dword [_s_113]
    push dword ebx
    call malloc_0
    add esp, 8

    ; call macro, calling addRef_0
    push dword [_s_115]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ebx

    push    eax

    mov     dword edx, [eax]
    add     edx, 4  ; the address of the value in the new array
.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    mov     dword eax, [ecx]
    mov     dword [edx], eax
    add     edx, 4
.false:
    dec     ebx
    add     ecx, 4
    jmp     .loop
.end:
    pop     eax
    ; call macro, calling deref_0
    push dword [_s_115]
    push dword eax
    call deref_0
    add esp, 8

    sub     dword edx, [eax]
    ; divide ebx by 4, we get the len
    shr     edx, 2
    dec     edx         ; we remove 1 for the size
    mov     dword ecx, [eax]
    mov     dword [ecx], edx
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:633:9
; function addStaticAllocation_0(labelAllocation:i32,labelMemory:i32,size:i32)  
addStaticAllocation_0:                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx

    mov     dword ebx, [ebp+12]
    mov     dword eax, [ebp+8]
    mov     dword [eax], ebx
    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword ebx, [ebp+16]
    mov     dword [eax + 8], ebx    ; size
    mov     dword [eax + 12], 1     ; count
    mov     dword [eax + 16], 0     ; reusable table

    pop     ebx


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Bar_8_addRef(address:Bar_8)                                          
Bar_8_addRef:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:148:9
; function sdlRenderFillRect_0(ren:SDLRenderer_1,rect:SDLRect_19)               
sdlRenderFillRect_0:                                                            
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_RenderFillRect
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 8
    and   esp,0xfffffff0
    mov dword ecx, [ebp+12]
    mov dword ecx, [ecx]
   mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_RenderFillRect
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:102:9
; function sdlFreeSurface_0(surface:SDLSurface_12)                              
sdlFreeSurface_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_FreeSurface
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_FreeSurface
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:256:9
; function filter_0(vec:Vec_5,filter:fn (i32) -> bool) -> Vec_5                 
filter_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    push    ebx
    ; multiply ebx by 4
    shl     ebx, 2
    ; add the space for the size
    add     ebx, 4
    ; call macro, calling malloc_0
    push dword [_s_113]
    push dword ebx
    call malloc_0
    add esp, 8

    ; call macro, calling addRef_0
    push dword [_s_115]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ebx

    push    eax

    mov     dword edx, [eax]
    add     edx, 4  ; the address of the value in the new array
.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    mov     dword eax, [ecx]
    mov     dword [edx], eax
    add     edx, 4
.false:
    dec     ebx
    add     ecx, 4
    jmp     .loop
.end:
    pop     eax
    ; call macro, calling deref_0
    push dword [_s_115]
    push dword eax
    call deref_0
    add esp, 8

    sub     dword edx, [eax]
    ; divide ebx by 4, we get the len
    shr     edx, 2
    dec     edx         ; we remove 1 for the size
    mov     dword ecx, [eax]
    mov     dword [ecx], edx
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:174:4
; function addScore_0(highScores:Vec_0,score:i32) -> Vec_0                      
addScore_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)

    ; calling function push_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val highScores                                                         
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function HighScore_0, added to stack 0 + 8     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val score                                                              
    ; param score, index_relative_to_bp 3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; calling function now_0, added to stack 0 + 8 + 8
    ; Calling function now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:175:42
    call    now_0                                                                   
    ; end calling function now_0                                                    
    mov dword [esp + 4], eax                                                        ; time = now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:175:42

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function HighScore_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:175:31
    call    HighScore_0                                                             
    add     esp,8                                                                   ; restore stack for HighScore_0
    ; end calling function HighScore_0                                              
    mov dword [esp + 4], eax                                                        ; o = HighScore_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:175:31

    ; add ref 
    push     dword eax                                                              
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function push_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:175:9
    call    push_0                                                                  
    add     esp,8                                                                   ; restore stack for push_0
    ; end calling function push_0                                                   

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     HighScore_3_deref                                                      
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:24:34
; function lambda1202() -> i32                                                  
lambda1202:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 1                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda117_add_ref(address:i32,descr:str)                             
lambda117_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda535_deref(address:i32,descr:str)                               
lambda535_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_26(value:List_6,Full:fn (EnumerateEntry_10,List_6) -> Option_17,Empty:fn () -> Option_17) -> Option_17
match_26:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:96:8              
; function fmap_0(l:List_9,f:fn (str) -> List_11) -> List_11                    
fmap_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function flatten_0, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function map_0, added to stack 0 + 4           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param l, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; param f, index_relative_to_bp 3                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function map_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:97:16
    call    map_0                                                                   
    add     esp,8                                                                   ; restore stack for map_0
    ; end calling function map_0                                                    
    mov dword [esp + 0], eax                                                        ; l = map_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:97:16

    ; add ref 
    push     dword eax                                                              
    call     List_15_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function flatten_0 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:97:12
    call    flatten_0                                                               
    add     esp,4                                                                   ; restore stack for flatten_0
    ; end calling function flatten_0                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_15_deref                                                          
    add      esp,4                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:234:4
; function splitToList_0(s:str,separator:str) -> List_9                         
splitToList_0:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 88                                                                   ; reserve stack local vals (let)

    ; calling function listEnumerate_0, added to stack 0                            
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function chars_0, added to stack 0 + 4         
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val s                                                                  
    ; param s, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function chars_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:235:36
    call    chars_0                                                                 
    add     esp,4                                                                   ; restore stack for chars_0
    ; end calling function chars_0                                                  
    mov dword [esp + 0], eax                                                        ; l = chars_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:235:36

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function listEnumerate_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:235:30
    call    listEnumerate_0                                                         
    add     esp,4                                                                   ; restore stack for listEnumerate_0
    ; end calling function listEnumerate_0                                          
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     List_6_addRef                                                          
    add      esp,4                                                                  

    ; calling function indexOf_0, added to stack 0                                  
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val chars original_param_name list                                 
    ; param list, index_relative_to_bp -1                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val separator                                                          
    ; param what, index_relative_to_bp 3                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function indexOf_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:237:39
    call    indexOf_0                                                               
    add     esp,8                                                                   ; restore stack for indexOf_0
    ; end calling function indexOf_0                                                
    mov dword [ebp + -12], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function match_12, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val separatorIndex original_param_name value                       
    ; param value, index_relative_to_bp -3                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,32                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,52                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter s
    mov  dword [edx + 12], ecx                                                      ; context parameter s
    mov  dword ecx, [ebp+12]                                                        ; context parameter separator
    mov  dword [edx + 16], ecx                                                      ; context parameter separator
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda517                                                      
    mov dword [edx + 4], lambda517_add_ref                                          
    mov dword [edx + 2 * 4], lambda517_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,72                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,88                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter s
    mov  dword [edx + 12], ecx                                                      ; context parameter s
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda518                                                      
    mov dword [edx + 4], lambda518_add_ref                                          
    mov dword [edx + 2 * 4], lambda518_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_12 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:239:10
    call    match_12                                                                
    add     esp,12                                                                  ; restore stack for match_12
    ; end calling function match_12                                                 

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_6_deref                                                           
    add      esp,4                                                                  


    add   esp, 88                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function Vec_5_deref(address:Vec_5,descr:str)                                 
Vec_5_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_5                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:52:9
; function malloc_0(size:i32,descr:str) -> i32                                  
malloc_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_45]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword [ebp+8]
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_47]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [ebp+12]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword ecx, _reusable_heap_table

    %ifdef LOG_DEBUG
    push    eax
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,ecx
    ; call macro, calling print_1
    push dword [_s_27]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword ebx
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov dword ebx,[ebp+8]
    mov dword edx,[_reusable_heap_table_next]
.reusable_loop:
    cmp     dword ecx,edx
    je      .allocation

    mov     eax,[ecx]
    cmp     dword [eax + 8],ebx
    je     .reusable_good
    add     ecx,4
    jmp    .reusable_loop
.reusable_good:
    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_49]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword eax
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_51]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword [eax + 8]
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; $call(checkAddress,eax)
    pop eax
    %endif

    ; call macro, calling removeFromReused_0
    push dword ecx
    call removeFromReused_0
    add esp, 4

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 12], 0     ; count
    mov     dword [eax + 16], 0     ; reusable table
    jmp     .end

.allocation:
    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_53]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword eax,[_heap_table_next]; the pointer to the heap table
    mov     dword edx,[_heap_table_size]
    add     dword edx,_heap_table
    cmp     dword eax,edx
    jb     .loop_ok
    ; call macro, calling print_1
    push dword [_s_55]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling exitMain_0
    push dword 1
    call exitMain_0
    add esp, 4


.loop_ok:
    mov     dword eax,[_heap_table_next]
    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_57]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword ecx,[_heap]
    sub     ecx,_heap_buffer
    cmp     ecx,[_heap_size]
    jb      .new_address_ok
    ; call macro, calling print_1
    push dword [_s_59]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling exitMain_0
    push dword 1
    call exitMain_0
    add esp, 4


.new_address_ok:
    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_61]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword ecx,[_heap]
    mov     dword [eax],ecx
    mov     dword edx, [ebp+8]
    add     ecx, edx
    mov     dword [_heap],ecx
    mov     dword [eax + 5 * 4],0 ; to be sure that the next slot is considered free

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_63]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword [eax + 4], 1      ; allocated flag
    mov     dword [eax + 8], edx    ; size
    mov     dword [eax + 12], 0     ; count
    mov     dword [eax + 16], 0     ; reusable table
    add     eax, 20
    mov     [_heap_table_next],eax
    sub     eax, 20

.end:
    ;mov     dword eax,[eax]

    %ifdef LOG_DEBUG
    push   eax
    ; call macro, calling print_1
    push dword [_s_25]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword eax
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_65]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:19:17           
; function lambda981()                                                          
lambda981:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:13:8               
; function listToVec_0(l:List_11) -> Vec_0                                      
listToVec_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function match_9, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_224                                               
    mov  dword edx, static_memory_225                                               
    mov dword [edx], lambda583                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_226                                               
    mov  dword edx, static_memory_227                                               
    mov dword [edx], lambda584                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_9 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:14:10
    call    match_9                                                                 
    add     esp,12                                                                  ; restore stack for match_9
    ; end calling function match_9                                                  

    pop     ebp                                                                     
    ret                                                                             
; function lambda972_deref(address:i32,descr:str)                               
lambda972_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Option_12_deref                                                        
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:258:9
; function sub_2(n1:i32,f2:f32) -> f32                                          
sub_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    sub     esp,4

    mov     dword eax,[ebp+8]
    mov     dword [ebp - 4],eax
    fild    dword [ebp - 4]
    mov     dword eax,[ebp+12]
    mov     dword [ebp - 4],eax

    fsub   dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/str.rasm:81:9
; function substr_0(s:str,pos:i32,len:i32) -> Option_13                         
substr_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push ebx
    push ecx

    ; call macro, calling slen_0
    push dword [ebp+8]
    call slen_0
    add esp, 4


    mov     dword ebx, [ebp+12]
    mov     dword ecx, [ebp+16]
    add     ebx, ecx

    cmp     ebx, eax
    jle     .ok
    mov     dword eax, [_enum_Option_None]
    jmp     .end
.ok:
    add     ecx, 1
    ; call macro, calling malloc_0
    push dword [_s_125]
    push dword ecx
    call malloc_0
    add esp, 8

    
    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  

    push    eax
    mov     dword ecx,[eax]

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    add     ebx, [ebp+12]

    ; call macro, calling memcopy_0
    push dword [ebp+16]
    push dword ecx
    push dword ebx
    call memcopy_0
    add esp, 12


    ; call macro, calling Option_Some_1
    push dword eax
    call Option_Some_1
    add esp, 4

    pop     ebx
    
    ; deref 
    push     dword ebx                                                              
    call     str_deref_0                                                            
    add      esp,4                                                                  


.end:
    pop ecx
    pop ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:106:9
; function sdlRenderClear_0(ren:SDLRenderer_1)                                  
sdlRenderClear_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_RenderClear
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_RenderClear
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:27:8
; function filePermissions_0(p:Vec_9) -> i32                                    
filePermissions_0:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; calling function foldLeft_1, added to stack 0                                 
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val p                                                                  
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], 0                                                          
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_302                                               
    mov  dword edx, static_memory_303                                               
    mov dword [edx], lambda1166                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function foldLeft_1 : file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:28:13
    call    foldLeft_1                                                              
    add     esp,12                                                                  ; restore stack for foldLeft_1
    ; end calling function foldLeft_1                                               

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:9:8                
; function fmap_1(l:Vec_5,f:fn (i32) -> Vec_3) -> Vec_3                         
fmap_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)

    ; calling function flatten_2, added to stack 0                                  
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function map_4, added to stack 0 + 4           
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param vec, index_relative_to_bp 2                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; param f, index_relative_to_bp 3                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function map_4 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:10:16
    call    map_4                                                                   
    add     esp,8                                                                   ; restore stack for map_4
    ; end calling function map_4                                                    
    mov dword [esp + 0], eax                                                        ; vec = map_4 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:10:16

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_11_addRef                                                          
    add      esp,4                                                                  
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function flatten_2 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:10:12
    call    flatten_2                                                               
    add     esp,4                                                                   ; restore stack for flatten_2
    ; end calling function flatten_2                                                

    ; scope pop                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 4]                                                        
    call     Vec_11_deref                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  



    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:16:9
; function lambda216() -> FPS_9                                                 
lambda216:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function frameCount_1, added to stack 0                               
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val fps                                                                
    ; add_lambda_param_from_lambda_space, original_param_name receiver, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function add_1, added to stack 0 + 8          
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function frameCount_0, added to stack 0 + 8 + 4
    ; adding val fps                                                                
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function frameCount_0                                            
    mov dword [esp + 0], eax                                                        ; n1 = frameCount_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:16:43

    mov     eax, [ebp+-4-(0 + 8)-4]
    add     eax, 1

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; v = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:16:47
    ; Calling function frameCount_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:16:28
    call    frameCount_1                                                            
    add     esp,8                                                                   ; restore stack for frameCount_1
    ; end calling function frameCount_1                                             



    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function match_19(value:Option_16,Some:fn (Brick_2) -> i32,None:fn () -> i32) -> i32
match_19:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param value                                                                   
    push dword [eax + 4]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 8                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_87]
    push dword 1
    call print_1
    add esp, 8
                           
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/fps.rasm:1:12
; function FPS_0(frameCount:i32,lastFPSUpdate:TimeVal_1,fps:i32) -> FPS_9       
FPS_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property frameCount
    mov   ebx, [ebp+8]                                                          
    mov dword  [eax + 0], ebx                                                       

    ; property lastFPSUpdate
    mov   ebx, [ebp+12]                                                       
    mov dword  [eax + 4], ebx                                                       

    ; property fps
    mov   ebx, [ebp+16]                                                                 
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:151:27
; function lambda138() -> Vec_5                                                 
lambda138:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function vecOf_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val key original_param_name value                                  
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function vecOf_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:152:18
    call    vecOf_0                                                                 
    add     esp,4                                                                   ; restore stack for vecOf_0
    ; end calling function vecOf_0                                                  

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:362:9
; function min_0(f1:f32,f2:f32) -> f32                                          
min_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling greater_2
    push dword [ebp+12]
    push dword [ebp+8]
    call greater_2
    add esp, 8

    cmp     dword eax,0
    jz      .false
    mov     dword eax,[ebp+12]
    jmp     .end
.false:
    mov     dword eax,[ebp+8]
.end:
    pop     ebp                                                                     
    ret                                                                             
; function List_9_addRef(address:List_9)                                        
List_9_addRef:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx,[ebp+8]                                                          
    mov dword ebx, [ebx]                                                            
    cmp dword [ebx], 0                                                              
    jne ._variant_0                                                                 

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     List_9_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    jmp .end                                                                        
._variant_0:                                                                    
    .end:                                                                           
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:47:51
; function lambda197() -> GameResult_4                                          
lambda197:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function GameResult_Play_0, added to stack 0                          
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val newGameState original_param_name state                         
    ; add_lambda_param_from_lambda_space, original_param_name state, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function GameResult_Play_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:47:66
    call    GameResult_Play_0                                                       
    add     esp,4                                                                   ; restore stack for GameResult_Play_0
    ; end calling function GameResult_Play_0                                        

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/str.rasm:14:8               
; function toString_2(s:str) -> str                                             
toString_2:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    ; adding val s                                                                  
    ; param s, index_relative_to_bp 2                                               
    mov dword eax, [ebp+8]                                                          

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:52:7
; function sdlErrorIfNull_0(value:SDLWindow_2,message:str) -> SDLWindow_2       
sdlErrorIfNull_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 76                                                                   ; reserve stack local vals (let)

    ; inlining function if_3, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function isSDLNull_1, added to stack 0 + 12     
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val value                                                              
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function isSDLNull_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:17
    call    isSDLNull_1                                                             
    add     esp,4                                                                   ; restore stack for isSDLNull_1
    ; end calling function isSDLNull_1                                              
    mov dword [esp + 0], eax                                                        ; cond = isSDLNull_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:17
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter message
    mov  dword [edx + 12], ecx                                                      ; context parameter message
    mov  dword ecx, [ebp+8]                                                         ; context parameter value
    mov  dword [edx + 16], ecx                                                      ; context parameter value
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda108                                                      
    mov dword [edx + 4], lambda108_add_ref                                          
    mov dword [edx + 2 * 4], lambda108_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,60                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,76                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter value
    mov  dword [edx + 12], ecx                                                      ; context parameter value
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda109                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-76]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-76]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-76]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_3
    ; end inlining function if_3                                                    


    add   esp, 76                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:27:67             
; function lambda759() -> List_15                                               
lambda759:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function List_Empty_2, added to stack 0                              
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_2                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:61
; function lambda255(b2:Brick_2) -> bool                                        
lambda255:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function not_0, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function eq_2, added to stack 0 + 4            
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val b1                                                                 
    ; add_lambda_param_from_lambda_space, original_param_name b1, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val b2                                                                 
    ; param b2, index_relative_to_bp 3                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function eq_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:75
    call    eq_2                                                                    
    add     esp,8                                                                   ; restore stack for eq_2
    ; end calling function eq_2                                                     
    mov dword [esp + 0], eax                                                        ; a = eq_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:62:75

    mov     eax,[ebp+-4-(0)-4]
    xor     dword eax,1

    add     esp,4                                                                   ; restore stack for not_0
    ; end inlining function not_0                                                   


    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/std.rasm:10:8               
; function println_0(v:str)                                                     
println_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; calling function print_0, added to stack 0                                    
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param v, index_relative_to_bp 2                                               
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function print_0 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:11:10
    call    print_0                                                                 
    add     esp,4                                                                   ; restore stack for print_0
    ; end calling function print_0                                                  

    ; calling function println_1, added to stack 0                                  
    ; Calling function println_1 : file:////home/enrico/development/rust/rasm/stdlib/std.rasm:12:12
    call    println_1                                                               
    ; end calling function println_1                                                


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:194:31
; function lambda88(line:str) -> List_11                                        
lambda88:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function splitToList_0, added to stack 0                              
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val line                                                               
    ; param s, index_relative_to_bp 3                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push eax                                                                        
    mov dword eax, [_s_183]                                                         
    mov dword [esp + 8], eax                                                        
    pop eax                                                                         
    ; Calling function splitToList_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:195:39
    call    splitToList_0                                                           
    add     esp,8                                                                   ; restore stack for splitToList_0
    ; end calling function splitToList_0                                            
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 4]                                                        
    call     List_9_addRef                                                          
    add      esp,4                                                                  

    ; calling function map3_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val splitted original_param_name list                              
    ; param list, index_relative_to_bp -1                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_184                                               
    mov  dword ecx, static_memory_185                                               
    mov dword [ecx], lambda92                                                       
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function map3_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:196:30
    call    map3_0                                                                  
    add     esp,8                                                                   ; restore stack for map3_0
    ; end calling function map3_0                                                   
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [ebp - 8]                                                        
    call     Option_10_addRef                                                       
    add      esp,4                                                                  

    ; calling function toList_0, added to stack 0                                   
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val result original_param_name o                                   
    ; param o, index_relative_to_bp -2                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-8]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function toList_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:197:19
    call    toList_0                                                                
    add     esp,4                                                                   ; restore stack for toList_0
    ; end calling function toList_0                                                 

    ; deref 
    push     dword [ebp - 8]                                                        
    call     Option_10_deref                                                        
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  


    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:9:12
; function FileMode_0(user:Vec_9,group:Vec_9,others:Vec_9) -> FileMode_24       
FileMode_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property user
    mov   ebx, [ebp+8]                                                                
    mov dword  [eax + 0], ebx                                                       

    ; property group
    mov   ebx, [ebp+12]                                                               
    mov dword  [eax + 4], ebx                                                       

    ; property others
    mov   ebx, [ebp+16]                                                              
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function match_33(value:YDirection_2,Up:fn () -> f32,Down:fn () -> f32) -> f32
match_33:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                     
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_97]
    push dword 1
    call print_1
    add esp, 8
                       
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:141:4
; function update_0(event:Option_7,state:State_14) -> State_14                  
update_0:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 180                                                                  ; reserve stack local vals (let)

    ; inlining function resources_0, added to stack 0                               
    ; adding val state                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function resources_0                                             
    mov dword [ebp + -4], eax                                                       ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; inlining function keys_0, added to stack 0                                    
    ; adding val state                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function keys_0                                                  
    mov dword [ebp + -8], eax                                                       ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; inlining function stage_0, added to stack 0                                   
    ; adding val state                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function stage_0                                                 
    mov dword [ebp + -12], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 12]                                                       
    call     Stage_0_addRef                                                         
    add      esp,4                                                                  

    ; inlining function highScores_0, added to stack 0                              
    ; adding val state                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function highScores_0                                            
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function match_2, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val event                                                              
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,40                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,56                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-8]                                                        ; context parameter keys
    mov  dword [edx + 12], ecx                                                      ; context parameter keys
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda130                                                      
    mov dword [edx + 4], lambda130_add_ref                                          
    mov dword [edx + 2 * 4], lambda130_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,76                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,92                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-8]                                                        ; context parameter keys
    mov  dword [edx + 12], ecx                                                      ; context parameter keys
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda131                                                      
    mov dword [edx + 4], lambda131_add_ref                                          
    mov dword [edx + 2 * 4], lambda131_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:147:24
    call    match_2                                                                 
    add     esp,12                                                                  ; restore stack for match_2
    ; end calling function match_2                                                  
    mov dword [ebp + -20], eax                                                      ; 

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 20]                                                       
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; calling function match_4, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val stage original_param_name value                                
    ; param value, index_relative_to_bp -3                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,112                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,136                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-16]                                                       ; context parameter highScores
    mov  dword [edx + 12], ecx                                                      ; context parameter highScores
    mov  dword ecx, [ebp+-20]                                                       ; context parameter newKeys
    mov  dword [edx + 16], ecx                                                      ; context parameter newKeys
    mov  dword ecx, [ebp+-4]                                                        ; context parameter resources
    mov  dword [edx + 20], ecx                                                      ; context parameter resources
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda133                                                      
    mov dword [edx + 4], lambda133_add_ref                                          
    mov dword [edx + 2 * 4], lambda133_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,156                                                               
    mov dword ecx,ebp                                                               
    sub dword ecx,180                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 24                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+-16]                                                       ; context parameter highScores
    mov  dword [edx + 12], ecx                                                      ; context parameter highScores
    mov  dword ecx, [ebp+-20]                                                       ; context parameter newKeys
    mov  dword [edx + 16], ecx                                                      ; context parameter newKeys
    mov  dword ecx, [ebp+-4]                                                        ; context parameter resources
    mov  dword [edx + 20], ecx                                                      ; context parameter resources
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda134                                                      
    mov dword [edx + 4], lambda134_add_ref                                          
    mov dword [edx + 2 * 4], lambda134_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:158:10
    call    match_4                                                                 
    add     esp,12                                                                  ; restore stack for match_4
    ; end calling function match_4                                                  

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 20]                                                       
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 16]                                                       
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [ebp - 12]                                                       
    call     Stage_0_deref                                                          
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebp - 8]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    add   esp, 180                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:15:45
; function lambda310() -> i32                                                   
lambda310:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function toi32_0, added to stack 0                                    
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function div_1, added to stack 0 + 8           
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function tof32_0, added to stack 0 + 8 + 8
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function velocity_0, added to stack 0 + 8 + 8 + 4
    ; adding val bar                                                                
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function velocity_0                                              
    mov dword [esp + 0], eax                                                        ; n = velocity_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:16:37
    ; Calling function tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:16:24
    call    tof32_0                                                                 
    add     esp,4                                                                   ; restore stack for tof32_0
    ; end calling function tof32_0                                                  
    mov dword [esp + 0], eax                                                        ; f1 = tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:16:24
    mov dword [esp + 4], 0x3f83d70a                                                 
    ; Calling function div_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:16:18
    call    div_1                                                                   
    add     esp,8                                                                   ; restore stack for div_1
    ; end calling function div_1                                                    
    mov dword [esp + 0], eax                                                        ; f = div_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:16:18
    mov dword [esp + 4], 0                                                          
    ; Calling function toi32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:16:14
    call    toi32_0                                                                 
    add     esp,8                                                                   ; restore stack for toi32_0
    ; end calling function toi32_0                                                  




    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:246:25
; function lambda534(r:str) -> List_9                                           
lambda534:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function listAppend_0, added to stack 0                               
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function listOf_1, added to stack 0 + 8        
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function listOf_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:246:49
    call    listOf_1                                                                
    add     esp,4                                                                   ; restore stack for listOf_1
    ; end calling function listOf_1                                                 
    mov dword [esp + 0], eax                                                        ; dest = listOf_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:246:49

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function splitToList_0, added to stack 0 + 8   
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val r                                                                  
    ; param s, index_relative_to_bp 3                                               
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val separator                                                          
    ; add_lambda_param_from_lambda_space, original_param_name separator, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function splitToList_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:246:65
    call    splitToList_0                                                           
    add     esp,8                                                                   ; restore stack for splitToList_0
    ; end calling function splitToList_0                                            
    mov dword [esp + 4], eax                                                        ; source = splitToList_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:246:65

    ; add ref 
    push     dword eax                                                              
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function listAppend_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:246:42
    call    listAppend_0                                                            
    add     esp,8                                                                   ; restore stack for listAppend_0
    ; end calling function listAppend_0                                             

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     List_9_deref                                                           
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:13:8
; function update_6(ball:Ball_7,actualTime:TimeVal_1) -> Ball_7                 
update_6:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 44                                                                   ; reserve stack local vals (let)

    ; calling function elapsedTime_0, added to stack 0                              
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val actualTime                                                         
    ; param actual, index_relative_to_bp 3                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function lastUpdate_1, added to stack 0 + 8   
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 16]                                                      
    pop   ebx                                                                       

    ; end inlining function lastUpdate_1                                            
    mov dword [esp + 4], eax                                                        ; previous = lastUpdate_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:14:58

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function elapsedTime_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:14:30
    call    elapsedTime_0                                                           
    add     esp,8                                                                   ; restore stack for elapsedTime_0
    ; end calling function elapsedTime_0                                            
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function divf_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val elapsed original_param_name n1                                 
    ; param n1, index_relative_to_bp -1                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], 3000                                                       
    ; Calling function divf_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:16:20
    call    divf_0                                                                  
    add     esp,8                                                                   ; restore stack for divf_0
    ; end calling function divf_0                                                   
    mov dword [ebp + -12], eax                                                      ; 

    ; calling function update_7, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function x_1, added to stack 0 + 12            
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_1                                                     
    mov dword [esp + 0], eax                                                        ; x = x_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:18:33

    ; inlining function xDir_0, added to stack 0 + 12         
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function xDir_0                                                  
    mov dword [esp + 4], eax                                                        ; xDir = xDir_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:18:44

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 20], eax                                                   
    ; adding let val diff original_param_name diff                                  
    ; param diff, index_relative_to_bp -3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function update_7 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:18:26
    call    update_7                                                                
    add     esp,12                                                                  ; restore stack for update_7
    ; end calling function update_7                                                 
    mov dword [ebp + -16], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 16]                                                       
    call     Pair_11_addRef                                                         
    add      esp,4                                                                  

    ; inlining function first_3, added to stack 0                                   
    ; adding let val updatedX original_param_name v                                 
    ; param v, index_relative_to_bp -4                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function first_3                                                 
    mov dword [ebp + -24], eax                                                      ; 

    ; inlining function second_0, added to stack 0                                  
    ; adding let val updatedX original_param_name v                                 
    ; param v, index_relative_to_bp -4                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function second_0                                                
    mov dword [ebp + -28], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 28]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function update_8, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function y_0, added to stack 0 + 12            
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function y_0                                                     
    mov dword [esp + 0], eax                                                        ; y = y_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:22:33

    ; inlining function yDir_0, added to stack 0 + 12         
    ; adding val ball                                                               
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function yDir_0                                                  
    mov dword [esp + 4], eax                                                        ; yDir = yDir_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:22:44

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 36], eax                                                   
    ; adding let val diff original_param_name diff                                  
    ; param diff, index_relative_to_bp -3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-12]                                                       
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function update_8 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:22:26
    call    update_8                                                                
    add     esp,12                                                                  ; restore stack for update_8
    ; end calling function update_8                                                 
    mov dword [ebp + -32], eax                                                      ; 

    ; add ref 
    push     dword [ebp - 32]                                                       
    call     Pair_12_addRef                                                         
    add      esp,4                                                                  

    ; inlining function first_4, added to stack 0                                   
    ; adding let val updatedY original_param_name v                                 
    ; param v, index_relative_to_bp -8                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-32]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function first_4                                                 
    mov dword [ebp + -40], eax                                                      ; 

    ; inlining function second_1, added to stack 0                                  
    ; adding let val updatedY original_param_name v                                 
    ; param v, index_relative_to_bp -8                                              
    push ebx                                                                        
    mov   dword ebx, [ebp+-32]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function second_1                                                
    mov dword [ebp + -44], eax                                                      ; 

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 44]                                                       
    call     addRef_0                                                               
    add      esp,8                                                                  

    ; calling function Ball_0, added to stack 0                                     
    sub esp, 20                                                                     ; Prepare stack for parameters
    ; adding let val newX original_param_name x                                     
    ; param x, index_relative_to_bp -6                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-24]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val newY original_param_name y                                     
    ; param y, index_relative_to_bp -10                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-40]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val newXDir original_param_name xDir                               
    ; param xDir, index_relative_to_bp -7                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-28]                                                       
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; adding let val newYDir original_param_name yDir                               
    ; param yDir, index_relative_to_bp -11                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-44]                                                       
    mov  dword [esp + 16], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; adding val actualTime                                                         
    ; param lastUpdate, index_relative_to_bp 3                                      
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 20], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function Ball_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:26:9
    call    Ball_0                                                                  
    add     esp,20                                                                  ; restore stack for Ball_0
    ; end calling function Ball_0                                                   

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 44]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 36]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  




    ; deref 
    push     dword [ebp - 32]                                                       
    call     Pair_12_deref                                                          
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 28]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 20]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  




    ; deref 
    push     dword [ebp - 16]                                                       
    call     Pair_11_deref                                                          
    add      esp,4                                                                  


    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 44                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:159:4
; function sysOpen_0(path:str,flags:i32,mode:i32) -> File_6                     
sysOpen_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     eax,  5           ; open syscall
    mov     dword ebx,[ebp+8]   ;
    mov     dword ebx,[ebx]   ; the file name
    mov     ecx, [ebp+12]
    mov     edx, [ebp+16]
    int     80h

    pop     edx
    pop     ecx
    pop     ebx

    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:187:16            
; function lambda561() -> Option_10                                             
lambda561:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function Option_None_0, added to stack 0                             
    mov    eax, [_enum_Option_None]

    ; end inlining function Option_None_0                                           

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:211:8
; function keyEvent_0() -> Option_7                                             
keyEvent_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx

    ; call macro, calling malloc_0
    push dword [_s_117]
    push dword 56
    call malloc_0
    add esp, 8

    ; call macro, calling addRef_0
    push dword [_s_119]
    push dword eax
    call addRef_0
    add esp, 8

    push    eax

    mov     dword  ebx, [eax]
    ; ccall macro, calling SDL_PollEvent
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [eax]
    mov dword [esp+0], ecx

    call SDL_PollEvent
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx
;
    cmp     eax, 0
    je      .noKey
    mov     dword eax,[ebx] ; here we have the event type
    cmp     eax, 768        ; keyDown
    jne     .noKeyDown
    ; call macro, calling KeyEvent_0
    push dword [_enum_KeyState_Down]
    push dword [ebx + 16]
    call KeyEvent_0
    add esp, 8

    
    ; add ref 
    push     dword eax                                                              
    call     KeyEvent_15_addRef                                                     
    add      esp,4                                                                  

    push    eax
    ; call macro, calling Option_Some_2
    push dword eax
    call Option_Some_2
    add esp, 4

    pop     ebx
    
    ; deref 
    push     dword ebx                                                              
    call     KeyEvent_15_deref                                                      
    add      esp,4                                                                  


    jmp     .end
.noKeyDown:
    cmp     eax, 769        ; keyUp
    jne     .noKey
    ; call macro, calling KeyEvent_0
    push dword [_enum_KeyState_Up]
    push dword [ebx + 16]
    call KeyEvent_0
    add esp, 8

    
    ; add ref 
    push     dword eax                                                              
    call     KeyEvent_15_addRef                                                     
    add      esp,4                                                                  

    push    eax
    ; call macro, calling Option_Some_2
    push dword eax
    call Option_Some_2
    add esp, 4

    pop     ebx
    
    ; deref 
    push     dword ebx                                                              
    call     KeyEvent_15_deref                                                      
    add      esp,4                                                                  


    jmp     .end
.noKey:
    mov     dword eax, [_enum_Option_None]
.end:
    pop     ebx
    ; call macro, calling freeMem_0
    push dword ebx
    call freeMem_0
    add esp, 4


    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:494:9
; function zip_0(vec1:Vec_5,vec2:Vec_0,zipFunction:fn (i32,HighScore_3) -> EnumerateEntry_17) -> Vec_10
zip_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx
    push    esi
    push    edi

    ; call macro, calling len_2
    push dword [ebp+8]
    call len_2
    add esp, 4

    mov     dword ebx, eax
    ; call macro, calling len_1
    push dword [ebp+12]
    call len_1
    add esp, 4

    ; call macro, calling min_1
    push dword eax
    push dword ebx
    call min_1
    add esp, 8

    push    eax                 ; the size of the new vec

    inc     eax                 ; + 1 for the size
    add     eax, eax
    add     eax, eax
    ; call macro, calling malloc_0
    push dword [_s_145]
    push dword eax
    call malloc_0
    add esp, 8

    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; call macro, calling addRef_0
    push dword [_s_147]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ecx                 ; the size of the new vec

    push    eax

    mov     dword esi, [eax]
    mov     dword [esi], esi
    mov     dword [esi],ecx
    add     esi, 4          ; address of first value to write
    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]
    add     ebx, 4          ; address of first value to read from vec1
    mov     dword edx, [ebp+12]
    mov     dword edx, [edx]
    add     edx, 4          ; address of first value to read from vec2
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [edx]
    push    dword [ebx]
    mov     dword eax, [ebp+16]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 12
    
    ; add ref 
    push     dword eax                                                              
    call     EnumerateEntry_17_addRef                                               
    add      esp,4                                                                  

    ; TODO do I need to dereference it?
    mov     dword [esi], eax
    add     esi, 4
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    ; call macro, calling deref_0
    push dword [_s_129]
    push dword eax
    call deref_0
    add esp, 8


    pop     edi
    pop     esi
    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:7:8
; function update_5(bar:Bar_8,actualTime:TimeVal_1,keys:Vec_5) -> Bar_8         
update_5:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 116                                                                  ; reserve stack local vals (let)

    ; calling function elapsedTime_0, added to stack 0                              
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val actualTime                                                         
    ; param actual, index_relative_to_bp 3                                          
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move

    ; inlining function lastUpdate_0, added to stack 0 + 8   
    ; adding val bar                                                                
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function lastUpdate_0                                            
    mov dword [esp + 4], eax                                                        ; previous = lastUpdate_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:8:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function elapsedTime_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:8:30
    call    elapsedTime_0                                                           
    add     esp,8                                                                   ; restore stack for elapsedTime_0
    ; end calling function elapsedTime_0                                            
    mov dword [ebp + -4], eax                                                       ; 

    ; calling function negate_0, added to stack 0                                   
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; calling function count_0, added to stack 0 + 4         
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val keys                                                               
    ; param vec, index_relative_to_bp 4                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_190                                               
    mov  dword edx, static_memory_191                                               
    mov dword [edx], lambda304                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function count_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:10:28
    call    count_0                                                                 
    add     esp,8                                                                   ; restore stack for count_0
    ; end calling function count_0                                                  
    mov dword [esp + 0], eax                                                        ; n = count_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:10:28
    ; Calling function negate_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:10:22
    call    negate_0                                                                
    add     esp,4                                                                   ; restore stack for negate_0
    ; end calling function negate_0                                                 
    mov dword [ebp + -12], eax                                                      ; 

    ; calling function count_0, added to stack 0                                    
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val keys                                                               
    ; param vec, index_relative_to_bp 4                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+16]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_192                                               
    mov  dword edx, static_memory_193                                               
    mov dword [edx], lambda306                                                      
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function count_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:11:22
    call    count_0                                                                 
    add     esp,8                                                                   ; restore stack for count_0
    ; end calling function count_0                                                  
    mov dword [ebp + -16], eax                                                      ; 

    ; inlining function add_1, added to stack 0                                     
    ; adding let val left original_param_name n1                                    
    ; param n1, index_relative_to_bp -3                                             
    ; adding let val right original_param_name n2                                   
    ; param n2, index_relative_to_bp -4                                             

    mov     eax, [ebp+-12]
    add     eax, [ebp+-16]

    ; end inlining function add_1                                                   
    mov dword [ebp + -20], eax                                                      ; 

    ; inlining function if_15, added to stack 0                                     
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function eq_0, added to stack 0 + 12           
    ; adding let val leftOrRight original_param_name a                              
    ; param a, index_relative_to_bp -5                                              

    mov     eax,[ebp+-20]
    cmp     eax,0
    mov     eax,1 ; true
    je      $+7  ; Jump if equals
    mov     eax,0 ; false

    ; end inlining function eq_0                                                    
    mov dword [esp + 0], eax                                                        ; cond = eq_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:15:28
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,44                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,60                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter bar
    mov  dword [edx + 12], ecx                                                      ; context parameter bar
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda310                                                      
    mov dword [edx + 4], lambda310_add_ref                                          
    mov dword [edx + 2 * 4], lambda310_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,80                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,100                                                               
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+8]                                                         ; context parameter bar
    mov  dword [edx + 12], ecx                                                      ; context parameter bar
    mov  dword ecx, [ebp+-20]                                                       ; context parameter leftOrRight
    mov  dword [edx + 16], ecx                                                      ; context parameter leftOrRight
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda311                                                      
    mov dword [edx + 4], lambda311_add_ref                                          
    mov dword [edx + 2 * 4], lambda311_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-116]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-116]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-116]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_15
    ; end inlining function if_15                                                   
    mov dword [ebp + -24], eax                                                      ; 

    ; calling function between_0, added to stack 0                                  
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val newVelocity original_param_name actual                         
    ; param actual, index_relative_to_bp -6                                         
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-24]                                                       
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    mov dword [esp + 4], -1000                                                      
    mov dword [esp + 8], 1000                                                       
    ; Calling function between_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:21:31
    call    between_0                                                               
    add     esp,12                                                                  ; restore stack for between_0
    ; end calling function between_0                                                
    mov dword [ebp + -104], eax                                                     ; 

    ; calling function div_2, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; calling function tof32_0, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding let val elapsed original_param_name n                                  
    ; param n, index_relative_to_bp -1                                              
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-4]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:23:28
    call    tof32_0                                                                 
    add     esp,4                                                                   ; restore stack for tof32_0
    ; end calling function tof32_0                                                  
    mov dword [esp + 0], eax                                                        ; f1 = tof32_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:23:28
    mov dword [esp + 4], 1000000                                                    
    ; Calling function div_2 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:23:22
    call    div_2                                                                   
    add     esp,8                                                                   ; restore stack for div_2
    ; end calling function div_2                                                    
    mov dword [ebp + -108], eax                                                     ; 

    ; calling function mul_1, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val seconds original_param_name f1                                 
    ; param f1, index_relative_to_bp -27                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-108]                                                      
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val newVelocity original_param_name n2                             
    ; param n2, index_relative_to_bp -6                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-24]                                                       
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function mul_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:25:19
    call    mul_1                                                                   
    add     esp,8                                                                   ; restore stack for mul_1
    ; end calling function mul_1                                                    
    mov dword [ebp + -112], eax                                                     ; 

    ; calling function add_4, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function x_0, added to stack 0 + 8            
    ; adding val bar                                                                
    ; param v, index_relative_to_bp 2                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+8]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function x_0                                                     
    mov dword [esp + 0], eax                                                        ; f1 = x_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:27:30
    ; adding let val diff original_param_name f2                                    
    ; param f2, index_relative_to_bp -28                                            
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-112]                                                      
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; Calling function add_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:27:24
    call    add_4                                                                   
    add     esp,8                                                                   ; restore stack for add_4
    ; end calling function add_4                                                    
    mov dword [ebp + -116], eax                                                     ; 

    ; calling function Bar_0, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val newBarPos original_param_name x                                
    ; param x, index_relative_to_bp -29                                             
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-116]                                                      
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding let val realVelocity original_param_name velocity                      
    ; param velocity, index_relative_to_bp -26                                      
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+-104]                                                      
    mov  dword [esp + 8], edx                                                       
    pop edx                                                                         ; tmp_for_move
    ; adding val actualTime                                                         
    ; param lastUpdate, index_relative_to_bp 3                                      
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 12], edx                                                      
    pop edx                                                                         ; tmp_for_move
    ; Calling function Bar_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:29:8
    call    Bar_0                                                                   
    add     esp,12                                                                  ; restore stack for Bar_0
    ; end calling function Bar_0                                                    





    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 116                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_24(value:List_11,Full:fn (HighScore_3,List_11) -> List_11,Empty:fn () -> List_11) -> List_11
match_24:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function EnumerateEntry_23_addRef(address:EnumerateEntry_23)                  
EnumerateEntry_23_addRef:                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:1:12
; function MenuState_0(highScores:Vec_0) -> MenuState_4                         
MenuState_0:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 4
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property highScores
    mov   ebx, [ebp+8]                                                          
    mov dword  [eax + 0], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:67:8
; function lambda246() -> World_6                                               
lambda246:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 112                                                                  ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_21, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding let val collision original_param_name value                            
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,20                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,52                                                                
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 32                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent ball
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent ball
    mov  dword ebx, [eax + 24]                                                      ; context parameter from parent lives
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent lives
    mov  dword ebx, [eax + 32]                                                      ; context parameter from parent newBar
    mov  dword [ecx + 20], ebx                                                      ; context parameter from parent newBar
    mov  dword ebx, [eax + 36]                                                      ; context parameter from parent newBricks
    mov  dword [ecx + 24], ebx                                                      ; context parameter from parent newBricks
    mov  dword ebx, [eax + 40]                                                      ; context parameter from parent newScore
    mov  dword [ecx + 28], ebx                                                      ; context parameter from parent newScore
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda272                                                      
    mov dword [ecx + 4], lambda272_add_ref                                          
    mov dword [ecx + 2 * 4], lambda272_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push ebx                                                                        ; tmp_register
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov dword ebx,ebp                                                               
    sub dword ebx,112                                                               
    mov     dword [ecx], ebx                                                        
    mov     dword [ecx + 4], 1                                                      
    mov     dword [ecx + 8], 40                                                     
    mov     dword [ecx + 12], 1                                                     
    mov     dword [ecx + 16], 0                                                     
    pop ebx                                                                         ; tmp_register
    push  dword ecx                                                                 
    mov    dword ecx, [ecx]                                                         
    push ebx                                                                        ; tmp_register
    push  dword eax                                                                 
    mov   dword eax, [ebp + 8]                                                      
    mov  dword ebx, [eax + 12]                                                      ; context parameter from parent actualTime
    mov  dword [ecx + 12], ebx                                                      ; context parameter from parent actualTime
    mov  dword ebx, [eax + 16]                                                      ; context parameter from parent ball
    mov  dword [ecx + 16], ebx                                                      ; context parameter from parent ball
    mov  dword ebx, [eax + 24]                                                      ; context parameter from parent lives
    mov  dword [ecx + 20], ebx                                                      ; context parameter from parent lives
    mov  dword ebx, [eax + 28]                                                      ; context parameter from parent newBall
    mov  dword [ecx + 24], ebx                                                      ; context parameter from parent newBall
    mov  dword ebx, [eax + 32]                                                      ; context parameter from parent newBar
    mov  dword [ecx + 28], ebx                                                      ; context parameter from parent newBar
    mov  dword ebx, [eax + 36]                                                      ; context parameter from parent newBricks
    mov  dword [ecx + 32], ebx                                                      ; context parameter from parent newBricks
    mov  dword ebx, [eax + 40]                                                      ; context parameter from parent newScore
    mov  dword [ecx + 36], ebx                                                      ; context parameter from parent newScore
    pop   eax                                                                       
    pop ebx                                                                         ; tmp_register
    mov dword [ecx], lambda273                                                      
    mov dword [ecx + 4], lambda273_add_ref                                          
    mov dword [ecx + 2 * 4], lambda273_deref                                        
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_21 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:68:14
    call    match_21                                                                
    add     esp,12                                                                  ; restore stack for match_21
    ; end calling function match_21                                                 

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 112                                                                  ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda680_add_ref(address:i32,descr:str)                             
lambda680_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     List_6_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:310:9
; function flatten_2(vec:Vec_11) -> Vec_3                                       
flatten_2:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling vecFlattenCreate_0
    push dword [ebp+8]
    call vecFlattenCreate_0
    add esp, 4

    push    eax

    push    ebx
    push    ecx
    push    edx

    mov     edx, [eax]
    add     edx, 4              ; the address of the value in the result array

    mov     dword eax, [ebp+8]
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]    ; the address of the allocation table of the inner array
    mov     dword ecx, [ecx]    ; the address of the memory of the inner array
    mov     dword eax, [ecx]    ; the size of the inner array
    shl     eax, 2              ; the length in bytes

    add     ecx, 4
    ; call macro, calling memcopy_0
    push dword eax
    push dword edx
    push dword ecx
    call memcopy_0
    add esp, 12

    pop     ecx

    add     ecx, 4
    add     edx, eax
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:26
; function lambda108() -> SDLWindow_2                                           
lambda108:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function sdlFailure_0, added to stack 0                               
    sub esp, 4                                                                      ; Prepare stack for parameters
    ; adding val message                                                            
    ; add_lambda_param_from_lambda_space, original_param_name message, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function sdlFailure_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:53:41
    call    sdlFailure_0                                                            
    add     esp,4                                                                   ; restore stack for sdlFailure_0
    ; end calling function sdlFailure_0                                             
    ; adding val value                                                              
    ; add_lambda_param_from_lambda_space, original_param_name value, lambda_space_index 2
    mov   dword eax,[edx + 16]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:87:28
; function lambda448()                                                          
lambda448:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:10:8
; function move_0(x:f32,xDir:XDirection_1,diff:f32) -> f32                      
move_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 80                                                                   ; reserve stack local vals (let)

    ; calling function match_35, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val xDir                                                               
    ; param value, index_relative_to_bp 3                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+12]                                                        
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,40                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter diff
    mov  dword [edx + 12], ecx                                                      ; context parameter diff
    mov  dword ecx, [ebp+8]                                                         ; context parameter x
    mov  dword [edx + 16], ecx                                                      ; context parameter x
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1204                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,60                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,80                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 20                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+16]                                                        ; context parameter diff
    mov  dword [edx + 12], ecx                                                      ; context parameter diff
    mov  dword ecx, [ebp+8]                                                         ; context parameter x
    mov  dword [edx + 16], ecx                                                      ; context parameter x
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda1205                                                     
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_35 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:11:10
    call    match_35                                                                
    add     esp,12                                                                  ; restore stack for match_35
    ; end calling function match_35                                                 

    add   esp, 80                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function MenuState_4_deref(address:MenuState_4)                               
MenuState_4_deref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:69
; function lambda1029(x:i32,y:i32) -> Brick_2                                   
lambda1029:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Brick_0, added to stack 0                                    
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function mul_0, added to stack 0 + 12         
    ; adding val x                                                                  
    ; param n1, index_relative_to_bp 3                                              

    push    edx
    mov     dword eax,[ebp+12]
    imul    dword eax,[const_8]
    pop     edx

    ; end inlining function mul_0                                                   
    mov dword [esp + 0], eax                                                        ; x = mul_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:87

    ; inlining function add_1, added to stack 0 + 12         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function mul_0, added to stack 0 + 12 + 4
    ; adding val y                                                                  
    ; param n1, index_relative_to_bp 4                                              

    push    edx
    mov     dword eax,[ebp+16]
    imul    dword eax,[const_9]
    pop     edx

    ; end inlining function mul_0                                                   
    mov dword [esp + 0], eax                                                        ; n2 = mul_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:125

    mov     eax, [const_12]
    add     eax, [ebp+-4-(0 + 12)-4]

    add     esp,4                                                                   ; restore stack for add_1
    ; end inlining function add_1                                                   
    mov dword [esp + 4], eax                                                        ; y = add_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:107
    push eax                                                                        
    mov dword eax, [const_16]                                                       ; static RED
    mov dword [esp + 12], eax                                                       ; static RED
    pop eax                                                                         
    ; Calling function Brick_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:25:83
    call    Brick_0                                                                 
    add     esp,12                                                                  ; restore stack for Brick_0
    ; end calling function Brick_0                                                  




    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda311_add_ref(address:i32,descr:str)                             
lambda311_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:33              
; function lambda823(v:HighScore_3) -> bool                                     
lambda823:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_16, added to stack 0                                   
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; calling function cmpFunction, added to stack 0 + 16     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param p_836, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name p_837, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function cmpFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:57
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,8                                                                   ; restore stack for cmpFunction
    ; end calling function cmpFunction                                              
    mov dword [esp + 0], eax                                                        ; value = cmpFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_252                                               
    mov  dword ecx, static_memory_253                                               
    mov dword [ecx], lambda839                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_254                                               
    mov  dword ecx, static_memory_255                                               
    mov dword [ecx], lambda840                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_256                                               
    mov  dword ecx, static_memory_257                                               
    mov dword [ecx], lambda841                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 16], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_16 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:45
    call    match_16                                                                
    add     esp,16                                                                  ; restore stack for match_16
    ; end calling function match_16                                                 

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:107:8             
; function listAppend_1(dest:List_11,source:List_11) -> List_11                 
listAppend_1:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 72                                                                   ; reserve stack local vals (let)

    ; calling function match_24, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val dest                                                               
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter source
    mov  dword [edx + 12], ecx                                                      ; context parameter source
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda940                                                      
    mov dword [edx + 4], lambda940_add_ref                                          
    mov dword [edx + 2 * 4], lambda940_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,56                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter source
    mov  dword [edx + 12], ecx                                                      ; context parameter source
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda941                                                      
    mov dword [edx + 4], lambda941_add_ref                                          
    mov dword [edx + 2 * 4], lambda941_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_24 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:108:10
    call    match_24                                                                
    add     esp,12                                                                  ; restore stack for match_24
    ; end calling function match_24                                                 

    add   esp, 72                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:648:9
; function addHeap_0(label:i32,descrLabel:i32,value:i32)                        
addHeap_0:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    push    ebx

    mov     dword ebx, [ebp+12]
    ; call macro, calling malloc_0
    push dword [ebx]
    push dword 4
    call malloc_0
    add esp, 8

    ; call macro, calling addRef_0
    push dword [ebx]
    push dword eax
    call addRef_0
    add esp, 8

    mov     dword ebx, [ebp+8]
    mov     dword [ebx], eax
    mov     dword eax, [eax]
    mov     dword ebx, [ebp+16]
    mov     dword [eax], ebx

    pop   ebx

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/print.rasm:25:8
; function print_2(file:File_6,n:i32) -> Option_12                              
print_2:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    esi
    push    ebx
    push    ecx
    push    edx

    ; TODO I cannot allocate memory here, because when we use print inside malloc for debug we enter in an infinite loop
    ;      but I don't like it because it is not thread safe
    ; $call(malloc, 20, " temp for print(i32)")
    ; we can immediately free the memory, because it is not "erased" and is not reused (malloc) in this function
    ; $call(freeMem, eax)
    ; mov     dword esi,[eax]
    mov     esi, _for_nprint

    add     esi,19

    mov     dword eax,[ebp+12] ; integer value to convert
    mov     dword ecx,[ebp+12]
    and     dword ecx,0x80000000
    jz      .positive
    xor     dword eax,0xFFFFFFFF
    inc     dword eax
    push    dword eax
    ; call macro, calling print_1
    push dword [_s_81]
    push dword [ebp+8]
    call print_1
    add esp, 8

    gotoOnSome .end
    pop eax
.positive:
    mov     byte [esi],0    ; String terminator

    mov ebx,10
    xor ecx,ecx         ; initialize length
.next_digit:
    xor edx,edx         ; Clear edx prior to dividing edx:eax by ebx
    div ebx             ; eax /= 10
    add dl,'0'          ; Convert the remainder to ASCII
    dec esi             ; store characters in reverse order
    inc ecx             ; length

    mov [esi],dl
    test eax,eax
    jnz .next_digit     ; Repeat until eax==0

    ; call macro, calling sysPrint_0
    push dword ecx
    push dword esi
    push dword [ebp+8]
    call sysPrint_0
    add esp, 12

.end:
    pop    edx
    pop    ecx
    pop    ebx
    pop    esi
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:2:7             
; function Option_Some_2(value:KeyEvent_15) -> Option_7                         
Option_Some_2:                                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 0                                                             
    mov   ebx, [ebp+8]                                                               ; parameter value
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; function lambda289_deref(address:i32,descr:str)                               
lambda289_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 4]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  


    ; deref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda151_deref(address:i32,descr:str)                               
lambda151_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function FileMode_24_addRef(address:FileMode_24)                              
FileMode_24_addRef:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 8]                                                        
    call     Vec_9_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:1:9
; function tof32_0(n:i32) -> f32                                                
tof32_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx

    ; $call(print, "tof32(", [ebp+8])
    ; $call(println, ")")
    mov     dword ebx,[ebp+8]
    mov     dword eax,[ebp+8]
    and     dword eax,0x80000000
    jz      .positive
    xor     dword ebx,0xFFFFFFFF
    add     dword ebx,1
.positive:
    ; call macro, calling countBits_0
    push dword ebx
    call countBits_0
    add esp, 4

    ; $call(println, " countBits ", eax)
    mov     dword ecx,24
    sub     dword ecx,eax
    add     dword eax,126
    shl     eax,23
    shl     dword ebx,cl
    and     dword ebx,0x7FFFFF
    or      dword eax,ebx
    ; $call(println, " = ", eax)
    ; sign
    mov     dword ebx,[ebp+8]
    and     dword ebx,0x80000000
    or      dword eax,ebx

    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:104:5             
; function lambda781() -> List_11                                               
lambda781:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function List_Empty_0, added to stack 0                              
    mov    eax, [_enum_List_Empty]

    ; end inlining function List_Empty_0                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:259:17
; function lambda919(entry:EnumerateEntry_10) -> bool                           
lambda919:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function eq_3, added to stack 0                                       
    sub esp, 8                                                                      ; Prepare stack for parameters

    ; inlining function value_1, added to stack 0 + 8        
    ; adding val entry                                                              
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function value_1                                                 
    mov dword [esp + 0], eax                                                        ; s1 = value_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:259:39

    ; add ref 
    push     dword eax                                                              
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; adding val what                                                               
    ; add_lambda_param_from_lambda_space, original_param_name s2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function eq_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:259:42
    call    eq_3                                                                    
    add     esp,8                                                                   ; restore stack for eq_3
    ; end calling function eq_3                                                     

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:275:9
; function greater_2(f1:f32,f2:f32) -> bool                                     
greater_2:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling cmp_3
    push dword [ebp+12]
    push dword [ebp+8]
    call cmp_3
    add esp, 8

    cmp     dword eax,0
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
    pop     ebp                                                                     
    ret                                                                             
; function lambda930_add_ref(address:i32,descr:str)                             
lambda930_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     List_9_addRef                                                          
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Vec_7_deref(address:Vec_7,descr:str)                                 
Vec_7_deref:                                                                    
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ; type Vec_7                                                                    
    push dword [ebp+12]                                                               
    push dword [ebp+8]                                                             
    call    deref_0                                                                 
    add  esp, 8                                                                     
    push  eax                                                                       
    push  ebx                                                                       
    push  ecx                                                                       
    push dword 0                                                                    
    push dword [ebp+8]                                                             
    call    VecReferences_0                                                         
    add  esp, 8                                                                     
    mov   dword ebx, [eax]                                                          
    mov   dword ecx, [ebx]                                                          
    add   ebx, 4                                                                    
.loop_0:                                                                        
    cmp   dword ecx, 0                                                              
    jz   .end_0                                                                     

    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx]                                                            
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    add   ebx, 4                                                                    
    dec ecx                                                                         
    jmp .loop_0                                                                     
.end_0:                                                                         
    pop  ecx                                                                        
    pop  ebx                                                                        
    pop  eax                                                                        


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:21:55
; function lambda405(h1:HighScore_3,h2:HighScore_3) -> Compare_5                
lambda405:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; inlining function score_0, added to stack 0                                   
    ; adding val h1                                                                 
    ; param v, index_relative_to_bp 3                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function score_0                                                 
    mov dword [ebp + -4], eax                                                       ; 

    ; inlining function score_0, added to stack 0                                   
    ; adding val h2                                                                 
    ; param v, index_relative_to_bp 4                                               
    push ebx                                                                        
    mov   dword ebx, [ebp+16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 0]                                                       
    pop   ebx                                                                       

    ; end inlining function score_0                                                 
    mov dword [ebp + -8], eax                                                       ; 

    ; calling function cmp_0, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val s2 original_param_name a                                       
    ; param a, index_relative_to_bp -2                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-8]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding let val s1 original_param_name b                                       
    ; param b, index_relative_to_bp -1                                              
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+-4]                                                        
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function cmp_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/menu.rasm:24:12
    call    cmp_0                                                                   
    add     esp,8                                                                   ; restore stack for cmp_0
    ; end calling function cmp_0                                                    

    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/io/file.rasm:46:9
; function lambda1191() -> i32                                                  
lambda1191:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 1                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda371_add_ref(address:i32,descr:str)                             
lambda371_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function Pair_12_addRef(address:Pair_12)                                      
Pair_12_addRef:                                                                 
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    ;                                                                               
    push dword [_s_1]                                                               
    push dword [ebp+8]                                                             
    call    addRef_0                                                                
    add  esp, 8                                                                     
    push dword ebx                                                                  
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop ebx                                                                         


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function match_1(value:KeyState_7,Down:fn () -> Vec_5,Up:fn () -> Vec_5) -> Vec_5
match_1:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                     
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_85]
    push dword 1
    call print_1
    add esp, 8
                         
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:11:39
; function lambda1205() -> f32                                                  
lambda1205:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function add_4, added to stack 0                                      
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val x                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name f1, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val diff                                                               
    ; add_lambda_param_from_lambda_space, original_param_name f2, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function add_4 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/direction.rasm:11:47
    call    add_4                                                                   
    add     esp,8                                                                   ; restore stack for add_4
    ; end calling function add_4                                                    

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda740_deref(address:i32,descr:str)                               
lambda740_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     str_deref_0                                                            
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda133_add_ref(address:i32,descr:str)                             
lambda133_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_0_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 8]                                                        
    call     addRef_0                                                               
    add      esp,8                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:20:8
; function initialGameState_0() -> GameState_5                                  
initialGameState_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 16                                                                   ; reserve stack local vals (let)

    ; calling function GameState_0, added to stack 0                                
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; inlining function GameStage_Run_0, added to stack 0 + 12
    mov    eax, [_enum_GameStage_Run]

    ; end inlining function GameStage_Run_0                                         
    mov dword [esp + 0], eax                                                        ; stage = GameStage_Run_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:24

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; calling function initialWorld_0, added to stack 0 + 12  
    ; Calling function initialWorld_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:45
    call    initialWorld_0                                                          
    ; end calling function initialWorld_0                                           
    mov dword [esp + 4], eax                                                        ; world = initialWorld_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:45

    ; add ref 
    push     dword eax                                                              
    call     World_6_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    

    ; calling function FPS_0, added to stack 0 + 12           
    sub esp, 12                                                                     ; Prepare stack for parameters
    mov dword [esp + 0], 0                                                          

    ; calling function now_0, added to stack 0 + 12 + 12
    ; Calling function now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:59
    call    now_0                                                                   
    ; end calling function now_0                                                    
    mov dword [esp + 4], eax                                                        ; lastFPSUpdate = now_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:59

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 12], eax                                                   
    mov dword [esp + 8], 0                                                          
    ; Calling function FPS_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:52
    call    FPS_0                                                                   
    add     esp,12                                                                  ; restore stack for FPS_0
    ; end calling function FPS_0                                                    
    mov dword [esp + 8], eax                                                        ; fps = FPS_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:52

    ; add ref 
    push     dword eax                                                              
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 16], eax                                                   
    ; Calling function GameState_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:21:14
    call    GameState_0                                                             
    add     esp,12                                                                  ; restore stack for GameState_0
    ; end calling function GameState_0                                              

    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 16]                                                       
    call     FPS_9_deref                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 12]                                                       
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    add   esp, 16                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function match_29(value:List_9,Full:fn (str,List_9) -> List_6,Empty:fn () -> List_6) -> List_6
match_29:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                   
    mov dword ebx,[ebx]                                                             
    ; param tail                                                                    
    push dword [eax + 4]                                                            
    ; param head                                                                    
    push dword [eax + 8]                                                            
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 12                                                                    
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                  
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_93]
    push dword 1
    call print_1
    add esp, 8
                             
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:102:9
; function Stage_Game_0(gameState:GameState_5) -> Stage_0                       
Stage_Game_0:                                                                   
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                   
    push dword eax                                                                  
    mov dword eax,[eax]                                                             
    mov dword  [eax], 1                                                             
    mov   ebx, [ebp+8]                                                           ; parameter gameState
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:1:12
; function Ball_0(x:f32,y:f32,xDir:XDirection_1,yDir:YDirection_2,lastUpdate:TimeVal_1) -> Ball_7
Ball_0:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 20
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property x
    mov   ebx, [ebp+8]                                                                   
    mov dword  [eax + 0], ebx                                                       

    ; property y
    mov   ebx, [ebp+12]                                                                   
    mov dword  [eax + 4], ebx                                                       

    ; property xDir
    mov   ebx, [ebp+16]                                                                
    mov dword  [eax + 8], ebx                                                       

    ; property yDir
    mov   ebx, [ebp+20]                                                                
    mov dword  [eax + 12], ebx                                                      

    ; property lastUpdate
    mov   ebx, [ebp+24]                                                          
    mov dword  [eax + 16], ebx                                                      
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:33              
; function lambda827(v:HighScore_3) -> bool                                     
lambda827:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 4                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function match_16, added to stack 0                                   
    sub esp, 16                                                                     ; Prepare stack for parameters

    ; calling function cmpFunction, added to stack 0 + 16     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val v                                                                  
    ; param p_854, index_relative_to_bp 3                                           
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [ebp+12]                                                        
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val f                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name p_855, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    mov eax, edx                                                                    
    add eax, 12                                                                     ; address to the pointer to the allocation table of the lambda to call
    mov eax, [eax]                                                                  ; address of the allocation table of the function to call
    mov eax, [eax]                                                                  ; address to the "lambda space" of the function to call
    ; Calling function cmpFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:57
    ; address to the "lambda space" of the function to call                         
    push dword eax                                                                  
    call    [eax]                                                                   
    add  esp, 4                                                                     
    add     esp,8                                                                   ; restore stack for cmpFunction
    ; end calling function cmpFunction                                              
    mov dword [esp + 0], eax                                                        ; value = cmpFunction : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:57

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_264                                               
    mov  dword ecx, static_memory_265                                               
    mov dword [ecx], lambda857                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 8], ecx                                                        
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_266                                               
    mov  dword ecx, static_memory_267                                               
    mov dword [ecx], lambda858                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 12], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    push ecx                                                                        ; this_lambda_space_address
    push  dword static_allocation_268                                               
    mov  dword ecx, static_memory_269                                               
    mov dword [ecx], lambda859                                                      
    mov dword [ecx + 4], addRef_0                                                   
    mov dword [ecx + 2 * 4], deref_0                                                
    pop   ecx                                                                       
    mov dword [esp + 16], ecx                                                       
    pop ecx                                                                         ; this_lambda_space_address
    ; Calling function match_16 : file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:52:45
    call    match_16                                                                
    add     esp,16                                                                  ; restore stack for match_16
    ; end calling function match_16                                                 

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 4                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:261:8
; function lambda721()                                                          
lambda721:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda740_add_ref(address:i32,descr:str)                             
lambda740_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     str_addRef_0                                                           
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:87:36
; function lambda449()                                                          
lambda449:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push eax                                                                        ; return register
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function render_3, added to stack 0                                   
    sub esp, 16                                                                     ; Prepare stack for parameters
    ; adding val ren                                                                
    ; add_lambda_param_from_lambda_space, original_param_name ren, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val resources                                                          
    ; add_lambda_param_from_lambda_space, original_param_name resources, lambda_space_index 3
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 20]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; inlining function world_0, added to stack 0 + 16        
    ; adding val gameState                                                          
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 4]                                                       
    pop   ebx                                                                       

    ; end inlining function world_0                                                 
    mov dword [esp + 8], eax                                                        ; world = world_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:88:47

    ; add ref 
    push     dword eax                                                              
    call     World_6_addRef                                                         
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    

    ; inlining function fps_1, added to stack 0 + 16          
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function fps_0, added to stack 0 + 16 + 4
    ; adding val gameState                                                          
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    ; end inlining function fps_0                                                   
    mov dword [esp + 0], eax                                                        ; v = fps_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:88:62

    ; add ref 
    push     dword eax                                                              
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    push ebx                                                                        
    mov   dword ebx, [ebp+-4-(0 + 16)-16]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 8]                                                       
    pop   ebx                                                                       

    add     esp,4                                                                   ; restore stack for fps_1
    ; end inlining function fps_1                                                   
    mov dword [esp + 12], eax                                                       ; fps = fps_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:88:66
    ; Calling function render_3 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/game.rasm:88:15
    call    render_3                                                                
    add     esp,16                                                                  ; restore stack for render_3
    ; end calling function render_3                                                 


    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 8]                                                        
    call     FPS_9_deref                                                            
    add      esp,4                                                                  



    ; scope pop                                                                     

    ; deref 
    push     dword [ebp - 4]                                                        
    call     World_6_deref                                                          
    add      esp,4                                                                  



    pop edx                                                                         ; restoring lambda_space_address

    pop eax                                                                         ; restoring return register
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/math.rasm:1:8               
; function min_1(a:i32,b:i32) -> i32                                            
min_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; inlining function if_16, added to stack 0                                     
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function less_1, added to stack 0 + 4        
    ; adding val a                                                                  
    ; param a, index_relative_to_bp 2                                               
    ; adding val b                                                                  
    ; param b, index_relative_to_bp 3                                               

    mov     eax,[ebp+8]
    cmp     eax,[ebp+12]
    mov     eax,1 ; true
    jl     $+7
    mov     eax,0 ; false

    ; end inlining function less_1                                                  
    mov dword [esp + 0], eax                                                        ; cond = less_1 : file:////home/enrico/development/rust/rasm/stdlib/math.rasm:2:12
    ; adding val a                                                                  
    ; param trueVal, index_relative_to_bp 2                                         
    ; adding val b                                                                  
    ; param falseVal, index_relative_to_bp 3                                        

    push  ebx
    push  edx

    mov   dword eax, [ebp+-4-(0)-0]
    imul  dword eax, [ebp+8]
    mov   dword ebx, [ebp+-4-(0)-0]
    xor   dword ebx, 1
    imul  dword ebx, [ebp+12]
    add   dword eax, ebx

    pop   edx
    pop   ebx

    add     esp,4                                                                   ; restore stack for if_16
    ; end inlining function if_16                                                   


    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:61
; function lambda1121() -> Ball_7                                               
lambda1121:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 8                                                                    ; reserve stack local vals (let)
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function yDir_1, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding val ball                                                               
    ; add_lambda_param_from_lambda_space, original_param_name receiver, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move

    ; calling function flip_0, added to stack 0 + 8         
    sub esp, 4                                                                      ; Prepare stack for parameters

    ; inlining function yDir_0, added to stack 0 + 8 + 4
    ; adding val ball                                                               
    ; add_lambda_param_from_lambda_space, original_param_name v, lambda_space_index 1
    push ebx                                                                        
    mov   dword ebx, [edx + 12]                                                             
    mov   dword ebx, [ebx]                                                          
    mov dword  eax, [ebx + 12]                                                      
    pop   ebx                                                                       

    ; end inlining function yDir_0                                                  
    mov dword [esp + 0], eax                                                        ; yDir = yDir_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:85

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 4], eax                                                    
    ; Calling function flip_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:90
    call    flip_0                                                                  
    add     esp,4                                                                   ; restore stack for flip_0
    ; end calling function flip_0                                                   
    mov dword [esp + 4], eax                                                        ; v = flip_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:90

    ; add ref 
    push  dword [_s_1]                                                              
    push     dword eax                                                              
    call     addRef_0                                                               
    add      esp,8                                                                  
    ; scope push                                                                    
    mov     dword [ebp - 8], eax                                                    
    ; Calling function yDir_1 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:78:75
    call    yDir_1                                                                  
    add     esp,8                                                                   ; restore stack for yDir_1
    ; end calling function yDir_1                                                   

    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 8]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    ; scope pop                                                                     

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp - 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  



    pop edx                                                                         ; restoring lambda_space_address
    add   esp, 8                                                                    ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:98:9
; function sdlCreateTextureFromSurface_0(ren:SDLRenderer_1,surface:SDLSurface_12) -> SDLTexture_13
sdlCreateTextureFromSurface_0:                                                  
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; ccall macro, calling SDL_CreateTextureFromSurface
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 8
    and   esp,0xfffffff0
    mov dword ecx, [ebp+12]
    mov dword [esp+4], ecx

    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_CreateTextureFromSurface
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx


    pop     ebp                                                                     
    ret                                                                             
; function lambda1178_add_ref(address:i32,descr:str)                            
lambda1178_add_ref:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 0]                                                        
    call     Vec_5_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 4]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:15:9
; function vecOf_2(v1:Vec_0,v2:Vec_0) -> Vec_7                                  
vecOf_2:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_111]
    push dword 12
    call malloc_0
    add esp, 8

    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 2

    push    ebx

    mov     dword ebx, [ebp+8]
    mov     dword [eax + 4], ebx
    mov     dword ebx, [ebp+12]
    mov     dword [eax + 8], ebx
    pop     ebx
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:190:4
; function loadHighScores_0() -> Vec_0                                          
loadHighScores_0:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; inlining function if_1, added to stack 0                                      
    sub esp, 12                                                                     ; Prepare stack for parameters

    ; calling function fileExists_0, added to stack 0 + 12     
    sub esp, 4                                                                      ; Prepare stack for parameters
    push eax                                                                        
    mov dword eax, [_s_175]                                                         
    mov dword [esp + 4], eax                                                        
    pop eax                                                                         
    ; Calling function fileExists_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:191:18
    call    fileExists_0                                                            
    add     esp,4                                                                   ; restore stack for fileExists_0
    ; end calling function fileExists_0                                             
    mov dword [esp + 0], eax                                                        ; cond = fileExists_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/breakout.rasm:191:18
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_176                                               
    mov  dword edx, static_memory_177                                               
    mov dword [edx], lambda82                                                       
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push  dword static_allocation_178                                               
    mov  dword edx, static_memory_179                                               
    mov dword [edx], lambda83                                                       
    mov dword [edx + 4], addRef_0                                                   
    mov dword [edx + 2 * 4], deref_0                                                
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address

    mov     eax,[ebp+-12-(0)-0]
    cmp     eax, 0
    jz      $+19
    mov     eax, [ebp+-8-(0)-0]     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, [ebp+-4-(0)-0]    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop

    add     esp,12                                                                  ; restore stack for if_1
    ; end inlining function if_1                                                    


    pop     ebp                                                                     
    ret                                                                             
; function match_13(value:GameStage_0,RunBall:fn () -> GameState_5,Run:fn () -> GameState_5) -> GameState_5
match_13:                                                                       
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    mov dword eax, [ebp+8]                                                           
    mov dword eax, [eax]                                                            
    cmp dword [eax], 0                                                              
    jnz .variant0                                                                   
    mov ebx,[ebp+12]                                                                
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant0:                                                                      
    cmp dword [eax], 1                                                              
    jnz .variant1                                                                   
    mov ebx,[ebp+16]                                                                    
    mov dword ebx,[ebx]                                                             
    push dword ebx                                                                  
    call    [ebx]                                                                   
    add  esp, 4                                                                     
    jmp .end                                                                        
.variant1:                                                                      
; call macro, calling print_1
    push dword [_s_91]
    push dword 1
    call print_1
    add esp, 8
                        
; call macro, calling print_2
    push dword [eax]
    push dword 1
    call print_2
    add esp, 8
                                                     
; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8
                                                      
.end:                                                                           
    pop ebx                                                                         
    pop     ebp                                                                     
    ret                                                                             
; function lambda818_deref(address:i32,descr:str)                               
lambda818_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 2 * 4]                                                    
    add      esp,12                                                                 
    pop      dword eax                                                              


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 4]                                                        
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:51:79              
; function lambda849() -> bool                                                  
lambda849:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 1                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; function lambda371_deref(address:i32,descr:str)                               
lambda371_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 4]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda1121_deref(address:i32,descr:str)                              
lambda1121_deref:                                                               
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_deref                                                           
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda825_add_ref(address:i32,descr:str)                             
lambda825_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword eax                                                              
    push     dword 0                                                                
    mov      dword eax,[ebx + 0]                                                    
    mov      dword [esp],eax                                                        
    mov      dword eax,[eax]                                                        
    push     dword [_s_1]                                                           
    push     dword [esp + 4]                                                        
    call     dword [eax + 4]                                                        
    add      esp,12                                                                 
    pop      dword eax                                                              

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/list.rasm:47:8              
; function push_1(l:List_9,value:str) -> List_9                                 
push_1:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 
    sub   esp, 72                                                                   ; reserve stack local vals (let)

    ; calling function match_23, added to stack 0                                   
    sub esp, 12                                                                     ; Prepare stack for parameters
    ; adding val l                                                                  
    ; param value, index_relative_to_bp 2                                           
    push edx                                                                        ; tmp_for_move
    mov  dword edx, [ebp+8]                                                         
    mov  dword [esp + 4], edx                                                       
    pop edx                                                                         ; tmp_for_move
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,20                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,36                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter value
    mov  dword [edx + 12], ecx                                                      ; context parameter value
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda739                                                      
    mov dword [edx + 4], lambda739_add_ref                                          
    mov dword [edx + 2 * 4], lambda739_deref                                        
    pop   edx                                                                       
    mov dword [esp + 8], edx                                                        
    pop edx                                                                         ; this_lambda_space_address
    push edx                                                                        ; this_lambda_space_address
    push ecx                                                                        ; tmp_register
    mov dword edx,ebp                                                               
    sub dword edx,56                                                                
    mov dword ecx,ebp                                                               
    sub dword ecx,72                                                                
    mov     dword [edx], ecx                                                        
    mov     dword [edx + 4], 1                                                      
    mov     dword [edx + 8], 16                                                     
    mov     dword [edx + 12], 1                                                     
    mov     dword [edx + 16], 0                                                     
    pop ecx                                                                         ; tmp_register
    push  dword edx                                                                 
    mov    dword edx, [edx]                                                         
    push ecx                                                                        ; tmp_register
    mov  dword ecx, [ebp+12]                                                        ; context parameter value
    mov  dword [edx + 12], ecx                                                      ; context parameter value
    pop ecx                                                                         ; tmp_register
    mov dword [edx], lambda740                                                      
    mov dword [edx + 4], lambda740_add_ref                                          
    mov dword [edx + 2 * 4], lambda740_deref                                        
    pop   edx                                                                       
    mov dword [esp + 12], edx                                                       
    pop edx                                                                         ; this_lambda_space_address
    ; Calling function match_23 : file:////home/enrico/development/rust/rasm/stdlib/list.rasm:48:10
    call    match_23                                                                
    add     esp,12                                                                  ; restore stack for match_23
    ; end calling function match_23                                                 

    add   esp, 72                                                                   ; restore stack local vals (let)
    pop     ebp                                                                     
    ret                                                                             
; function lambda272_add_ref(address:i32,descr:str)                             
lambda272_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     Ball_7_addRef                                                          
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_3_addRef                                                           
    add      esp,4                                                                  
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; function lambda288_deref(address:i32,descr:str)                               
lambda288_deref:                                                                
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     deref_0                                                                
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; deref 
    push  dword [_s_1]                                                              
    push     dword [ebx + 0]                                                        
    call     deref_0                                                                
    add      esp,8                                                                  


    ; deref 
    push     dword [ebx + 8]                                                        
    call     Bar_8_deref                                                            
    add      esp,4                                                                  


    ; deref 
    push     dword [_s_1]                                                           
    push     dword [ebx + 12]                                                       
    call     Vec_3_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  

    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/bar.rasm:1:12
; function Bar_0(x:f32,velocity:i32,lastUpdate:TimeVal_1) -> Bar_8              
Bar_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 12
    call malloc_0
    add esp, 8
                                                           
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property x
    mov   ebx, [ebp+8]                                                                   
    mov dword  [eax + 0], ebx                                                       

    ; property velocity
    mov   ebx, [ebp+12]                                                            
    mov dword  [eax + 4], ebx                                                       

    ; property lastUpdate
    mov   ebx, [ebp+16]                                                          
    mov dword  [eax + 8], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/core.rasm:225:9
; function deref_0(address:i32,descr:str) -> i32                                
deref_0:                                                                        
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    eax
    push    ebx

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_33]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword [ebp+8]
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_25]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [ebp+12]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    %ifdef LOG_DEBUG
    push    eax
    mov     dword eax, _reusable_heap_table
    mov     dword ebx, [_reusable_heap_table_next]
    sub     ebx,eax
    ; call macro, calling print_1
    push dword [_s_27]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword ebx
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    %ifdef LOG_DEBUG
    ; we check if the address is valid
    mov     dword eax,_heap_table
    cmp     dword [ebp+8],eax
    jb     .invalid_address
    add     eax,[_heap_table_size]
    cmp     dword [ebp+8],eax
    jg      .invalid_address
    %endif

    mov     dword eax,[ebp+8]
    mov     dword ebx,[eax + 12] ; the count

    %ifdef LOG_DEBUG
    test    ebx,ebx
    jz      .negative_count
    %endif

    sub     ebx,1

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_29]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword ebx
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword [eax + 12],ebx
    test    ebx,ebx
    jnz     .end

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_35]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_2
    push dword eax
    push dword 1
    call print_2
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    mov     dword [eax + 4],0; allocated false
    mov     dword ebx,[_reusable_heap_table_next]
    mov     dword [eax + 16],ebx; reusable table
    mov     dword [ebx],eax

    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_37]
    push dword 1
    call print_1
    add esp, 8
;
    ; call macro, calling print_2
    push dword ebx
    push dword 1
    call print_2
    add esp, 8
;
    ; call macro, calling print_1
    push dword [_s_39]
    push dword 1
    call print_1
    add esp, 8
;
    ; call macro, calling print_2
    push dword [ebx]
    push dword 1
    call print_2
    add esp, 8
;
    pop     eax
    %endif

    add     ebx,4
    mov     dword [_reusable_heap_table_next],ebx

    jmp     .end
.negative_count:
    ; call macro, calling print_1
    push dword [_s_41]
    push dword 1
    call print_1
    add esp, 8
;
    ; call macro, calling print_1
    push dword [ebp+12]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling print_1
    push dword [_s_23]
    push dword 1
    call print_1
    add esp, 8

    ; call macro, calling exitMain_0
    push dword 1
    call exitMain_0
    add esp, 4
;
.invalid_address:
    ; call macro, calling invalidAddress_0

    call invalidAddress_0
    add esp, 0

.end:
    %ifdef LOG_DEBUG
    push    eax
    ; call macro, calling print_1
    push dword [_s_43]
    push dword 1
    call print_1
    add esp, 8

    pop     eax
    %endif

    pop     ebx
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/option.rasm:35:14           
; function lambda972(v:IOError_16) -> Option_12                                 
lambda972:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    ; adding val o                                                                  
    ; add_lambda_param_from_lambda_space, original_param_name o, lambda_space_index 1
    mov   dword eax,[edx + 12]                                                      

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:163:12
; function KeyEvent_0(key:i32,state:KeyState_7) -> KeyEvent_15                  
KeyEvent_0:                                                                     
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push ebx                                                                        
    ; call macro, calling malloc_0
    push dword [_s_1]
    push dword 8
    call malloc_0
    add esp, 8
                                                            
    push dword eax                                                                  
    mov dword eax, [eax]                                                            

    ; property key
    mov   ebx, [ebp+8]                                                                 
    mov dword  [eax + 0], ebx                                                       

    ; property state
    mov   ebx, [ebp+12]                                                               
    mov dword  [eax + 4], ebx                                                       
    pop   eax                                                                       
    pop   ebx                                                                       
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/vec.rasm:50:78              
; function lambda840() -> bool                                                  
lambda840:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param
    mov     dword eax, 0                                                            

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:486:9
; function Vec_1() -> Vec_0                                                     
Vec_1:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling malloc_0
    push dword [_s_75]
    push dword 4
    call malloc_0
    add esp, 8

    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 0
    pop     eax
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/vec.rasm:147:9
; function map_2(vec:Vec_10,f:fn (EnumerateEntry_17) -> HighScore_3) -> Vec_0   
map_2:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, [ebp+8]
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    push    ecx
    inc     ecx                 ; + 1 for the size
    add     ecx, ecx
    add     ecx, ecx
    ; call macro, calling malloc_0
    push dword [_s_127]
    push dword ecx
    call malloc_0
    add esp, 8

    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; call macro, calling addRef_0
    push dword [_s_129]
    push dword eax
    call addRef_0
    add esp, 8

    pop     ecx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], ecx
    mov     edx, eax
    add     edx, 4          ; address of first value to write
    add     ebx, 4          ; address of first value to read
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, [ebp+12]
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    
    ; add ref 
    push     dword eax                                                              
    call     HighScore_3_addRef                                                     
    add      esp,4                                                                  

    mov     dword [edx], eax
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    
    ; deref 
    push     dword [_s_1]                                                           
    push     dword eax                                                              
    call     Vec_0_deref                                                            
    add      esp,4                                                                  
    add      esp,4                                                                  


    pop     edx
    pop     ecx
    pop     ebx
    pop     ebp                                                                     
    ret                                                                             
; function lambda189_add_ref(address:i32,descr:str)                             
lambda189_add_ref:                                                              
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; add ref simple 
    push  dword [_s_1]                                                              
    push     dword [ebp+8]                                                         
    call     addRef_0                                                               
    add      esp,8                                                                  
    push   ebx                                                                      
    mov dword ebx, [ebp+8]                                                         
    mov dword ebx, [ebx]                                                            
    add dword ebx, 12                                                               

    ; add ref 
    push     dword [ebx + 0]                                                        
    call     FPS_9_addRef                                                           
    add      esp,4                                                                  

    ; add ref 
    push     dword [ebx + 4]                                                        
    call     GameState_5_addRef                                                     
    add      esp,4                                                                  
    pop   ebx                                                                       


    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/f32.rasm:308:9
; function less_3(f1:f32,n2:i32) -> bool                                        
less_3:                                                                         
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    ; call macro, calling cmp_2
    push dword [ebp+12]
    push dword [ebp+8]
    call cmp_2
    add esp, 8

    cmp     dword eax,0x100
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/stdlib/backend/nasm-i32/time.rasm:6:9
; function now_0() -> TimeVal_1                                                 
now_0:                                                                          
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals

    push    ecx
    push    ebx
    ; call macro, calling TimeVal_0
    push dword 0
    push dword 0
    call TimeVal_0
    add esp, 8

    push    dword eax
    mov     ebx, [eax]
    ; call macro, calling malloc_0
    push dword [_s_121]
    push dword 8
    call malloc_0
    add esp, 8

    ; call macro, calling freeMem_0
    push dword eax
    call freeMem_0
    add esp, 4

    mov     dword ecx, [eax]  ; timezone
    mov     eax, 78           ; call number = gettimeofday
    int     0x80
    pop     eax
    pop     ebx
    pop     ecx
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:37:9
; function lambda353() -> Pair_11                                               
lambda353:                                                                      
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push edx                                                                        ; lambda_space_address
    mov     edx, [ebp+8]                                                            ; The address to the lambda space for inline lambda param

    ; calling function Pair_0, added to stack 0                                     
    sub esp, 8                                                                      ; Prepare stack for parameters
    ; adding let val newX original_param_name first                                 
    ; add_lambda_param_from_lambda_space, original_param_name first, lambda_space_index 1
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 12]                                                      
    mov  dword [esp + 4], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; adding val xDir                                                               
    ; add_lambda_param_from_lambda_space, original_param_name second, lambda_space_index 2
    push ecx                                                                        ; tmp_for_move
    mov  dword ecx, [edx + 16]                                                      
    mov  dword [esp + 8], ecx                                                       
    pop ecx                                                                         ; tmp_for_move
    ; Calling function Pair_0 : file:////home/enrico/development/rust/rasm/rasm/resources/examples/breakout/src/ball.rasm:37:18
    call    Pair_0                                                                  
    add     esp,8                                                                   ; restore stack for Pair_0
    ; end calling function Pair_0                                                   

    pop edx                                                                         ; restoring lambda_space_address
    pop     ebp                                                                     
    ret                                                                             
; file:////home/enrico/development/rust/rasm/rasm/resources/examples/sdl/sdl.rasm:126:9
; function sdlDestroyWindow_0(win:SDLWindow_2)                                  
sdlDestroyWindow_0:                                                             
    push    ebp                                                                     
    mov     ebp,esp                                                                 

    ; NO local vals
    push eax                                                                        ; return register

    ; ccall macro, calling SDL_DestroyWindow
    push   edx
    push   ebx
    push   ecx
    mov   dword ebx, esp
    sub   esp, 4
    and   esp,0xfffffff0
    mov dword ecx, [ebp+8]
    mov dword [esp+0], ecx

    call SDL_DestroyWindow
    mov   esp,ebx
    pop   ecx
    pop   ebx
    pop   edx



    pop eax                                                                         ; restoring return register
    pop     ebp                                                                     
    ret                                                                             
