<root>
<log message="project RasmProject { root: &quot;resources/test/lambda_in_struct.rasm&quot;, config: RasmConfig { package: RasmPackage { name: &quot;&quot;, version: &quot;1.0.0&quot;, main: Some(&quot;lambda_in_struct.rasm&quot;), out: Some(&quot;resources/test/lambda_in_struct&quot;), source_folder: Some(&quot;resources/test&quot;) }, dependencies: Some({&quot;stdlib&quot;: Table({&quot;path&quot;: String(&quot;/home/enrico/development/rust/rasm/stdlib&quot;)})}) }, from_file: true }"/>
<log message="transform_statements expected_return_type None"/>
<children>
<log message="type_of_expression &quot;/home/enrico/development/rust/rasm/rasm/resources/test&quot; expected type None"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="type_of_expression &quot;/home/enrico/development/rust/rasm/rasm/resources/test&quot; expected type None"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="transform_call Loop({ time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; },{ model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }) expected_return_type None"/>
<children>
<log message="get_valid_function call Loop({ time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; },{ model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:11:13"/>
<log message="verifying function asm :lambda_in_struct Loop&lt;T&gt;(update:fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt;,render:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr { time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; }"/>
<log message="real expression : { time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; }"/>
<log message="real type of expression : fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt;"/>
<log message="added parameter time -&gt; time:i32 to context"/>
<log message="added parameter model -&gt; model:T to context"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;T&gt;)"/>
<children>
<log message="transform_call if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }) expected_return_type Some(:lambda_in_struct:Option&lt;T&gt;)"/>
<children>
<log message="get_valid_function call if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }) expected_return_type Some(:lambda_in_struct:Option&lt;T&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:11"/>
<log message="verifying function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,ftrue:fn () -&gt; T,ffalse:fn () -&gt; T) -&gt; T"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;T&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="cannot find a function with name greater"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : fn () -&gt; T"/>
<log message="transform_statements expected_return_type Some(T)"/>
<children>
<log message="transform_call NoneModel() expected_return_type Some(T)"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type Some(T): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="cannot find a function with name NoneModel"/>
<log message="Found functions: "/>
<log message="adding new function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(fn () -&gt; T)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn () -&gt; T effective_type  fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="result T=:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; T filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="cannot find a function with name x"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="cannot find a function with name y"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Model(add(x,1),add(y,1))"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(add(x,1),add(y,1))"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:35"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(x,1)"/>
<log message="real expression : add(x,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(x,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(x,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:39"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(x,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="cannot find a function with name add"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(x,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr add(y,1)"/>
<log message="real expression : add(y,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(y,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(y,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:50"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(y,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(y,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(add(x,1),add(y,1)) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="cannot find a function with name Model"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(Model(add(x,1),add(y,1))) return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Model)"/>
<log message="cannot find a function with name Option::Some"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
</children>
<log message="type_of_expression {  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1))) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters , return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_NoneModel__OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Model(add(x,1),add(y,1))"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(add(x,1),add(y,1))"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:35"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(x,1)"/>
<log message="real expression : add(x,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(x,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(x,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:39"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(x,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(x,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr add(y,1)"/>
<log message="real expression : add(y,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(y,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(y,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:50"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(y,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(y,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(add(x,1),add(y,1)) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(Model(add(x,1),add(y,1))) return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Model), return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:option:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function stdlib_option_Option_Some_Model_OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1))) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,trueVal:T,falseVal:T) -&gt; T"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;T&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : T"/>
<log message="transform_statements expected_return_type None"/>
<children>
<log message="transform_call NoneModel() expected_return_type None"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters , return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_NoneModel__OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(T)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type T filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Model(add(x,1),add(y,1))"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(add(x,1),add(y,1))"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:35"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(x,1)"/>
<log message="real expression : add(x,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(x,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(x,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:39"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(x,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(x,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr add(y,1)"/>
<log message="real expression : add(y,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(y,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(y,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:50"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(y,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(y,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(add(x,1),add(y,1)) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(Model(add(x,1),add(y,1))) return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Model), return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:option:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function stdlib_option_Option_Some_Model_OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1))) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="something substituted T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters , return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_NoneModel__OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Model(add(x,1),add(y,1))"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(add(x,1),add(y,1))"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:35"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(x,1)"/>
<log message="real expression : add(x,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(x,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(x,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:39"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(x,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(x,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr add(y,1)"/>
<log message="real expression : add(y,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(y,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(y,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:50"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(y,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(y,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(add(x,1),add(y,1)) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(Model(add(x,1),add(y,1))) return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Model), return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:option:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function stdlib_option_Option_Some_Model_OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1))) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 368934881474191032"/>
</children>
<log message="verifying function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,vtrue:T,ffalse:fn () -&gt; T) -&gt; T"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;T&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : T"/>
<log message="transform_statements expected_return_type None"/>
<children>
<log message="transform_call NoneModel() expected_return_type None"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters , return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_NoneModel__OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(T)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type T filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
</children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="something substituted T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters , return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_NoneModel__OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
</children>
</children>
</children>
<log message="ignored function due to cannot find a valid function from namespace :lambda_in_struct 
for call Option::Some : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23 
expected return type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)
 : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23
converting expression, expected_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23
transforming expressions, expected_return_type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) : :0:0
converting expression, expected_type Some(fn () -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:15:13
"/>
</children>
<log message="found valid function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,ftrue:fn () -&gt; T,ffalse:fn () -&gt; T) -&gt; T"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }) return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(bool), Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;), Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="cannot find a function with name if"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:conditionals stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(cond:bool,ftrue:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;,ffalse:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
</children>
<log message="type_of_expression { time,model -&gt; stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(stdlib_i32_greater_i32_i32_bool(time,5),{  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; },{  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; });
; } expected type Some(fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt;)"/>
<children>
<log message="added parameter time -&gt; time:i32 to context"/>
<log message="added parameter model -&gt; model:T to context"/>
<log message="type_of_expression stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(stdlib_i32_greater_i32_i32_bool(time,5),{  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; },{  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; }) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Lambda(2, Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)))"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Lambda(2, Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)))"/>
<log message="almost_same_type fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt; filter Lambda(2, Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr { model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : { model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:22:18"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:23:18"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call print(x) expected_return_type None"/>
<children>
<log message="get_valid_function call print(x) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:24:14"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression x expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression x expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression x expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : T"/>
<log message="type_of_expression x expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr x"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression x expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(x) return type Some(()) filter Exact(i32)"/>
<log message="cannot find a function with name print"/>
<log message="Found functions: "/>
<log message="adding new function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; ()"/>
</children>
<log message="transform_call print(&quot;,&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(&quot;,&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:25:14"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;,&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;,&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; str"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(&quot;,&quot;) return type Some(()) filter Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: "/>
<log message="adding new function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; ()"/>
</children>
<log message="transform_call println(y) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call println(y) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:26:16"/>
<log message="verifying function pub fn stdlib:std println&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : T"/>
<log message="type_of_expression y expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr y"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub asm stdlib:io/print println(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type () filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
</children>
<log message="found valid function pub fn stdlib:std println&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec println(y) return type Some(()) filter Exact(i32)"/>
<log message="cannot find a function with name println"/>
<log message="Found functions: "/>
<log message="adding new function pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; ()"/>
</children>
</children>
<log message="type_of_expression { model -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_io_print_print_i32_Unit(x);
;stdlib_io_print_print_str_Unit(&quot;,&quot;);
;stdlib_std_println_i32_Unit(y);
; } expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_std_println_i32_Unit(y) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(()))"/>
<log message="found type Lambda(1, Some(Exact(())))"/>
</children>
<log message="filter Lambda(1, Some(Exact(())))"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Lambda(1, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr { time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Option&lt;T&gt; -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt; -&gt; fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : { time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; }"/>
<log message="real type of expression : fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="added parameter time -&gt; time:i32 to context"/>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:11"/>
<log message="verifying function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,ftrue:fn () -&gt; T,ffalse:fn () -&gt; T) -&gt; T"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call NoneModel() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:27"/>
<log message="verifying function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn :lambda_in_struct NoneModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec NoneModel() return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters , return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_NoneModel__OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_NoneModel__OptionModel() expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Model(add(x,1),add(y,1))"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(add(x,1),add(y,1))"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:35"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(x,1)"/>
<log message="real expression : add(x,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(x,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(x,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:39"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(x,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(x,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr add(y,1)"/>
<log message="real expression : add(y,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(y,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(y,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:50"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(y,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(y,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(add(x,1),add(y,1)) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(Model(add(x,1),add(y,1))) return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Model), return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:option:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function stdlib_option_Option_Some_Model_OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1))) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,trueVal:T,falseVal:T) -&gt; T"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="ignored function due to Expected lambda but got :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:13
converting expression, expected_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:13
"/>
</children>
<log message="verifying function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,vtrue:T,ffalse:fn () -&gt; T) -&gt; T"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr greater(time,5)"/>
<log message="real expression : greater(time,5)"/>
<log message="real type of expression : bool"/>
<log message="transform_call greater(time,5) expected_return_type Some(bool)"/>
<children>
<log message="get_valid_function call greater(time,5) expected_return_type Some(bool): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:13:19"/>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,f2:f32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:f32 greater(f1:f32,n2:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression time expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 5"/>
<log message="real expression : 5"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 5 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:i32 greater(a:i32,b:i32) -&gt; bool"/>
<log message="find call vec for module"/>
<log message="find_call_vec greater(time,5) return type Some(bool) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool, filters Exact(i32), Exact(i32), return type Some(bool)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type bool filter Exact(bool) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="already added function stdlib_i32_greater_i32_i32_bool"/>
</children>
<log message="type_of_expression stdlib_i32_greater_i32_i32_bool(time,5) expected type Some(bool)"/>
<children>
</children>
<log message="filter Exact(bool)"/>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="expr {  -&gt; NoneModel();
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; NoneModel();
; }"/>
<log message="real type of expression : :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="expr {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : {  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }"/>
<log message="real type of expression : fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:16:26"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:17:26"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(Model(add(x,1),add(y,1))) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:23"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Model(add(x,1),add(y,1))"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(add(x,1),add(y,1))"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(add(x,1),add(y,1)) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:35"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(x,1)"/>
<log message="real expression : add(x,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(x,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(x,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:39"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(x,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(x,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr add(y,1)"/>
<log message="real expression : add(y,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(y,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(y,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:18:50"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(y,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(y,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(add(x,1),add(y,1)) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(Model(add(x,1),add(y,1))) return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Model), return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:option:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function stdlib_option_Option_Some_Model_OptionModel"/>
</children>
</children>
<log message="type_of_expression {  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; } expected type Some(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1))) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="filter_ps "/>
<log message="a_p "/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="ignored function due to Expected lambda but got :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:13
converting expression, expected_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) : file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:14:13
"/>
</children>
<log message="found valid function pub asm stdlib:conditionals if&lt;T&gt;(cond:bool,ftrue:fn () -&gt; T,ffalse:fn () -&gt; T) -&gt; T"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn () -&gt; T -&gt; fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; }) return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(bool), Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;), Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="testing function pub asm stdlib:conditionals stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(cond:bool,ftrue:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;,ffalse:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(bool), Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;), Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;), return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type bool filter Exact(bool) return_type: false"/>
<children>
</children>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="almost_same_type fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:conditionals stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(cond:bool,ftrue:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;,ffalse:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel"/>
</children>
</children>
<log message="type_of_expression { time,model -&gt; stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(stdlib_i32_greater_i32_i32_bool(time,5),{  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; },{  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; });
; } expected type Some(fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="added parameter time -&gt; time:i32 to context"/>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="type_of_expression stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(stdlib_i32_greater_i32_i32_bool(time,5),{  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; },{  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; }) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))"/>
<log message="found type Lambda(2, Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)))"/>
</children>
<log message="filter Lambda(2, Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)))"/>
<log message="almost_same_type fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Lambda(2, Some(Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr { model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : { model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call x(model) expected_return_type None"/>
<children>
<log message="get_valid_function call x(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:22:18"/>
<log message="verifying function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct x(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec x(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_x_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="transform_call y(model) expected_return_type None"/>
<children>
<log message="get_valid_function call y(model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:23:18"/>
<log message="verifying function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct y(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec y(model) return type Some(i32) filter Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32, filters Exact(:lambda_in_struct:Model), return type Some(i32)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="already added function _lambda_in_struct_y_Model_i32"/>
</children>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="transform_call print(x) expected_return_type None"/>
<children>
<log message="get_valid_function call print(x) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:24:14"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression x expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression x expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression x expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : T"/>
<log message="type_of_expression x expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr x"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : x"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression x expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr x"/>
<log message="real expression : x"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression x expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(x) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_i32_Unit"/>
</children>
<log message="transform_call print(&quot;,&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(&quot;,&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:25:14"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;,&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;,&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;,&quot;"/>
<log message="real expression : &quot;,&quot;"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression &quot;,&quot; expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; str"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(&quot;,&quot;) return type Some(()) filter Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_str_Unit"/>
</children>
<log message="transform_call println(y) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call println(y) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:26:16"/>
<log message="verifying function pub fn stdlib:std println&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr y"/>
<log message="real expression : y"/>
<log message="real type of expression : T"/>
<log message="type_of_expression y expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr y"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : y"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression y expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub asm stdlib:io/print println(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type () filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
</children>
<log message="found valid function pub fn stdlib:std println&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec println(y) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; ()"/>
<log message="already added function stdlib_std_println_i32_Unit"/>
</children>
</children>
<log message="type_of_expression { model -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_io_print_print_i32_Unit(x);
;stdlib_io_print_print_str_Unit(&quot;,&quot;);
;stdlib_std_println_i32_Unit(y);
; } expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="type_of_expression _lambda_in_struct_x_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val x of type i32 to context"/>
<log message="type_of_expression _lambda_in_struct_y_Model_i32(model) expected type None"/>
<children>
</children>
<log message="adding let val y of type i32 to context"/>
<log message="type_of_expression stdlib_std_println_i32_Unit(y) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(()))"/>
<log message="found type Lambda(1, Some(Exact(())))"/>
</children>
<log message="filter Lambda(1, Some(Exact(())))"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Lambda(1, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Loop&lt;T&gt;(update:fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt;,render:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Option&lt;T&gt; -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt; -&gt; fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Loop({ time,model -&gt; if(greater(time,5),{  -&gt; NoneModel();
; },{  -&gt; let x = x(model);
;let y = y(model);
;Option::Some(Model(add(x,1),add(y,1)));
; });
; },{ model -&gt; let x = x(model);
;let y = y(model);
;print(x);
;print(&quot;,&quot;);
;println(y);
; }) return type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) filter Exact(fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;), Exact(fn (:lambda_in_struct:Model) -&gt; ())"/>
<log message="cannot find a function with name Loop"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_Loop_fni32ModelOptionModel_fnModelUnit_LoopModel(update:fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;,render:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="type_of_expression _lambda_in_struct_Loop_fni32ModelOptionModel_fnModelUnit_LoopModel({ time,model -&gt; stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(stdlib_i32_greater_i32_i32_bool(time,5),{  -&gt; _lambda_in_struct_NoneModel__OptionModel();
; },{  -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_option_Option_Some_Model_OptionModel(_lambda_in_struct_Model_i32_i32_Model(stdlib_i32_add_i32_i32_i32(x,1),stdlib_i32_add_i32_i32_i32(y,1)));
; });
; },{ model -&gt; let x = _lambda_in_struct_x_Model_i32(model);
;let y = _lambda_in_struct_y_Model_i32(model);
;stdlib_io_print_print_i32_Unit(x);
;stdlib_io_print_print_str_Unit(&quot;,&quot;);
;stdlib_std_println_i32_Unit(y);
; }) expected type None"/>
<children>
</children>
<log message="adding let val l of type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="transform_call loop(0,Model(0,0),l) expected_return_type None"/>
<children>
<log message="get_valid_function call loop(0,Model(0,0),l) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:30:5"/>
<log message="verifying function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr Model(0,0)"/>
<log message="real expression : Model(0,0)"/>
<log message="real type of expression : T"/>
<log message="transform_call Model(0,0) expected_return_type Some(T)"/>
<children>
<log message="get_valid_function call Model(0,0) expected_return_type Some(T): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:30:14"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(0,0) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(0,0) expected type Some(T)"/>
<children>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr Model(0,0)"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : Model(0,0)"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="transform_call Model(0,0) expected_return_type Some(:lambda_in_struct:Model)"/>
<children>
<log message="get_valid_function call Model(0,0) expected_return_type Some(:lambda_in_struct:Model): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:30:14"/>
<log message="verifying function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm :lambda_in_struct Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec Model(0,0) return type Some(:lambda_in_struct:Model) filter Exact(i32), Exact(i32)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model, filters Exact(i32), Exact(i32), return type Some(:lambda_in_struct:Model)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="already added function _lambda_in_struct_Model_i32_i32_Model"/>
</children>
<log message="type_of_expression _lambda_in_struct_Model_i32_i32_Model(0,0) expected type Some(:lambda_in_struct:Model)"/>
<children>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="found valid function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec loop(0,Model(0,0),l) return type Some(()) filter Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="cannot find a function with name loop"/>
<log message="Found functions: "/>
<log message="adding new function fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; ()"/>
</children>
</children>
<log message="transform_function pub asm ::core:core addStaticAllocation(labelAllocation:i32,labelMemory:i32,size:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter labelAllocation -&gt; labelAllocation:i32 to context"/>
<log message="added parameter labelMemory -&gt; labelMemory:i32 to context"/>
<log message="added parameter size -&gt; size:i32 to context"/>
</children>
<log message="transform_function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter n1 -&gt; n1:i32 to context"/>
<log message="added parameter n2 -&gt; n2:i32 to context"/>
</children>
<log message="transform_function pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter source -&gt; source:i32 to context"/>
<log message="added parameter dest -&gt; dest:i32 to context"/>
<log message="added parameter len -&gt; len:i32 to context"/>
</children>
<log message="transform_function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter size -&gt; size:i32 to context"/>
<log message="added parameter descr -&gt; descr:str to context"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;start malloc &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $size: i32)"/>
<log message="found ref $size : i32"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;, &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $descr: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  reusable size &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, ebx)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  reusing address &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, eax)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;, size &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, [eax + 8])"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(removeFromReused, ecx)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  allocation &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;Out of heap space&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(exitMain, 1)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  new address&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;Out of memory&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(exitMain, 1)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  newAddress Ok&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  allocate&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, eax)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;end malloc&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :101:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
</children>
<log message="old line     $call(print, 1:File, &quot;start malloc &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;start malloc &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :102:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
</children>
<log message="old line     $call(print, 1:File, $size)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, $size)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :103:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;, &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;, &quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :104:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, $descr)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, $descr)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :105:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :115:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  reusable size &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  reusable size &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :116:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, ebx)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, ebx)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :117:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :135:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  reusing address &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  reusing address &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :136:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, eax)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, eax)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :137:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;, size &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;, size &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :138:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, [eax + 8])"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, [eax + 8])"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :139:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call removeFromReused(0) expected_return_type None"/>
<children>
<log message="get_valid_function call removeFromReused(0) expected_return_type None: :144:0"/>
<log message="verifying function pub asm ::core:core removeFromReused(address:i32) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core removeFromReused(address:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec removeFromReused(0) return type Some(()) filter Exact(i32)"/>
<log message="cannot find a function with name removeFromReused"/>
<log message="Found functions: "/>
<log message="adding new function pub asm ::core:core __core_core_removeFromReused_i32_Unit(address:i32) -&gt; ()"/>
</children>
<log message="old line     $call(removeFromReused,ecx)"/>
<log message="new line     $call(__core_core_removeFromReused_i32_Unit,ecx)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :153:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  allocation &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  allocation &quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :154:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :163:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;Out of heap space&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;Out of heap space&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :164:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call exitMain(0) expected_return_type None"/>
<children>
<log message="get_valid_function call exitMain(0) expected_return_type None: :165:0"/>
<log message="verifying function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec exitMain(0) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="already added function exitMain"/>
</children>
<log message="old line     $call(exitMain, 1)"/>
<log message="new line     $call(exitMain, 1)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :171:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  new address&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  new address&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :172:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :180:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;Out of memory&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;Out of memory&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :181:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call exitMain(0) expected_return_type None"/>
<children>
<log message="get_valid_function call exitMain(0) expected_return_type None: :182:0"/>
<log message="verifying function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec exitMain(0) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="already added function exitMain"/>
</children>
<log message="old line     $call(exitMain, 1)"/>
<log message="new line     $call(exitMain, 1)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :187:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  newAddress Ok&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  newAddress Ok&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :188:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :201:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  allocate&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  allocate&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :202:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :219:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :220:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, eax)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, eax)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :221:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :222:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;end malloc&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;end malloc&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :223:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
</children>
<log message="transform_function pub fn stdlib:vec VecReferences(vec:i32,generic:i32) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter vec -&gt; vec:i32 to context"/>
<log message="added parameter generic -&gt; generic:i32 to context"/>
<log message="transform_statements expected_return_type Some(i32)"/>
<children>
</children>
</children>
<log message="transform_function fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter time -&gt; time:i32 to context"/>
<log message="added parameter model -&gt; model::lambda_in_struct:Model to context"/>
<log message="added parameter l -&gt; l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call update(l,time,model) expected_return_type None"/>
<children>
<log message="get_valid_function call update(l,time,model) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:33:26"/>
<log message="verifying function fn :lambda_in_struct update&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:i32,p1:T) -&gt; :lambda_in_struct:Option&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : model"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression model expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="found valid function fn :lambda_in_struct update&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:i32,p1:T) -&gt; :lambda_in_struct:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Option&lt;T&gt; -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec update(l,time,model) return type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(i32), Exact(:lambda_in_struct:Model)"/>
<log message="cannot find a function with name update"/>
<log message="Found functions: "/>
<log message="adding new function fn :lambda_in_struct _lambda_in_struct_update_LoopModel_i32_Model_OptionModel(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,p0:i32,p1::lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="type_of_expression _lambda_in_struct_update_LoopModel_i32_Model_OptionModel(l,time,model) expected type None"/>
<children>
</children>
<log message="adding let val result of type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="transform_call match(result,{ newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; },{  -&gt;  }) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call match(result,{ newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; },{  -&gt;  }) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:10"/>
<log message="verifying function pub asm stdlib:list match&lt;T,_T&gt;(value:stdlib:list:List&lt;T&gt;,Full:fn (T,stdlib:list:List&lt;T&gt;) -&gt; _T,Empty:fn () -&gt; _T) -&gt; _T"/>
<children>
<log message="almost_same_type () filter Exact(_T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type _T effective_type  ()"/>
<children>
<log message="resolved generic type _T to ()"/>
<log message="result _T=()"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr result"/>
<log message="real expression : result"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression result expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
</children>
<log message="expr { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn (T,stdlib:list:List&lt;T&gt;) -&gt; _T -&gt; fn (T,stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<log message="real expression : { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="real type of expression : fn (T,stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<log message="added parameter newModel -&gt; newModel:T to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call render(l,newModel) expected_return_type None"/>
<children>
<log message="get_valid_function call render(l,newModel) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:41"/>
<log message="verifying function fn :lambda_in_struct render&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="verifying function asm :lambda_in_struct render&lt;T&gt;(receiver::lambda_in_struct:Loop&lt;T&gt;,v:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : newModel"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="type_of_expression newModel expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : newModel"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="type_of_expression newModel expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function asm :lambda_in_struct render&lt;T&gt;(receiver::lambda_in_struct:Loop&lt;T&gt;,v:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec render(l,newModel) return type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(fn (:lambda_in_struct:Model) -&gt; ())"/>
<log message="cannot find a function with name render"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,v:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="transform_call loop(add(time,1),newModel,l) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call loop(add(time,1),newModel,l) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:57"/>
<log message="verifying function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="real expression : newModel"/>
<log message="real type of expression : T"/>
<log message="type_of_expression newModel expected type Some(T)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type T filter Exact(T) return_type: false"/>
<children>
</children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(T)"/>
</children>
<log message="filter Exact(T)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="found valid function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec loop(add(time,1),newModel,l) return type Some(()) filter Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; (), filters Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; ()"/>
<log message="already added function _lambda_in_struct_loop_i32_Model_LoopModel_Unit"/>
</children>
</children>
<log message="type_of_expression { newModel -&gt; _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(l,newModel);
;_lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l);
; } expected type Some(fn (T,stdlib:list:List&lt;T&gt;) -&gt; ())"/>
<children>
<log message="added parameter newModel -&gt; newModel:T to context"/>
<log message="type_of_expression _lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(()))"/>
<log message="found type Lambda(1, Some(Exact(())))"/>
</children>
<log message="filter Lambda(1, Some(Exact(())))"/>
<log message="almost_same_type fn (T,stdlib:list:List&lt;T&gt;) -&gt; () filter Lambda(1, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to unmatched custom type name List Option : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:result match&lt;OK,ERROR,_T&gt;(value:stdlib:result:Result&lt;OK,ERROR&gt;,Ok:fn (OK) -&gt; _T,Error:fn (ERROR) -&gt; _T) -&gt; _T"/>
<children>
<log message="almost_same_type () filter Exact(_T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type _T effective_type  ()"/>
<children>
<log message="resolved generic type _T to ()"/>
<log message="result _T=()"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr result"/>
<log message="real expression : result"/>
<log message="real type of expression : stdlib:result:Result&lt;OK,ERROR&gt;"/>
<log message="type_of_expression result expected type Some(stdlib:result:Result&lt;OK,ERROR&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:result:Result&lt;OK,ERROR&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
</children>
<log message="expr { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn (OK) -&gt; _T -&gt; fn (OK) -&gt; ()"/>
<log message="real expression : { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="real type of expression : fn (OK) -&gt; ()"/>
<log message="added parameter newModel -&gt; newModel:OK to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call render(l,newModel) expected_return_type None"/>
<children>
<log message="get_valid_function call render(l,newModel) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:41"/>
<log message="verifying function fn :lambda_in_struct render&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(OK)"/>
</children>
<log message="filter Exact(OK)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(OK) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(OK)"/>
</children>
<log message="filter Exact(OK)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(OK) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="verifying function asm :lambda_in_struct render&lt;T&gt;(receiver::lambda_in_struct:Loop&lt;T&gt;,v:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : newModel"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="type_of_expression newModel expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="found type Exact(OK)"/>
</children>
<log message="filter Exact(OK)"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(OK) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : newModel"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="type_of_expression newModel expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="found type Exact(OK)"/>
</children>
<log message="filter Exact(OK)"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(OK) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function asm :lambda_in_struct render&lt;T&gt;(receiver::lambda_in_struct:Loop&lt;T&gt;,v:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec render(l,newModel) return type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(fn (:lambda_in_struct:Model) -&gt; ())"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,v:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(fn (:lambda_in_struct:Model) -&gt; ()), return type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(fn (:lambda_in_struct:Model) -&gt; ()) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm :lambda_in_struct _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,v:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="already added function _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel"/>
</children>
<log message="transform_call loop(add(time,1),newModel,l) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call loop(add(time,1),newModel,l) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:57"/>
<log message="verifying function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="real expression : newModel"/>
<log message="real type of expression : T"/>
<log message="type_of_expression newModel expected type Some(T)"/>
<children>
<log message="found type Exact(OK)"/>
</children>
<log message="filter Exact(OK)"/>
<log message="almost_same_type T filter Exact(OK) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(OK)"/>
</children>
<log message="filter Exact(OK)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(OK) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="found valid function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec loop(add(time,1),newModel,l) return type Some(()) filter Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; (), filters Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; ()"/>
<log message="already added function _lambda_in_struct_loop_i32_Model_LoopModel_Unit"/>
</children>
</children>
<log message="type_of_expression { newModel -&gt; _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(l,newModel);
;_lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l);
; } expected type Some(fn (OK) -&gt; ())"/>
<children>
<log message="added parameter newModel -&gt; newModel:OK to context"/>
<log message="type_of_expression _lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(()))"/>
<log message="found type Lambda(1, Some(Exact(())))"/>
</children>
<log message="filter Lambda(1, Some(Exact(())))"/>
<log message="almost_same_type fn (OK) -&gt; () filter Lambda(1, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr {  -&gt;  }"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn (ERROR) -&gt; _T -&gt; fn (ERROR) -&gt; ()"/>
<log message="real expression : {  -&gt;  }"/>
<log message="real type of expression : fn (ERROR) -&gt; ()"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
</children>
<log message="type_of_expression {  -&gt;  } expected type Some(fn (ERROR) -&gt; ())"/>
<children>
<log message="filter Lambda(0, Some(Exact(())))"/>
<log message="almost_same_type fn (ERROR) -&gt; () filter Lambda(0, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to unmatched custom type name Result Option : :0:0
"/>
</children>
<log message="verifying function pub asm stdlib:option match&lt;T,_T&gt;(value:stdlib:option:Option&lt;T&gt;,Some:fn (T) -&gt; _T,None:fn () -&gt; _T) -&gt; _T"/>
<children>
<log message="almost_same_type () filter Exact(_T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type _T effective_type  ()"/>
<children>
<log message="resolved generic type _T to ()"/>
<log message="result _T=()"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr result"/>
<log message="real expression : result"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression result expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn (T) -&gt; _T -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="added parameter newModel -&gt; newModel::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call render(l,newModel) expected_return_type None"/>
<children>
<log message="get_valid_function call render(l,newModel) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:41"/>
<log message="verifying function fn :lambda_in_struct render&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="verifying function asm :lambda_in_struct render&lt;T&gt;(receiver::lambda_in_struct:Loop&lt;T&gt;,v:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : newModel"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="type_of_expression newModel expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function fn :lambda_in_struct render&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:T) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec render(l,newModel) return type Some(()) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,v:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(:lambda_in_struct:Model), return type Some(())"/>
<children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: "/>
<log message="adding new function fn :lambda_in_struct _lambda_in_struct_render_LoopModel_Model_Unit(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,p0::lambda_in_struct:Model) -&gt; ()"/>
</children>
<log message="transform_call loop(add(time,1),newModel,l) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call loop(add(time,1),newModel,l) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:57"/>
<log message="verifying function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="real expression : newModel"/>
<log message="real type of expression : T"/>
<log message="type_of_expression newModel expected type Some(T)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="found valid function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec loop(add(time,1),newModel,l) return type Some(()) filter Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; (), filters Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; ()"/>
<log message="already added function _lambda_in_struct_loop_i32_Model_LoopModel_Unit"/>
</children>
</children>
<log message="type_of_expression { newModel -&gt; _lambda_in_struct_render_LoopModel_Model_Unit(l,newModel);
;_lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l);
; } expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="added parameter newModel -&gt; newModel::lambda_in_struct:Model to context"/>
<log message="type_of_expression _lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(()))"/>
<log message="found type Lambda(1, Some(Exact(())))"/>
</children>
<log message="filter Lambda(1, Some(Exact(())))"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Lambda(1, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr {  -&gt;  }"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn () -&gt; _T -&gt; fn () -&gt; ()"/>
<log message="real expression : {  -&gt;  }"/>
<log message="real type of expression : fn () -&gt; ()"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
</children>
<log message="type_of_expression {  -&gt;  } expected type Some(fn () -&gt; ())"/>
<children>
<log message="filter Lambda(0, Some(Exact(())))"/>
<log message="almost_same_type fn () -&gt; () filter Lambda(0, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr result"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : result"/>
<log message="real type of expression : stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression result expected type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="expr { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn (T) -&gt; _T -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : { newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; }"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="added parameter newModel -&gt; newModel::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call render(l,newModel) expected_return_type None"/>
<children>
<log message="get_valid_function call render(l,newModel) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:41"/>
<log message="verifying function fn :lambda_in_struct render&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="verifying function asm :lambda_in_struct render&lt;T&gt;(receiver::lambda_in_struct:Loop&lt;T&gt;,v:fn (T) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr l"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="real expression : newModel"/>
<log message="real type of expression : fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="type_of_expression newModel expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function fn :lambda_in_struct render&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;,p0:T) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="find call vec for module"/>
<log message="find_call_vec render(l,newModel) return type Some(()) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(:lambda_in_struct:Model)"/>
<log message="testing function asm :lambda_in_struct _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,v:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;, filters Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(:lambda_in_struct:Model), return type Some(())"/>
<children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_render_LoopModel_Model_Unit(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,p0::lambda_in_struct:Model) -&gt; (), filters Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), Exact(:lambda_in_struct:Model), return type Some(())"/>
<children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_render_LoopModel_Model_Unit(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,p0::lambda_in_struct:Model) -&gt; ()"/>
<log message="already added function _lambda_in_struct_render_LoopModel_Model_Unit"/>
</children>
<log message="transform_call loop(add(time,1),newModel,l) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call loop(add(time,1),newModel,l) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:57"/>
<log message="verifying function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="real expression : newModel"/>
<log message="real type of expression : T"/>
<log message="type_of_expression newModel expected type Some(T)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr add(time,1)"/>
<log message="real expression : add(time,1)"/>
<log message="real type of expression : i32"/>
<log message="transform_call add(time,1) expected_return_type Some(i32)"/>
<children>
<log message="get_valid_function call add(time,1) expected_return_type Some(i32): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:34:61"/>
<log message="verifying function pub fn stdlib:str add&lt;T1,T2&gt;(a:T1,b:T2) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,f2:f32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:f32 add(f1:f32,n2:i32) -&gt; f32"/>
<children>
<log message="almost_same_type i32 filter Exact(f32) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s1:str,s2:str) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:str add(s:str,c:char) -&gt; str"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr time"/>
<log message="real expression : time"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression time expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:vec add&lt;T&gt;(vec1:stdlib:vec:Vec&lt;T&gt;,vec2:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Vec&lt;T&gt;"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:vec:Vec&lt;T&gt;) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="found valid function pub asm stdlib:i32 add(n1:i32,n2:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec add(time,1) return type Some(i32) filter Exact(i32), Exact(i32)"/>
<log message="testing function pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32, filters Exact(i32), Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:i32 stdlib_i32_add_i32_i32_i32(n1:i32,n2:i32) -&gt; i32"/>
<log message="already added function stdlib_i32_add_i32_i32_i32"/>
</children>
<log message="type_of_expression stdlib_i32_add_i32_i32_i32(time,1) expected type Some(i32)"/>
<children>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr newModel"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="real expression : newModel"/>
<log message="real type of expression : :lambda_in_struct:Model"/>
<log message="type_of_expression newModel expected type Some(:lambda_in_struct:Model)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Model)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Model)"/>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="expr l"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : l"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression l expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 186312115144466471"/>
</children>
<log message="found valid function fn :lambda_in_struct loop&lt;T&gt;(time:i32,model:T,l::lambda_in_struct:Loop&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec loop(add(time,1),newModel,l) return type Some(()) filter Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="testing function fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; (), filters Exact(i32), Exact(:lambda_in_struct:Model), Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
</children>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn :lambda_in_struct _lambda_in_struct_loop_i32_Model_LoopModel_Unit(time:i32,model::lambda_in_struct:Model,l::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; ()"/>
<log message="already added function _lambda_in_struct_loop_i32_Model_LoopModel_Unit"/>
</children>
</children>
<log message="type_of_expression { newModel -&gt; _lambda_in_struct_render_LoopModel_Model_Unit(l,newModel);
;_lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l);
; } expected type Some(fn (:lambda_in_struct:Model) -&gt; ())"/>
<children>
<log message="added parameter newModel -&gt; newModel::lambda_in_struct:Model to context"/>
<log message="type_of_expression _lambda_in_struct_loop_i32_Model_LoopModel_Unit(stdlib_i32_add_i32_i32_i32(time,1),newModel,l) expected type None"/>
<children>
</children>
<log message="lambda return type Some(Exact(()))"/>
<log message="found type Lambda(1, Some(Exact(())))"/>
</children>
<log message="filter Lambda(1, Some(Exact(())))"/>
<log message="almost_same_type fn (:lambda_in_struct:Model) -&gt; () filter Lambda(1, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr {  -&gt;  }"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn () -&gt; _T -&gt; fn () -&gt; ()"/>
<log message="real expression : {  -&gt;  }"/>
<log message="real type of expression : fn () -&gt; ()"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
</children>
<log message="type_of_expression {  -&gt;  } expected type Some(fn () -&gt; ())"/>
<children>
<log message="filter Lambda(0, Some(Exact(())))"/>
<log message="almost_same_type fn () -&gt; () filter Lambda(0, Some(Exact(()))) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type _T filter Exact(()) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function pub asm stdlib:option match&lt;T,_T&gt;(value:stdlib:option:Option&lt;T&gt;,Some:fn (T) -&gt; _T,None:fn () -&gt; _T) -&gt; _T"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn (T) -&gt; _T -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="something substituted _T -&gt; ()"/>
<log message="something substituted fn () -&gt; _T -&gt; fn () -&gt; ()"/>
<log message="something substituted _T -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec match(result,{ newModel -&gt; render(l,newModel);
;loop(add(time,1),newModel,l);
; },{  -&gt;  }) return type Some(()) filter Exact(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;), Exact(fn (:lambda_in_struct:Model) -&gt; ()), Exact(fn () -&gt; ())"/>
<log message="cannot find a function with name match"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:option stdlib_option_match_OptionModel_fnModelUnit_fnUnit_Unit(value:stdlib:option:Option&lt;:lambda_in_struct:Model&gt;,Some:fn (:lambda_in_struct:Model) -&gt; (),None:fn () -&gt; ()) -&gt; ()"/>
</children>
</children>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_y_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter v -&gt; v::lambda_in_struct:Model to context"/>
</children>
<log message="transform_function pub asm stdlib:i32 stdlib_i32_greater_i32_i32_bool(a:i32,b:i32) -&gt; bool"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter a -&gt; a:i32 to context"/>
<log message="added parameter b -&gt; b:i32 to context"/>
</children>
<log message="transform_function pub asm stdlib:conditionals stdlib_conditionals_if_bool_fnOptionModel_fnOptionModel_OptionModel(cond:bool,ftrue:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;,ffalse:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="added parameter cond -&gt; cond:bool to context"/>
<log message="added parameter ftrue -&gt; ftrue:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter ffalse -&gt; ffalse:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
</children>
<log message="transform_function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter value -&gt; value::lambda_in_struct:Model to context"/>
<log message="found call macro $call(rasmalloc, 8, [_s_1]: str: str)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm:3:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, 8, [_s_1]: str)                                                "/>
<log message="new line     $call(rasmalloc, 8, [_s_1]: str)                                                "/>
</children>
<log message="transform_function pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter s -&gt; s:i32 to context"/>
</children>
<log message="transform_function fn :lambda_in_struct _lambda_in_struct_NoneModel__OptionModel() -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call Option::None() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="get_valid_function call Option::None() expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;): file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:38:11"/>
<log message="verifying function pub asm stdlib:option Option_None&lt;T&gt;() -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:option Option_None&lt;T&gt;() -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::None() return type Some(stdlib:option:Option&lt;:lambda_in_struct:Model&gt;) filter "/>
<log message="cannot find a function with name Option::None"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:option stdlib_option_Option_None__OptionModel() -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
</children>
</children>
<log message="transform_function pub asm ::core:core deref(address:i32,descr:str) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="added parameter descr -&gt; descr:str to context"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;start deref &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $address: i32)"/>
<log message="found ref $address : i32"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $descr: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  reusable size &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, ebx: i32: i32)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  ref count: &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, ebx: i32: i32)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  deallocated &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, eax)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  add reused &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, ebx)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot; with value &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, [ebx])"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;Negative allocation count: &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $descr: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(exitMain, 1)"/>
<log message="found call macro $call(invalidAddress)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;end deref\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :273:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;start deref &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;start deref &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :274:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, $address)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, $address)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :275:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :276:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  &quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :277:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, $descr)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, $descr)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :278:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :287:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  reusable size &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  reusable size &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :288:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, ebx: i32)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, ebx: i32)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :289:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :315:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  ref count: &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  ref count: &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :316:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, ebx: i32)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, ebx: i32)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :317:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :327:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  deallocated &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  deallocated &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :328:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, eax)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, eax)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :329:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :340:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  add reused &quot;);"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  add reused &quot;);"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :341:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, ebx);"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, ebx);"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :342:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot; with value &quot;);"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot; with value &quot;);"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :343:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, [ebx]);"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, [ebx]);"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :352:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;Negative allocation count: &quot;);"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;Negative allocation count: &quot;);"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :353:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, $descr)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, $descr)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :354:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call exitMain(0) expected_return_type None"/>
<children>
<log message="get_valid_function call exitMain(0) expected_return_type None: :355:0"/>
<log message="verifying function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec exitMain(0) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="already added function exitMain"/>
</children>
<log message="old line     $call(exitMain, 1);"/>
<log message="new line     $call(exitMain, 1);"/>
<log message="transform_call invalidAddress() expected_return_type None"/>
<children>
<log message="get_valid_function call invalidAddress() expected_return_type None: :357:0"/>
<log message="verifying function fn ::core:core invalidAddress() -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn ::core:core invalidAddress() -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec invalidAddress() return type Some(()) filter "/>
<log message="cannot find a function with name invalidAddress"/>
<log message="Found functions: "/>
<log message="adding new function fn ::core:core __core_core_invalidAddress__Unit() -&gt; ()"/>
</children>
<log message="old line     $call(invalidAddress)"/>
<log message="new line     $call(__core_core_invalidAddress__Unit)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :361:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;end deref\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;end deref\n&quot;)"/>
</children>
<log message="transform_function pub asm ::core:core addHeap(label:i32,descrLabel:i32,value:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter label -&gt; label:i32 to context"/>
<log message="added parameter descrLabel -&gt; descrLabel:i32 to context"/>
<log message="added parameter value -&gt; value:i32 to context"/>
<log message="found call macro $call(rasmalloc, 4, [ebx]: str: str)"/>
<log message="found call macro $call(addRef, eax, [ebx]: str: str)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: :694:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, 4, [ebx]: str)"/>
<log message="new line     $call(rasmalloc, 4, [ebx]: str)"/>
<log message="transform_call addRef(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call addRef(0,&quot;&quot;) expected_return_type None: :695:0"/>
<log message="verifying function pub asm ::core:core addRef(address:i32,descr:str) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core addRef(address:i32,descr:str) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec addRef(0,&quot;&quot;) return type Some(()) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core addRef(address:i32,descr:str) -&gt; (), filters Exact(i32), Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core addRef(address:i32,descr:str) -&gt; ()"/>
<log message="already added function addRef"/>
</children>
<log message="old line     $call(addRef, eax, [ebx]: str)"/>
<log message="new line     $call(addRef, eax, [ebx]: str)"/>
</children>
<log message="transform_function pub asm : str_addRef(s:str) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter s -&gt; s:str to context"/>
</children>
<log message="transform_function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter status -&gt; status:i32 to context"/>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; :lambda_in_struct:Model"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter x -&gt; x:i32 to context"/>
<log message="added parameter y -&gt; y:i32 to context"/>
<log message="found call macro $call(rasmalloc, 8, &quot;&quot;)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:7:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, 8, &quot;&quot;)                                                         "/>
<log message="new line     $call(rasmalloc, 8, &quot;&quot;)                                                         "/>
</children>
<log message="transform_function pub asm ::core:core addRef(address:i32,descr:str) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="added parameter descr -&gt; descr:str to context"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;start addRef &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $address: i32)"/>
<log message="found ref $address : i32"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, $descr: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  reusable size &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, ebx)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;  ref count: &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, ebx)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="found call macro $call(removeFromReused, ebx)"/>
<log message="found call macro $call(invalidAddress)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;end addRef\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :394:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;start addRef &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;start addRef &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :395:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, $address)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, $address)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :396:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :397:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  &quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :398:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, $descr)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, $descr)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :399:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :409:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  reusable size &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  reusable size &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :410:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, ebx)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, ebx)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :411:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :433:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;  ref count: &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;  ref count: &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :434:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, ebx)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, ebx)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :435:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
<log message="transform_call removeFromReused(0) expected_return_type None"/>
<children>
<log message="get_valid_function call removeFromReused(0) expected_return_type None: :445:0"/>
<log message="verifying function pub asm ::core:core removeFromReused(address:i32) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core removeFromReused(address:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec removeFromReused(0) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub asm ::core:core __core_core_removeFromReused_i32_Unit(address:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core __core_core_removeFromReused_i32_Unit(address:i32) -&gt; ()"/>
<log message="already added function __core_core_removeFromReused_i32_Unit"/>
</children>
<log message="old line     $call(removeFromReused, ebx)"/>
<log message="new line     $call(__core_core_removeFromReused_i32_Unit, ebx)"/>
<log message="transform_call invalidAddress() expected_return_type None"/>
<children>
<log message="get_valid_function call invalidAddress() expected_return_type None: :452:0"/>
<log message="verifying function fn ::core:core invalidAddress() -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn ::core:core invalidAddress() -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec invalidAddress() return type Some(()) filter "/>
<log message="testing function fn ::core:core __core_core_invalidAddress__Unit() -&gt; (), filters , return type Some(())"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: fn ::core:core __core_core_invalidAddress__Unit() -&gt; ()"/>
<log message="already added function __core_core_invalidAddress__Unit"/>
</children>
<log message="old line     $call(invalidAddress)"/>
<log message="new line     $call(__core_core_invalidAddress__Unit)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :456:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;end addRef\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;end addRef\n&quot;)"/>
</children>
<log message="transform_function pub asm : str_deref(s:str) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter s -&gt; s:str to context"/>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_x_Model_i32(v::lambda_in_struct:Model) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter v -&gt; v::lambda_in_struct:Model to context"/>
</children>
<log message="transform_function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=i32"/>
<children>
<log message="added parameter v -&gt; v:i32 to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call toUnit(print(STDOut(),v)) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call toUnit(print(STDOut(),v)) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:30"/>
<log message="verifying function pub asm stdlib:option toUnit&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr print(STDOut(),v)"/>
<log message="real expression : print(STDOut(),v)"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="transform_call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="get_valid_function call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;T&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:10"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:str:Option&lt;stdlib:str:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:str:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="cannot find a function with name STDOut"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : T"/>
<log message="type_of_expression v expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:str:Option&lt;stdlib:str:IOError&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:str:IOError filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:vec:Option&lt;stdlib:vec:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:vec:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:vec:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:vec:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:vec:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:vec:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:std:Option&lt;stdlib:std:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:std:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:std:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:std:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:std:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:std:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression v expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression v expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : str"/>
<log message="type_of_expression v expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : char"/>
<log message="type_of_expression v expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(STDOut(),v) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="type_of_expression stdlib_io_print_print_File_i32_OptionIOError(stdlib_io_print_STDOut__File(),v) expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  stdlib:io/print:IOError"/>
<children>
<log message="resolved generic type T to stdlib:io/print:IOError"/>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr print(STDOut(),v)"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="real expression : print(STDOut(),v)"/>
<log message="real type of expression : stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="transform_call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="get_valid_function call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:10"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:str:Option&lt;stdlib:str:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:str:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : T"/>
<log message="type_of_expression v expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:str:Option&lt;stdlib:str:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:str:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:vec:Option&lt;stdlib:vec:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:vec:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:vec:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:vec:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:vec:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:vec:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:std:Option&lt;stdlib:std:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:std:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:std:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:std:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:std:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:std:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression v expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression v expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : str"/>
<log message="type_of_expression v expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : char"/>
<log message="type_of_expression v expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(STDOut(),v) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="type_of_expression stdlib_io_print_print_File_i32_OptionIOError(stdlib_io_print_STDOut__File(),v) expected type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function pub asm stdlib:option toUnit&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec toUnit(print(STDOut(),v)) return type Some(()) filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="cannot find a function with name toUnit"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:option stdlib_option_toUnit_OptionIOError_Unit(o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) -&gt; ()"/>
</children>
</children>
</children>
<log message="transform_function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=str"/>
<children>
<log message="added parameter v -&gt; v:str to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call toUnit(print(STDOut(),v)) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call toUnit(print(STDOut(),v)) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:30"/>
<log message="verifying function pub asm stdlib:option toUnit&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr print(STDOut(),v)"/>
<log message="real expression : print(STDOut(),v)"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="transform_call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="get_valid_function call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;T&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:10"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:str:Option&lt;stdlib:str:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:str:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : T"/>
<log message="type_of_expression v expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : v"/>
<log message="real type of expression : str"/>
<log message="type_of_expression v expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:str:Option&lt;stdlib:str:IOError&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:str:IOError filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:vec:Option&lt;stdlib:vec:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:vec:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:vec:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:vec:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:vec:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:vec:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:std:Option&lt;stdlib:std:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:std:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:std:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:std:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:std:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:std:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression v expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression v expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : str"/>
<log message="type_of_expression v expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : char"/>
<log message="type_of_expression v expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(STDOut(),v) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="type_of_expression stdlib_io_print_print_File_str_OptionIOError(stdlib_io_print_STDOut__File(),v) expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  stdlib:io/print:IOError"/>
<children>
<log message="resolved generic type T to stdlib:io/print:IOError"/>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr print(STDOut(),v)"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="real expression : print(STDOut(),v)"/>
<log message="real type of expression : stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="transform_call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="get_valid_function call print(STDOut(),v) expected_return_type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:10"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:str:Option&lt;stdlib:str:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:str:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : T"/>
<log message="type_of_expression v expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:str:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:str:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:str:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:str:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : v"/>
<log message="real type of expression : str"/>
<log message="type_of_expression v expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:str:Option&lt;stdlib:str:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:str:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:vec:Option&lt;stdlib:vec:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:vec:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:vec:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:vec:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:vec:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:vec:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:std:Option&lt;stdlib:std:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:std:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:std:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:std:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:std:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:std:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression v expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression v expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : str"/>
<log message="type_of_expression v expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:13:17"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : char"/>
<log message="type_of_expression v expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(STDOut(),v) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="type_of_expression stdlib_io_print_print_File_str_OptionIOError(stdlib_io_print_STDOut__File(),v) expected type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function pub asm stdlib:option toUnit&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec toUnit(print(STDOut(),v)) return type Some(()) filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:option stdlib_option_toUnit_OptionIOError_Unit(o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) -&gt; (), filters Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;), return type Some(())"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_toUnit_OptionIOError_Unit(o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) -&gt; ()"/>
<log message="already added function stdlib_option_toUnit_OptionIOError_Unit"/>
</children>
</children>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_Loop_fni32ModelOptionModel_fnModelUnit_LoopModel(update:fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;,render:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter update -&gt; update:fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter render -&gt; render:fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="found call macro $call(rasmalloc, 8, &quot;&quot;)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:2:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, 8, &quot;&quot;)                                                         "/>
<log message="new line     $call(rasmalloc, 8, &quot;&quot;)                                                         "/>
</children>
<log message="transform_function pub asm ::core:core createCmdLineArguments(address:i32,esp:i32) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="added parameter esp -&gt; esp:i32 to context"/>
<log message="found call macro $call(addStaticStringToHeap, [ebx])"/>
<log message="transform_call addStaticStringToHeap(0) expected_return_type None"/>
<children>
<log message="get_valid_function call addStaticStringToHeap(0) expected_return_type None: :34:0"/>
<log message="verifying function pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec addStaticStringToHeap(0) return type Some(i32) filter Exact(i32)"/>
<log message="testing function pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32, filters Exact(i32), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32"/>
<log message="already added function addStaticStringToHeap"/>
</children>
<log message="old line     $call(addStaticStringToHeap,[ebx])"/>
<log message="new line     $call(addStaticStringToHeap,[ebx])"/>
</children>
<log message="transform_function pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=i32"/>
<children>
<log message="added parameter v -&gt; v:i32 to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call print(v) expected_return_type None"/>
<children>
<log message="get_valid_function call print(v) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/rasm/std.rasm:11:10"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression v expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : T"/>
<log message="type_of_expression v expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr v"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : v"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression v expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression v expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(v) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(i32), return type Some(())"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(i32), return type Some(())"/>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_i32_Unit"/>
</children>
<log message="transform_call println() expected_return_type Some(())"/>
<children>
<log message="get_valid_function call println() expected_return_type Some(()): file:////home/enrico/development/rust/rasm/stdlib/src/main/rasm/std.rasm:12:12"/>
<log message="verifying function pub fn stdlib:io/print println() -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub fn stdlib:io/print println() -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec println() return type Some(()) filter "/>
<log message="testing function pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; (), filters , return type Some(())"/>
<log message="Found functions: "/>
<log message="adding new function pub fn stdlib:io/print stdlib_io_print_println__Unit() -&gt; ()"/>
</children>
</children>
</children>
<log message="transform_function fn :lambda_in_struct _lambda_in_struct_update_LoopModel_i32_Model_OptionModel(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,p0:i32,p1::lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter v -&gt; v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter p0 -&gt; p0:i32 to context"/>
<log message="added parameter p1 -&gt; p1::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="transform_call updateFn(v) expected_return_type None"/>
<children>
<log message="get_valid_function call updateFn(v) expected_return_type None: :0:0"/>
<log message="verifying function asm :lambda_in_struct updateFn&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;) -&gt; fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr v"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : v"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression v expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function asm :lambda_in_struct updateFn&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;) -&gt; fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Option&lt;T&gt; -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt; -&gt; fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec updateFn(v) return type Some(fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="cannot find a function with name updateFn"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_updateFn_LoopModel_fni32ModelOptionModel(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="type_of_expression _lambda_in_struct_updateFn_LoopModel_fni32ModelOptionModel(v) expected type None"/>
<children>
</children>
<log message="adding let val _f of type fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="transform_call _f(p0,p1) expected_return_type Some(:lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="already converted"/>
</children>
</children>
</children>
<log message="transform_function pub asm stdlib:option stdlib_option_match_OptionModel_fnModelUnit_fnUnit_Unit(value:stdlib:option:Option&lt;:lambda_in_struct:Model&gt;,Some:fn (:lambda_in_struct:Model) -&gt; (),None:fn () -&gt; ()) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types _T=(),T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter value -&gt; value:stdlib:option:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter Some -&gt; Some:fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="added parameter None -&gt; None:fn () -&gt; () to context"/>
<log message="found call macro $call(print, 1: stdlib:option:File, &quot;Option::match, invalid value &quot;)"/>
<log message="found call macro $call(print, 1: stdlib:option:File, [eax])"/>
<log message="found call macro $call(print, 1: stdlib:option:File, &quot;\n&quot;)"/>
<log message="transform_call print(Any(stdlib:option:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(stdlib:option:File),&quot;&quot;) expected_return_type None: :23:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  stdlib:option:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  stdlib:option:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(str)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type str filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(stdlib:option:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line $call(print, 1:File, &quot;Option::match, invalid value &quot;)                           "/>
<log message="new line $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;Option::match, invalid value &quot;)                           "/>
<log message="transform_call print(Any(stdlib:option:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(stdlib:option:File),0) expected_return_type None: :24:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  stdlib:option:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  stdlib:option:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(str)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type str filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(stdlib:option:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line $call(print, 1:File, [eax])                                                     "/>
<log message="new line $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, [eax])                                                     "/>
<log message="transform_call print(Any(stdlib:option:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(stdlib:option:File),&quot;&quot;) expected_return_type None: :25:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  stdlib:option:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  stdlib:option:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(str)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type str filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:option:File)"/>
<log message="real expression : Any(stdlib:option:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:option:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:option:File)"/>
</children>
<log message="filter Exact(stdlib:option:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:option:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(stdlib:option:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line $call(print, 1:File, &quot;\n&quot;)                                                      "/>
<log message="new line $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)                                                      "/>
</children>
<log message="transform_function pub asm stdlib:option stdlib_option_Option_None__OptionModel() -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
</children>
<log message="transform_function fn :lambda_in_struct _lambda_in_struct_render_LoopModel_Model_Unit(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,p0::lambda_in_struct:Model) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter v -&gt; v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter p0 -&gt; p0::lambda_in_struct:Model to context"/>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call renderFn(v) expected_return_type None"/>
<children>
<log message="get_valid_function call renderFn(v) expected_return_type None: :0:0"/>
<log message="verifying function asm :lambda_in_struct renderFn&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;) -&gt; fn (T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr v"/>
<log message="real expression : v"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;T&gt;"/>
<log message="type_of_expression v expected type Some(:lambda_in_struct:Loop&lt;T&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type :lambda_in_struct:Loop&lt;T&gt; effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Model"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Model"/>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="result T=:lambda_in_struct:Model"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;T&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Model) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr v"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : v"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression v expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function asm :lambda_in_struct renderFn&lt;T&gt;(v::lambda_in_struct:Loop&lt;T&gt;) -&gt; fn (T) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Loop&lt;T&gt; -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec renderFn(v) return type Some(fn (:lambda_in_struct:Model) -&gt; ()) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="cannot find a function with name renderFn"/>
<log message="Found functions: "/>
<log message="adding new function asm :lambda_in_struct _lambda_in_struct_renderFn_LoopModel_fnModelUnit(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
</children>
<log message="type_of_expression _lambda_in_struct_renderFn_LoopModel_fnModelUnit(v) expected type None"/>
<children>
</children>
<log message="adding let val _f of type fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="transform_call _f(p0) expected_return_type Some(())"/>
<children>
<log message="already converted"/>
</children>
</children>
</children>
<log message="transform_function fn ::core:core __core_core_invalidAddress__Unit() -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call print(&quot;invalid address \n&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(&quot;invalid address \n&quot;) expected_return_type None: :506:10"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;invalid address \n&quot;"/>
<log message="real expression : &quot;invalid address \n&quot;"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression &quot;invalid address \n&quot; expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;invalid address \n&quot;"/>
<log message="real expression : &quot;invalid address \n&quot;"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression &quot;invalid address \n&quot; expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;invalid address \n&quot;"/>
<log message="real expression : &quot;invalid address \n&quot;"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression &quot;invalid address \n&quot; expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;invalid address \n&quot;"/>
<log message="real expression : &quot;invalid address \n&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;invalid address \n&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr &quot;invalid address \n&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;invalid address \n&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;invalid address \n&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;invalid address \n&quot;"/>
<log message="real expression : &quot;invalid address \n&quot;"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression &quot;invalid address \n&quot; expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; str"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(&quot;invalid address \n&quot;) return type Some(()) filter Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(str), return type Some(())"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(str), return type Some(())"/>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_str_Unit"/>
</children>
<log message="transform_call exitMain(1) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call exitMain(1) expected_return_type Some(()): :507:13"/>
<log message="verifying function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 1"/>
<log message="real expression : 1"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 1 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec exitMain(1) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="already added function exitMain"/>
</children>
</children>
</children>
<log message="transform_function pub asm stdlib:option stdlib_option_toUnit_OptionIOError_Unit(o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=stdlib:io/print:IOError"/>
<children>
<log message="added parameter o -&gt; o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt; to context"/>
</children>
<log message="transform_function pub asm ::core:core __core_core_removeFromReused_i32_Unit(address:i32) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="found call macro $call(print, &quot;  remove from reused &quot;)"/>
<log message="found call macro $call(print, $address: i32)"/>
<log message="found ref $address : i32"/>
<log message="found call macro $call(print, &quot; &quot;)"/>
<log message="found call macro $call(print, [eax])"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot; &quot;)"/>
<log message="found call macro $call(print, 1: ::core:core:File, eax)"/>
<log message="found call macro $call(print, 1: ::core:core:File, &quot;\n&quot;)"/>
<log message="transform_call print(&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(&quot;&quot;) expected_return_type None: :469:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; str"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(&quot;&quot;) return type Some(()) filter Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(str), return type Some(())"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(str), return type Some(())"/>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_str_Unit"/>
</children>
<log message="old line     $call(print, &quot;  remove from reused &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_str_Unit, &quot;  remove from reused &quot;)"/>
<log message="transform_call print(0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(0) expected_return_type None: :470:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression 0 expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression 0 expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(0) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(i32), return type Some(())"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(i32), return type Some(())"/>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_i32_Unit"/>
</children>
<log message="old line     $call(print, $address)"/>
<log message="new line     $call(stdlib_io_print_print_i32_Unit, $address)"/>
<log message="transform_call print(&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(&quot;&quot;) expected_return_type None: :471:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(str) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; str"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(&quot;&quot;) return type Some(()) filter Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(str), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(str), return type Some(())"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(str), return type Some(())"/>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_str_Unit"/>
</children>
<log message="old line     $call(print, &quot; &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_str_Unit, &quot; &quot;)"/>
<log message="transform_call print(0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(0) expected_return_type None: :473:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;list&quot; }, name: &quot;List&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/list.rasm&quot;), row: 8, column: 24 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:option print&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;option&quot; }, name: &quot;Option&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm&quot;), row: 10, column: 26 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(c:stdlib:std:Compare) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:std:Compare"/>
<log message="type_of_expression 0 expected type Some(stdlib:std:Compare)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:std:Compare filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:std:Compare"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:time print(timeVal:stdlib:time:TimeVal) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:time:TimeVal"/>
<log message="type_of_expression 0 expected type Some(stdlib:time:TimeVal)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type stdlib:time:TimeVal filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type stdlib:time:TimeVal"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub fn stdlib:io/print print&lt;T&gt;(v:T) -&gt; ()"/>
<log message="something substituted T -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(0) return type Some(()) filter Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(i32), return type Some(())"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(i32), return type Some(())"/>
<log message="Found functions: pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; ()"/>
<log message="already added function stdlib_io_print_print_i32_Unit"/>
</children>
<log message="old line     $call(print, [eax])"/>
<log message="new line     $call(stdlib_io_print_print_i32_Unit, [eax])"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :483:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot; &quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot; &quot;)"/>
<log message="transform_call print(Any(::core:core:File),0) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),0) expected_return_type None: :484:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : T"/>
<log message="type_of_expression 0 expected type Some(T)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  i32"/>
<children>
<log message="resolved generic type T to i32"/>
<log message="result T=i32"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type T filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="something substituted T -&gt; i32"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression 0 expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression 0 expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  i32"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(I32) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression 0 expected type Some(bool)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type bool filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression 0 expected type Some(f32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type f32 filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : str"/>
<log message="type_of_expression 0 expected type Some(str)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : char"/>
<log message="type_of_expression 0 expected type Some(char)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type char filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(i32) return_type: false"/>
<children>
<log message="parameter type str"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_i32_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, eax)"/>
<log message="new line     $call(stdlib_io_print_print_File_i32_OptionIOError, 1:File, eax)"/>
<log message="transform_call print(Any(::core:core:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(::core:core:File),&quot;&quot;) expected_return_type None: :485:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  ::core:core:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(str)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type str filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(::core:core:File)"/>
<log message="real expression : Any(::core:core:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(::core:core:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(::core:core:File)"/>
</children>
<log message="filter Exact(::core:core:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(::core:core:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(::core:core:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, 1:File, &quot;\n&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, 1:File, &quot;\n&quot;)"/>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;,v:fn (:lambda_in_struct:Model) -&gt; ()) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter receiver -&gt; receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter v -&gt; v:fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="found call macro $call(copy, $receiver: :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="found ref $receiver : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="transform_call copy(Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)) expected_return_type None"/>
<children>
<log message="get_valid_function call copy(Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)) expected_return_type None: file:////home/enrico/development/rust/rasm/rasm/resources/test/lambda_in_struct.rasm:3:0"/>
<log message="verifying function pub asm ::core:core copy&lt;T&gt;(o:T) -&gt; T"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="real expression : Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="real type of expression : T"/>
<log message="type_of_expression Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) expected type Some(T)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="resolved generic type T to :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="result T=:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type T filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="something substituted T -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="real expression : Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="real type of expression : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="type_of_expression Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) expected type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<children>
<log message="found type Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
</children>
<log message="filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="almost_same_type :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm ::core:core copy&lt;T&gt;(o:T) -&gt; T"/>
<log message="something substituted T -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec copy(Any(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)) return type Some(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) filter Exact(:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;)"/>
<log message="cannot find a function with name copy"/>
<log message="Found functions: "/>
<log message="adding new function pub asm ::core:core __core_core_copy_LoopModel_LoopModel(o::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
</children>
<log message="old line     $call(copy,$receiver)                                                           "/>
<log message="new line     $call(__core_core_copy_LoopModel_LoopModel,$receiver)                                                           "/>
</children>
<log message="transform_function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="added parameter s -&gt; s:str to context"/>
<log message="found call macro $call(slen, $s: str)"/>
<log message="found ref $s : str"/>
<log message="found call macro $call(sysPrint, $file: stdlib:io/print:File, [eax], ebx)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="transform_call slen(&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call slen(&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:267:0"/>
<log message="verifying function pub asm stdlib:str slen(s:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:str slen(s:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec slen(&quot;&quot;) return type Some(i32) filter Exact(str)"/>
<log message="cannot find a function with name slen"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:str stdlib_str_slen_str_i32(s:str) -&gt; i32"/>
</children>
<log message="old line     $call(slen, $s)"/>
<log message="new line     $call(stdlib_str_slen_str_i32, $s)"/>
<log message="transform_call sysPrint(Any(stdlib:io/print:File),0,0) expected_return_type None"/>
<children>
<log message="get_valid_function call sysPrint(Any(stdlib:io/print:File),0,0) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:271:0"/>
<log message="verifying function asm stdlib:io/print sysPrint(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm stdlib:io/print sysPrint(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec sysPrint(Any(stdlib:io/print:File),0,0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32), Exact(i32)"/>
<log message="cannot find a function with name sysPrint"/>
<log message="Found functions: "/>
<log message="adding new function asm stdlib:io/print stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
</children>
<log message="old line     $call(sysPrint, $file, [eax], ebx)"/>
<log message="new line     $call(stdlib_io_print_sysPrint_File_i32_i32_OptionIOError, $file, [eax], ebx)"/>
</children>
<log message="transform_function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
</children>
<log message="transform_function pub fn stdlib:io/print stdlib_io_print_println__Unit() -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="transform_statements expected_return_type Some(())"/>
<children>
<log message="transform_call toUnit(println(STDOut())) expected_return_type Some(())"/>
<children>
<log message="get_valid_function call toUnit(println(STDOut())) expected_return_type Some(()): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:9:29"/>
<log message="verifying function pub asm stdlib:option toUnit&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr println(STDOut())"/>
<log message="real expression : println(STDOut())"/>
<log message="real type of expression : stdlib:option:Option&lt;T&gt;"/>
<log message="transform_call println(STDOut()) expected_return_type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
<log message="get_valid_function call println(STDOut()) expected_return_type Some(stdlib:option:Option&lt;T&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:9:12"/>
<log message="verifying function pub fn stdlib:std println&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print println(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:9:19"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print println(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec println(STDOut()) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File)"/>
<log message="testing function pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_println__Unit() -&gt; (), filters Exact(stdlib:io/print:File), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:io/print stdlib_io_print_println_File_OptionIOError(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
</children>
<log message="type_of_expression stdlib_io_print_println_File_OptionIOError(stdlib_io_print_STDOut__File()) expected type Some(stdlib:option:Option&lt;T&gt;)"/>
<children>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  stdlib:io/print:IOError"/>
<children>
<log message="resolved generic type T to stdlib:io/print:IOError"/>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr println(STDOut())"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="real expression : println(STDOut())"/>
<log message="real type of expression : stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="transform_call println(STDOut()) expected_return_type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="get_valid_function call println(STDOut()) expected_return_type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:9:12"/>
<log message="verifying function pub fn stdlib:std println&lt;T&gt;(v:T) -&gt; ()"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(()) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print println(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr STDOut()"/>
<log message="real expression : STDOut()"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="transform_call STDOut() expected_return_type Some(stdlib:io/print:File)"/>
<children>
<log message="get_valid_function call STDOut() expected_return_type Some(stdlib:io/print:File): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:9:19"/>
<log message="verifying function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="calculating filters loop 0"/>
<children>
</children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print STDOut() -&gt; stdlib:io/print:File"/>
<log message="find call vec for module"/>
<log message="find_call_vec STDOut() return type Some(stdlib:io/print:File) filter "/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File, filters , return type Some(stdlib:io/print:File)"/>
<children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_STDOut__File() -&gt; stdlib:io/print:File"/>
<log message="already added function stdlib_io_print_STDOut__File"/>
</children>
<log message="type_of_expression stdlib_io_print_STDOut__File() expected type Some(stdlib:io/print:File)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
</children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:io/print println(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec println(STDOut()) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File)"/>
<log message="testing function pub fn stdlib:std stdlib_std_println_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type i32 filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_println__Unit() -&gt; (), filters Exact(stdlib:io/print:File), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_println_File_OptionIOError(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_println_File_OptionIOError(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_println_File_OptionIOError"/>
</children>
<log message="type_of_expression stdlib_io_print_println_File_OptionIOError(stdlib_io_print_STDOut__File()) expected type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
</children>
<log message="filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
</children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type () filter Exact(()) return_type: false"/>
<children>
</children>
<log message="it's valid with generic_types_coeff 1844674407370955"/>
</children>
<log message="found valid function pub asm stdlib:option toUnit&lt;T&gt;(o:stdlib:option:Option&lt;T&gt;) -&gt; ()"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec toUnit(println(STDOut())) return type Some(()) filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:option stdlib_option_toUnit_OptionIOError_Unit(o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) -&gt; (), filters Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;), return type Some(())"/>
<children>
<log message="almost_same_type stdlib:option:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm stdlib:option stdlib_option_toUnit_OptionIOError_Unit(o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) -&gt; ()"/>
<log message="already added function stdlib_option_toUnit_OptionIOError_Unit"/>
</children>
</children>
</children>
<log message="transform_function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="added parameter n -&gt; n:i32 to context"/>
<log message="found call macro $call(print, $file: stdlib:io/print:File, &quot;-&quot;)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="found call macro $call(sysPrint, $file: stdlib:io/print:File, esi, ecx)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="transform_call print(Any(stdlib:io/print:File),&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call print(Any(stdlib:io/print:File),&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:48:0"/>
<log message="verifying function pub fn stdlib:list print&lt;T&gt;(l:stdlib:list:List&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:list:List&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:list:List&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:list:List&lt;T&gt; effective_type  stdlib:io/print:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name List File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:str print&lt;T&gt;(file:stdlib:str:File,s:T) -&gt; stdlib:str:Option&lt;stdlib:str:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : T"/>
<log message="type_of_expression &quot;&quot; expected type Some(T)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  str"/>
<children>
<log message="resolved generic type T to str"/>
<log message="result T=str"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type T filter Exact(str) return_type: false"/>
<children>
<log message="parameter type T"/>
<log message="almost same: true"/>
</children>
</children>
<log message="calculating filters loop 1"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:str:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:str:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:str:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="something substituted T -&gt; str"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(v:stdlib:vec:Vec&lt;T&gt;,printFunction:fn (T) -&gt; ()) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  stdlib:io/print:File"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : fn (T) -&gt; ()"/>
<log message="type_of_expression &quot;&quot; expected type Some(fn (T) -&gt; ())"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type fn (T) -&gt; () effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched custom type name Vec File : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:vec print&lt;T&gt;(file:stdlib:vec:File,v:stdlib:vec:Vec&lt;T&gt;) -&gt; stdlib:vec:Option&lt;stdlib:vec:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:vec:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:vec:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:vec:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : stdlib:vec:Vec&lt;T&gt;"/>
<log message="type_of_expression &quot;&quot; expected type Some(stdlib:vec:Vec&lt;T&gt;)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:vec:Vec&lt;T&gt; effective_type  str"/>
<children>
</children>
</children>
<log message="ignored function due to unmatched types generic type: Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;vec&quot; }, name: &quot;Vec&quot;, param_types: [Generic(&quot;T&quot;)], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/rasm/vec.rasm&quot;), row: 17, column: 35 } }, effective type: Builtin(String) : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print&lt;T&gt;(prefix:str,o:T) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : str"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(str)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type str filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
</children>
<log message="ignored function due to Dummy : :0:0
"/>
</children>
<log message="verifying function pub fn stdlib:std print(file:stdlib:std:File,b:bool) -&gt; stdlib:std:Option&lt;stdlib:std:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:std:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:std:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:std:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : bool"/>
<log message="type_of_expression &quot;&quot; expected type Some(bool)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type bool filter Exact(str) return_type: false"/>
<children>
<log message="parameter type bool"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression &quot;&quot; expected type Some(i32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,n:f32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : f32"/>
<log message="type_of_expression &quot;&quot; expected type Some(f32)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type f32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type f32"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="verifying function pub asm stdlib:io/print print(file:stdlib:io/print:File,c:char) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : char"/>
<log message="type_of_expression &quot;&quot; expected type Some(char)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type char filter Exact(str) return_type: false"/>
<children>
<log message="parameter type char"/>
<log message="almost same: false"/>
</children>
</children>
</children>
<log message="found valid function pub asm stdlib:io/print print(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec print(Any(stdlib:io/print:File),&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(str)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_i32_Unit(v:i32) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub fn stdlib:io/print stdlib_io_print_print_str_Unit(v:str) -&gt; (), filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="testing function pub asm stdlib:io/print stdlib_io_print_print_File_i32_OptionIOError(file:stdlib:io/print:File,n:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(str), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(str) return_type: false"/>
<children>
<log message="parameter type i32"/>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: pub asm stdlib:io/print stdlib_io_print_print_File_str_OptionIOError(file:stdlib:io/print:File,s:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_print_File_str_OptionIOError"/>
</children>
<log message="old line     $call(print, $file, &quot;-&quot;)"/>
<log message="new line     $call(stdlib_io_print_print_File_str_OptionIOError, $file, &quot;-&quot;)"/>
<log message="transform_call sysPrint(Any(stdlib:io/print:File),0,0) expected_return_type None"/>
<children>
<log message="get_valid_function call sysPrint(Any(stdlib:io/print:File),0,0) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:67:0"/>
<log message="verifying function asm stdlib:io/print sysPrint(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm stdlib:io/print sysPrint(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec sysPrint(Any(stdlib:io/print:File),0,0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32), Exact(i32)"/>
<log message="testing function asm stdlib:io/print stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm stdlib:io/print stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_sysPrint_File_i32_i32_OptionIOError"/>
</children>
<log message="old line     $call(sysPrint,$file,esi,ecx)"/>
<log message="new line     $call(stdlib_io_print_sysPrint_File_i32_i32_OptionIOError,$file,esi,ecx)"/>
</children>
<log message="transform_function pub asm stdlib:io/print stdlib_io_print_println_File_OptionIOError(file:stdlib:io/print:File) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="found call macro $call(sysPrint, $file: stdlib:io/print:File, _NEW_LINE: i32: i32, 1)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="transform_call sysPrint(Any(stdlib:io/print:File),0,0) expected_return_type None"/>
<children>
<log message="get_valid_function call sysPrint(Any(stdlib:io/print:File),0,0) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:258:0"/>
<log message="verifying function asm stdlib:io/print sysPrint(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr Any(stdlib:io/print:File)"/>
<log message="real expression : Any(stdlib:io/print:File)"/>
<log message="real type of expression : stdlib:io/print:File"/>
<log message="type_of_expression Any(stdlib:io/print:File) expected type Some(stdlib:io/print:File)"/>
<children>
<log message="found type Exact(stdlib:io/print:File)"/>
</children>
<log message="filter Exact(stdlib:io/print:File)"/>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function asm stdlib:io/print sysPrint(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec sysPrint(Any(stdlib:io/print:File),0,0) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:File), Exact(i32), Exact(i32)"/>
<log message="testing function asm stdlib:io/print stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;, filters Exact(stdlib:io/print:File), Exact(i32), Exact(i32), return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type stdlib:io/print:File filter Exact(stdlib:io/print:File) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: asm stdlib:io/print stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="already added function stdlib_io_print_sysPrint_File_i32_i32_OptionIOError"/>
</children>
<log message="old line     $call(sysPrint, $file, _NEW_LINE: i32, 1)"/>
<log message="new line     $call(stdlib_io_print_sysPrint_File_i32_i32_OptionIOError, $file, _NEW_LINE: i32, 1)"/>
</children>
<log message="transform_function asm stdlib:io/print stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:stdlib:io/print:File,s:i32,len:i32) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="added parameter s -&gt; s:i32 to context"/>
<log message="added parameter len -&gt; len:i32 to context"/>
<log message="found call macro $call(someIOError, &quot;Error writing to file.&quot;)"/>
<log message="transform_call someIOError(&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call someIOError(&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:337:0"/>
<log message="verifying function fn stdlib:io/print someIOError(msg:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function fn stdlib:io/print someIOError(msg:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec someIOError(&quot;&quot;) return type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(str)"/>
<log message="cannot find a function with name someIOError"/>
<log message="Found functions: "/>
<log message="adding new function fn stdlib:io/print stdlib_io_print_someIOError_str_OptionIOError(msg:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
</children>
<log message="old line     $call(someIOError, &quot;Error writing to file.&quot;)"/>
<log message="new line     $call(stdlib_io_print_someIOError_str_OptionIOError, &quot;Error writing to file.&quot;)"/>
</children>
<log message="transform_function pub asm ::core:core __core_core_copy_LoopModel_LoopModel(o::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<children>
<log message="added parameter o -&gt; o::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="found call macro $call(rasmalloc, ecx, &quot;for clone&quot;)"/>
<log message="found call macro $call(memcopy, [ebx], [eax], ecx)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: :666:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, ecx, &quot;for clone&quot;)"/>
<log message="new line     $call(rasmalloc, ecx, &quot;for clone&quot;)"/>
<log message="transform_call memcopy(0,0,0) expected_return_type None"/>
<children>
<log message="get_valid_function call memcopy(0,0,0) expected_return_type None: :667:0"/>
<log message="verifying function pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; ()"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; ()"/>
<log message="find call vec for module"/>
<log message="find_call_vec memcopy(0,0,0) return type Some(()) filter Exact(i32), Exact(i32), Exact(i32)"/>
<log message="testing function pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; (), filters Exact(i32), Exact(i32), Exact(i32), return type Some(())"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type () filter Exact(()) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; ()"/>
<log message="already added function memcopy"/>
</children>
<log message="old line     $call(memcopy, [ebx], [eax], ecx)"/>
<log message="new line     $call(memcopy, [ebx], [eax], ecx)"/>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_updateFn_LoopModel_fni32ModelOptionModel(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter v -&gt; v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
</children>
<log message="transform_function asm :lambda_in_struct _lambda_in_struct_renderFn_LoopModel_fnModelUnit(v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;) -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="generic_types "/>
<log message="resolved generic_types T=:lambda_in_struct:Model"/>
<children>
<log message="added parameter v -&gt; v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
</children>
<log message="transform_function pub asm stdlib:str stdlib_str_slen_str_i32(s:str) -&gt; i32"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter s -&gt; s:str to context"/>
</children>
<log message="transform_function fn stdlib:io/print stdlib_io_print_someIOError_str_OptionIOError(msg:str) -&gt; stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter msg -&gt; msg:str to context"/>
<log message="transform_statements expected_return_type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="transform_call IOError(msg) expected_return_type None"/>
<children>
<log message="get_valid_function call IOError(msg) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:345:24"/>
<log message="verifying function pub asm stdlib:std IOError(message:str) -&gt; stdlib:std:IOError"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr msg"/>
<log message="real expression : msg"/>
<log message="real type of expression : str"/>
<log message="type_of_expression msg expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm stdlib:std IOError(message:str) -&gt; stdlib:std:IOError"/>
<log message="find call vec for module"/>
<log message="find_call_vec IOError(msg) return type Some(stdlib:std:IOError) filter Exact(str)"/>
<log message="cannot find a function with name IOError"/>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:std stdlib_std_IOError_str_IOError(message:str) -&gt; stdlib:std:IOError"/>
</children>
<log message="type_of_expression stdlib_std_IOError_str_IOError(msg) expected type None"/>
<children>
</children>
<log message="adding let val error of type stdlib:std:IOError to context"/>
<log message="transform_call Option::Some(error) expected_return_type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="get_valid_function call Option::Some(error) expected_return_type Some(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;): file:////home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm:346:11"/>
<log message="verifying function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<children>
<log message="almost_same_type stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt; filter Exact(stdlib:option:Option&lt;T&gt;) return_type: false"/>
<children>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(T) return_type: false"/>
<children>
<log message="already_resolved None"/>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="extract_generic_types_from_effective_type: generic_type stdlib:option:Option&lt;T&gt; effective_type  stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;"/>
<children>
<log message="extract_generic_types_from_effective_type: generic_type T effective_type  stdlib:io/print:IOError"/>
<children>
<log message="resolved generic type T to stdlib:io/print:IOError"/>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="result T=stdlib:io/print:IOError"/>
</children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr error"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="real expression : error"/>
<log message="real type of expression : stdlib:io/print:IOError"/>
<log message="type_of_expression error expected type Some(stdlib:io/print:IOError)"/>
<children>
<log message="found type Exact(stdlib:std:IOError)"/>
</children>
<log message="filter Exact(stdlib:std:IOError)"/>
<log message="almost_same_type stdlib:io/print:IOError filter Exact(stdlib:std:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
</children>
<log message="almost_same_type stdlib:option:Option&lt;T&gt; filter Exact(stdlib:io/print:Option&lt;stdlib:io/print:IOError&gt;) return_type: false"/>
<children>
<log message="almost_same_type T filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: true"/>
</children>
<log message="almost same: true"/>
</children>
<log message="it's valid with generic_types_coeff 184467440737095516"/>
</children>
<log message="found valid function pub asm stdlib:option Option_Some&lt;T&gt;(value:T) -&gt; stdlib:option:Option&lt;T&gt;"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted stdlib:option:Option&lt;T&gt; -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="find call vec for module"/>
<log message="find_call_vec Option::Some(error) return type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;) filter Exact(stdlib:io/print:IOError)"/>
<log message="testing function pub asm stdlib:option stdlib_option_Option_Some_Model_OptionModel(value::lambda_in_struct:Model) -&gt; stdlib:option:Option&lt;:lambda_in_struct:Model&gt;, filters Exact(stdlib:io/print:IOError), return type Some(stdlib:option:Option&lt;stdlib:io/print:IOError&gt;)"/>
<children>
<log message="almost_same_type :lambda_in_struct:Model filter Exact(stdlib:io/print:IOError) return_type: false"/>
<children>
<log message="almost same: false"/>
</children>
<log message="match_parameters: false"/>
</children>
<log message="Found functions: "/>
<log message="adding new function pub asm stdlib:option stdlib_option_Option_Some_IOError_OptionIOError(value:stdlib:io/print:IOError) -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
</children>
</children>
</children>
<log message="transform_function pub asm stdlib:option stdlib_option_Option_Some_IOError_OptionIOError(value:stdlib:io/print:IOError) -&gt; stdlib:option:Option&lt;stdlib:io/print:IOError&gt;"/>
<log message="generic_types "/>
<log message="resolved generic_types T=stdlib:io/print:IOError"/>
<children>
<log message="added parameter value -&gt; value:stdlib:io/print:IOError to context"/>
<log message="found call macro $call(rasmalloc, 8, [_s_1]: str: str)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/rasm/option.rasm:3:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, 8, [_s_1]: str)                                                "/>
<log message="new line     $call(rasmalloc, 8, [_s_1]: str)                                                "/>
</children>
<log message="transform_function pub asm stdlib:std stdlib_std_IOError_str_IOError(message:str) -&gt; stdlib:std:IOError"/>
<log message="generic_types "/>
<log message="resolved generic_types "/>
<children>
<log message="added parameter message -&gt; message:str to context"/>
<log message="found call macro $call(rasmalloc, 4, &quot;&quot;)"/>
<log message="transform_call rasmalloc(0,&quot;&quot;) expected_return_type None"/>
<children>
<log message="get_valid_function call rasmalloc(0,&quot;&quot;) expected_return_type None: file:////home/enrico/development/rust/rasm/stdlib/src/main/rasm/std.rasm:2:0"/>
<log message="verifying function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<children>
<log message="calculating filters loop 0"/>
<children>
<log message="expr 0"/>
<log message="real expression : 0"/>
<log message="real type of expression : i32"/>
<log message="type_of_expression 0 expected type Some(i32)"/>
<children>
<log message="found type Exact(i32)"/>
</children>
<log message="filter Exact(i32)"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="expr &quot;&quot;"/>
<log message="real expression : &quot;&quot;"/>
<log message="real type of expression : str"/>
<log message="type_of_expression &quot;&quot; expected type Some(str)"/>
<children>
<log message="found type Exact(str)"/>
</children>
<log message="filter Exact(str)"/>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
</children>
<log message="it's valid with generic_types_coeff 0"/>
</children>
<log message="found valid function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="find call vec for module"/>
<log message="find_call_vec rasmalloc(0,&quot;&quot;) return type Some(i32) filter Exact(i32), Exact(str)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type Some(i32)"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
<log message="almost_same_type i32 filter Exact(i32) return_type: true"/>
<children>
</children>
</children>
<log message="Found functions: pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="already added function rasmalloc"/>
</children>
<log message="old line     $call(rasmalloc, 4, &quot;&quot;)                                                         "/>
<log message="new line     $call(rasmalloc, 4, &quot;&quot;)                                                         "/>
</children>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted :lambda_in_struct:Option&lt;T&gt; -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted fn (i32,T) -&gt; :lambda_in_struct:Option&lt;T&gt; -&gt; fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt;"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted fn (T) -&gt; () -&gt; fn (:lambda_in_struct:Model) -&gt; ()"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; :lambda_in_struct:Model"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="something substituted T -&gt; stdlib:io/print:IOError"/>
<log message="added parameter label -&gt; label:i32 to context"/>
<log message="added parameter descrLabel -&gt; descrLabel:i32 to context"/>
<log message="added parameter value -&gt; value:i32 to context"/>
<log message="found call macro $call(rasmalloc, 4, [ebx]: str: str)"/>
<log message="found call macro $call(addRef, eax, [ebx]: str: str)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 4 }, in addHeap(label:i32,descrLabel:i32,value:i32)"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="native call to DefaultFunctionCall { name: &quot;addRef&quot;, param_types: [Builtin(I32), Builtin(String)], i: 5 }, in addHeap(label:i32,descrLabel:i32,value:i32)"/>
<log message="testing function pub asm ::core:core addRef(address:i32,descr:str) -&gt; (), filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core addRef(address:i32,descr:str) -&gt; ()"/>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="added parameter descr -&gt; descr:str to context"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;start addRef &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, $address: i32: i32)"/>
<log message="found ref $address : i32"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, $descr: str: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  reusable size &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, ebx)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  ref count: &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, ebx)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(__core_core_removeFromReused_i32_Unit, ebx)"/>
<log message="found call macro $call(__core_core_invalidAddress__Unit)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;end addRef\n&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 6 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 7 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 8 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 9 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 10 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 11 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 21 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 22 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 23 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 45 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 46 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 47 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;__core_core_removeFromReused_i32_Unit&quot;, param_types: [Builtin(I32)], i: 57 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to __core_core_removeFromReused_i32_Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;__core_core_invalidAddress__Unit&quot;, param_types: [], i: 64 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to __core_core_invalidAddress__Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 68 }, in addRef(address:i32,descr:str)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="added parameter labelAllocation -&gt; labelAllocation:i32 to context"/>
<log message="added parameter labelMemory -&gt; labelMemory:i32 to context"/>
<log message="added parameter size -&gt; size:i32 to context"/>
<log message="added parameter s -&gt; s:i32 to context"/>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="added parameter esp -&gt; esp:i32 to context"/>
<log message="found call macro $call(addStaticStringToHeap, [ebx])"/>
<log message="native call to DefaultFunctionCall { name: &quot;addStaticStringToHeap&quot;, param_types: [Builtin(I32)], i: 25 }, in createCmdLineArguments(address:i32,esp:i32) -&gt; i32"/>
<log message="testing function pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32, filters Exact(i32), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core addStaticStringToHeap(s:i32) -&gt; i32"/>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="added parameter descr -&gt; descr:str to context"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;start deref &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, $address: i32: i32)"/>
<log message="found ref $address : i32"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, $descr: str: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  reusable size &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, ebx: i32: i32)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  ref count: &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, ebx: i32: i32)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  deallocated &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, eax)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  add reused &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, ebx)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot; with value &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, [ebx])"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;Negative allocation count: &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, $descr: str: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(exitMain, 1)"/>
<log message="found call macro $call(__core_core_invalidAddress__Unit)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;end deref\n&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 6 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 7 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 8 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 9 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 10 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 11 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 20 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 21 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 22 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 48 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 49 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 50 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 60 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 61 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 62 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 73 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 74 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 75 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 76 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 85 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 86 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 87 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;exitMain&quot;, param_types: [Builtin(I32)], i: 88 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="native call to DefaultFunctionCall { name: &quot;__core_core_invalidAddress__Unit&quot;, param_types: [], i: 90 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to __core_core_invalidAddress__Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 94 }, in deref(address:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="added parameter status -&gt; status:i32 to context"/>
<log message="added parameter source -&gt; source:i32 to context"/>
<log message="added parameter dest -&gt; dest:i32 to context"/>
<log message="added parameter len -&gt; len:i32 to context"/>
<log message="added parameter size -&gt; size:i32 to context"/>
<log message="added parameter descr -&gt; descr:str to context"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;start malloc &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, $size: i32: i32)"/>
<log message="found ref $size : i32"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;, &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, $descr: str: str)"/>
<log message="found ref $descr : str"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  reusable size &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, ebx)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  reusing address &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, eax)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;, size &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, [eax + 8])"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(__core_core_removeFromReused_i32_Unit, ecx)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  allocation &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;Out of heap space&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(exitMain, 1)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  new address&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;Out of memory&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(exitMain, 1)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  newAddress Ok&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  allocate&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;  &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, eax)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;end malloc&quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 7 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 8 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 9 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 10 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 11 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 21 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 22 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 23 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 41 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 42 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 43 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 44 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 45 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;__core_core_removeFromReused_i32_Unit&quot;, param_types: [Builtin(I32)], i: 50 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to __core_core_removeFromReused_i32_Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 59 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 60 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 69 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 70 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;exitMain&quot;, param_types: [Builtin(I32)], i: 71 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 77 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 78 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 86 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 87 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;exitMain&quot;, param_types: [Builtin(I32)], i: 88 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="testing function pub asm ::core:core exitMain(status:i32) -&gt; (), filters Exact(i32), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core exitMain(status:i32) -&gt; ()"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 93 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 94 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 107 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 108 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 125 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 126 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 127 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 128 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 129 }, in rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="added parameter s -&gt; s:str to context"/>
<log message="added parameter s -&gt; s:str to context"/>
<log message="added parameter a -&gt; a:i32 to context"/>
<log message="added parameter b -&gt; b:i32 to context"/>
<log message="added parameter v -&gt; v::lambda_in_struct:Model to context"/>
<log message="added parameter v -&gt; v::lambda_in_struct:Model to context"/>
<log message="added parameter n1 -&gt; n1:i32 to context"/>
<log message="added parameter n2 -&gt; n2:i32 to context"/>
<log message="added parameter x -&gt; x:i32 to context"/>
<log message="added parameter y -&gt; y:i32 to context"/>
<log message="found call macro $call(rasmalloc, 8, &quot;&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 1 }, in _lambda_in_struct_Model_i32_i32_Model(x:i32,y:i32) -&gt; Model_2"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="added parameter value -&gt; value::lambda_in_struct:Model to context"/>
<log message="found call macro $call(rasmalloc, 8, [_s_1]: str: str)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 1 }, in stdlib_option_Option_Some_Model_OptionModel(value:Model_2) -&gt; Option_1"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="added parameter value -&gt; value:stdlib:io/print:IOError to context"/>
<log message="found call macro $call(rasmalloc, 8, [_s_1]: str: str)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 1 }, in stdlib_option_Option_Some_IOError_OptionIOError(value:IOError_4) -&gt; Option_5"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="added parameter cond -&gt; cond:bool to context"/>
<log message="added parameter ftrue -&gt; ftrue:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter ffalse -&gt; ffalse:fn () -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="added parameter s -&gt; s:str to context"/>
<log message="found call macro $call(stdlib_str_slen_str_i32, $s: str: str)"/>
<log message="found ref $s : str"/>
<log message="found call macro $call(stdlib_io_print_sysPrint_File_i32_i32_OptionIOError, $file: stdlib:io/print:File: File_7, [eax], ebx)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_str_slen_str_i32&quot;, param_types: [Builtin(String)], i: 3 }, in stdlib_io_print_print_File_str_OptionIOError(file:File_7,s:str) -&gt; Option_5"/>
<log message="convert_to_typed_module: cannot find call to stdlib_str_slen_str_i32"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_sysPrint_File_i32_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;io/print&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm&quot;), row: 264, column: 27 } }, Builtin(I32), Builtin(I32)], i: 7 }, in stdlib_io_print_print_File_str_OptionIOError(file:File_7,s:str) -&gt; Option_5"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_sysPrint_File_i32_i32_OptionIOError"/>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="added parameter n -&gt; n:i32 to context"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, $file: stdlib:io/print:File: File_7, &quot;-&quot;)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="found call macro $call(stdlib_io_print_sysPrint_File_i32_i32_OptionIOError, $file: stdlib:io/print:File: File_7, esi, ecx)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;io/print&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm&quot;), row: 264, column: 27 } }, Builtin(String)], i: 23 }, in stdlib_io_print_print_File_i32_OptionIOError(file:File_7,n:i32) -&gt; Option_5"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_sysPrint_File_i32_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;io/print&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm&quot;), row: 264, column: 27 } }, Builtin(I32), Builtin(I32)], i: 42 }, in stdlib_io_print_print_File_i32_OptionIOError(file:File_7,n:i32) -&gt; Option_5"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_sysPrint_File_i32_i32_OptionIOError"/>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="found call macro $call(stdlib_io_print_sysPrint_File_i32_i32_OptionIOError, $file: stdlib:io/print:File: File_7, _NEW_LINE: i32: i32, 1)"/>
<log message="found ref $file : stdlib:io/print:File"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_sysPrint_File_i32_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;stdlib&quot;, path: &quot;io/print&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: Some(&quot;/home/enrico/development/rust/rasm/stdlib/src/main/nasmi386/io/print.rasm&quot;), row: 264, column: 27 } }, Builtin(I32), Builtin(I32)], i: 1 }, in stdlib_io_print_println_File_OptionIOError(file:File_7) -&gt; Option_5"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_sysPrint_File_i32_i32_OptionIOError"/>
<log message="added parameter update -&gt; update:fn (i32,:lambda_in_struct:Model) -&gt; :lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter render -&gt; render:fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="found call macro $call(rasmalloc, 8, &quot;&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 1 }, in _lambda_in_struct_Loop_fni32ModelOptionModel_fnModelUnit_LoopModel(update:fn (i32,Model_2) -&gt; Option_1,render:fn (Model_2) -&gt; ()) -&gt; Loop_10"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="added parameter address -&gt; address:i32 to context"/>
<log message="found call macro $call(stdlib_io_print_print_str_Unit, &quot;  remove from reused &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_i32_Unit, $address: i32: i32)"/>
<log message="found ref $address : i32"/>
<log message="found call macro $call(stdlib_io_print_print_str_Unit, &quot; &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_i32_Unit, [eax])"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot; &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, eax)"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_str_Unit&quot;, param_types: [Builtin(String)], i: 5 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_str_Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_i32_Unit&quot;, param_types: [Builtin(I32)], i: 6 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_i32_Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_str_Unit&quot;, param_types: [Builtin(String)], i: 7 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_str_Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_i32_Unit&quot;, param_types: [Builtin(I32)], i: 9 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_i32_Unit"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 19 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 20 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 21 }, in __core_core_removeFromReused_i32_Unit(address:i32)"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="added parameter receiver -&gt; receiver::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter v -&gt; v:fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="found call macro $call(__core_core_copy_LoopModel_LoopModel, $receiver: :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;: Loop_10)"/>
<log message="found ref $receiver : :lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt;"/>
<log message="native call to DefaultFunctionCall { name: &quot;__core_core_copy_LoopModel_LoopModel&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;lambda_in_struct&quot; }, name: &quot;Loop&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;lambda_in_struct&quot; }, name: &quot;Model&quot;, param_types: [], index: ASTIndex { file_name: Some(&quot;resources/test/lambda_in_struct.rasm&quot;), row: 37, column: 31 } }], index: ASTIndex { file_name: Some(&quot;resources/test/lambda_in_struct.rasm&quot;), row: 37, column: 32 } }], i: 2 }, in _lambda_in_struct_render_LoopModel_fnModelUnit_LoopModel(receiver:Loop_10,v:fn (Model_2) -&gt; ()) -&gt; Loop_10"/>
<log message="convert_to_typed_module: cannot find call to __core_core_copy_LoopModel_LoopModel"/>
<log message="added parameter value -&gt; value::lambda_in_struct:Option&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter Some -&gt; Some:fn (:lambda_in_struct:Model) -&gt; () to context"/>
<log message="added parameter None -&gt; None:fn () -&gt; () to context"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;Option::match, invalid value &quot;)"/>
<log message="found call macro $call(stdlib_io_print_print_File_i32_OptionIOError, 1: ::File: File_7, [eax])"/>
<log message="found call macro $call(stdlib_io_print_print_File_str_OptionIOError, 1: ::File: File_7, &quot;\n&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 23 }, in stdlib_option_match_OptionModel_fnModelUnit_fnUnit_Unit(value:Option_1,Some:fn (Model_2) -&gt; (),None:fn () -&gt; ())"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_i32_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(I32)], i: 24 }, in stdlib_option_match_OptionModel_fnModelUnit_fnUnit_Unit(value:Option_1,Some:fn (Model_2) -&gt; (),None:fn () -&gt; ())"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_i32_OptionIOError"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_print_File_str_OptionIOError&quot;, param_types: [Custom { namespace: ASTNameSpace { lib: &quot;&quot;, path: &quot;&quot; }, name: &quot;File&quot;, param_types: [], index: ASTIndex { file_name: None, row: 1, column: 5 } }, Builtin(String)], i: 25 }, in stdlib_option_match_OptionModel_fnModelUnit_fnUnit_Unit(value:Option_1,Some:fn (Model_2) -&gt; (),None:fn () -&gt; ())"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_print_File_str_OptionIOError"/>
<log message="added parameter o -&gt; o:stdlib:option:Option&lt;stdlib:io/print:IOError&gt; to context"/>
<log message="added parameter v -&gt; v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter v -&gt; v::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="added parameter o -&gt; o::lambda_in_struct:Loop&lt;:lambda_in_struct:Model&gt; to context"/>
<log message="found call macro $call(rasmalloc, ecx, &quot;for clone&quot;)"/>
<log message="found call macro $call(memcopy, [ebx], [eax], ecx)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 6 }, in __core_core_copy_LoopModel_LoopModel(o:Loop_10) -&gt; Loop_10"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
<log message="native call to DefaultFunctionCall { name: &quot;memcopy&quot;, param_types: [Builtin(I32), Builtin(I32), Builtin(I32)], i: 7 }, in __core_core_copy_LoopModel_LoopModel(o:Loop_10) -&gt; Loop_10"/>
<log message="testing function pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; (), filters Exact(i32), Exact(i32), Exact(i32), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core memcopy(source:i32,dest:i32,len:i32) -&gt; ()"/>
<log message="added parameter s -&gt; s:str to context"/>
<log message="added parameter file -&gt; file:stdlib:io/print:File to context"/>
<log message="added parameter s -&gt; s:i32 to context"/>
<log message="added parameter len -&gt; len:i32 to context"/>
<log message="found call macro $call(stdlib_io_print_someIOError_str_OptionIOError, &quot;Error writing to file.&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;stdlib_io_print_someIOError_str_OptionIOError&quot;, param_types: [Builtin(String)], i: 16 }, in stdlib_io_print_sysPrint_File_i32_i32_OptionIOError(file:File_7,s:i32,len:i32) -&gt; Option_5"/>
<log message="convert_to_typed_module: cannot find call to stdlib_io_print_someIOError_str_OptionIOError"/>
<log message="added parameter message -&gt; message:str to context"/>
<log message="found call macro $call(rasmalloc, 4, &quot;&quot;)"/>
<log message="native call to DefaultFunctionCall { name: &quot;rasmalloc&quot;, param_types: [Builtin(I32), Builtin(String)], i: 1 }, in stdlib_std_IOError_str_IOError(message:str) -&gt; IOError_15"/>
<log message="testing function pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32, filters Exact(i32), Exact(str), return type None"/>
<children>
<log message="almost_same_type i32 filter Exact(i32) return_type: false"/>
<children>
</children>
<log message="almost_same_type str filter Exact(str) return_type: false"/>
<children>
</children>
<log message="match_parameters: true"/>
</children>
<log message="converted to pub asm ::core:core rasmalloc(size:i32,descr:str) -&gt; i32"/>
</children>
</children>
</children>
</children>
</children>
</root>
