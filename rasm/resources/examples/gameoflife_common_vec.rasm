pub struct FullCell {
    cell: Cell,
    adjacents: Vec<Cell>
}

pub fn readCellFile(file: str) -> Vec<Cell> {
    let linesEnumerate = listEnumerate(filterLines(lines(readFile(file))));

    let l = fmap(linesEnumerate, { line -> lineCells(line); });
    toVec(l);
}

pub fn allCells(width: i32, height: i32) -> Vec<FullCell> {
    cartesianProduct(vecRange(0, height), vecRange(0, width), { y, x ->
        let cell = Cell(x, y);

        FullCell(cell, adjacents(cell));
    });
}

pub fn moveCells(cells: Vec<Cell>, d: i32) -> Vec<Cell> {
    map(cells, { it -> Cell(add(it.x, d), add(it.y, d)); });
}

pub fn next(cells: Vec<Cell>, allCells: Vec<FullCell>) -> Vec<Cell> {
    let result = map(filter(allCells, { it ->
        let adjsAlive = count(adjacents(it),  { a -> isAlive(cells, a); });
        if(isAlive(cells, it.cell),
            or(eq(adjsAlive, 2),eq(adjsAlive,3)),
            eq(adjsAlive, 3)
        );
    }), { it -> it.cell;});
    result;
}

pub fn adjacents(cell: Cell) -> Vec<Cell> {
    let x = cell.x;
    let y = cell.y;

    let left = add(x, -1);
    let right = add(x, 1);
    let up = add(y, -1);
    let down = add(y, 1);

    vecOf(
        Cell(left, up),
        Cell(left, y),
        Cell(left, down),
        Cell(x, up),
        Cell(x, down),
        Cell(right, up),
        Cell(right, y),
        Cell(right, down)
    );
}

/** false = 0 true = any other value **/
pub fn isAlive(cells: Vec<Cell>, cell: Cell) -> bool {
    let x = x(cell);
    let y = y(cell);

    anyMatch(cells, { it ->
        and(eq(x, x(it)), eq(y, y(it)));
    });
}

pub fn printCellsPlain(cells: Vec<Cell>) {
    forEach(cells, { cell ->
        print(x(cell));
        print(",");
        print(y(cell));
        print(" ");
    });

    println();
}

pub fn printAllCellsPlain(cells: Vec<FullCell>) {
    forEach(cells, { fullCell ->
        let cell = cell(fullCell);
        print(x(cell));
        print(",");
        print(y(cell));
        print(" ");
    });

    println();
}