pub type SDLRenderer(false);
pub type SDLWindow(false);
pub type SDLSurface(false);
pub type SDLTexture(false);
pub type SDLFont(false);

native isSDLNull<T>(value: T) -> bool /{
    mov dword   eax, $value
    cmp     eax,0
    je .null
    mov dword eax, 0
    jmp .end
.null:
    mov dword eax, 1
.end:
}/

native sdlFailure(message: str) /{
    $ccall(SDL_GetError)
    $ccall(printf, $message, eax)
    $ccall(SDL_Quit)
    $ccall(exit, 1)
}/

pub native sdlInit() /{
    ; SDL_Init(SDL_INIT_EVERYTHING)
    $ccall(SDL_Init, 62001)
}/

pub native sdlCreateWindow(title: str, x: i32, y: i32, width: i32, height: i32) -> SDLWindow /{
    $ccall(SDL_CreateWindow, $title, $x, $y, $width, $height, 4)
}/

pub native sdlDelay(millis: i32) /{
    $ccall(SDL_Delay, $millis)
}/

pub native sdlCreateRenderer(win: SDLWindow) -> SDLRenderer /{
    ; SDL_RENDERER_ACCELERATED = 0x00000002
    ; SDL_RENDERER_PRESENTVSYNC = 0x00000004
    ; TODO for now vsync is always disabled, pass a configuration struct instead
    $ccall(SDL_CreateRenderer, $win, -1, 2)
}/

pub native sdlLoadBMP(file: str) -> SDLSurface /{
    $ccall(SDL_RWFromFile, $file, "rb")
    $ccall(SDL_LoadBMP_RW, eax, 1)
}/

pub native sdlCreateTextureFromSurface(ren: SDLRenderer, surface: SDLSurface) -> SDLTexture /{
    $ccall(SDL_CreateTextureFromSurface, $ren, $surface)
}/

pub native sdlFreeSurface(surface: SDLSurface) /{
    $ccall(SDL_FreeSurface, $surface)
}/

pub native sdlRenderClear(ren: SDLRenderer) /{
    $ccall(SDL_RenderClear, $ren)
}/

pub native sdlRenderCopy(ren: SDLRenderer, tex: SDLTexture) /{
    $ccall(SDL_RenderCopy, $ren, $tex, 0, 0)
}/

pub native sdlRenderPresent(ren: SDLRenderer) /{
    $ccall(SDL_RenderPresent, $ren)
}/

pub native sdlDestroyRenderer(ren: SDLRenderer) /{
    $ccall(SDL_DestroyRenderer, $ren)
}/

pub native sdlDestroyTexture(tex: SDLTexture) /{
    $ccall(SDL_DestroyTexture, $tex)
}/

pub native sdlDestroyWindow(win: SDLWindow) /{
    $ccall(SDL_DestroyWindow, $win)
}/

native sdlGetError() -> str /{
    $ccall(SDL_GetError)
    ; TODO I don't know if it works or if it is correct: it is not a static string
    $call(addStaticStringToHeap, eax)
}/

pub native sdlQuit() /{
    $ccall(SDL_Quit)
}/

pub fn sdlSetRenderDrawColor(ren: SDLRenderer, color: SDLColor) {
    sdlSetRenderDrawColor(ren, r(color), g(color), b(color), a(color));
}

pub native sdlSetRenderDrawColor(ren: SDLRenderer, r: i32, g: i32, b: i32, a: i32) /{
    $ccall(SDL_SetRenderDrawColor, $ren, $r, $g, $b, $a)
}/

pub native sdlRenderFillRect(ren: SDLRenderer, rect: SDLRect) /{
    $ccall(SDL_RenderFillRect, $ren, $rect)
}/

/*
SDL C types:

typedef union{
  Uint8 type;
  SDL_ActiveEvent active;
  SDL_KeyboardEvent key;
  SDL_MouseMotionEvent motion;
  SDL_MouseButtonEvent button;
  SDL_JoyAxisEvent jaxis;
  SDL_JoyBallEvent jball;
  SDL_JoyHatEvent jhat;
  SDL_JoyButtonEvent jbutton;
  SDL_ResizeEvent resize;
  SDL_ExposeEvent expose;
  SDL_QuitEvent quit;
  SDL_UserEvent user;
  SDL_SysWMEvent syswm;
} SDL_Event;

typedef struct{
  Uint8 type;
  Uint8 state;
  SDL_keysym keysym;
} SDL_KeyboardEvent;

typedef struct{
  Uint8 scancode;
  SDLKey sym;
  SDLMod mod;
  Uint16 unicode;
} SDL_keysym;

*/
pub native keyEvent() -> Option<KeyEvent> /{
    push    ebx

    $call(rasmalloc, 56, " for temp mem for sdl keyEvent")
    $call(addRef, eax, "temp mem for sdl keyEvent")
    push    eax

    mov     dword  ebx, [eax]
    $ccall(SDL_PollEvent, [eax]);
    cmp     eax, 0
    je      .noKey
    mov     dword eax,[ebx] ; here we have the event type
    cmp     eax, 768        ; keyDown
    jne     .noKeyDown
    $call(KeyEvent, [ebx + 16], [_enum_sdl_sdl_KeyState_Down]: KeyState)
    $addRef(eax:KeyEvent)
    push    eax
    $call(Option::Some, eax: KeyEvent)
    pop     ebx
    $deref(ebx:KeyEvent)
    jmp     .end
.noKeyDown:
    cmp     eax, 769        ; keyUp
    jne     .noKey
    $call(KeyEvent, [ebx + 16], [_enum_sdl_sdl_KeyState_Up]: KeyState)
    $addRef(eax:KeyEvent)
    push    eax
    $call(Option::Some, eax: KeyEvent)
    pop     ebx
    $deref(ebx:KeyEvent)
    jmp     .end
.noKey:
    mov     dword eax, [_enum_stdlib_option_Option_None]
.end:
    pop     ebx
    $call(freeMem, ebx)

    pop     ebx
}/

// LOOP

pub native sdlLoop<CTX,MODEL>(ctx: CTX, model: MODEL, update: fn(Option<KeyEvent>, MODEL) -> MODEL, render: fn(CTX, MODEL) -> ()) /{
    push    ebx
    push    ecx
    push    edx

    mov     dword edx, $model
    mov     dword ebx, $model
.loop:
    ; $call(printTotalMemory)
    ; $call(printAllocated)
    ; $call(printTableSlotsAllocated)
    mov     dword ecx, [ebx]
    $call(sdlSingleLoop,$ctx:CTX,ebx:MODEL,$update,$render)
    cmp     dword ebx,eax
    jne     .doRef
    $call(println, "state is the same")
    jmp     .skipRef
.doRef:
    $addRef(eax: MODEL)
    ;$call(println, "New state ")
    ;$printRef(eax:MODEL)
    cmp     ebx,$model
    je      .skipRef
    ;$call(println, "Old state ")
    ; $printRef(ebx:MODEL)
    $deref(ebx: MODEL)
.skipRef:
    mov     dword edx, ebx
    mov     dword ebx, eax
    jmp     .loop

    pop     edx
    pop     ecx
    pop     ebx
}/

// Text

pub native sdlTTFInit() -> i32 /{
    $ccall(TTF_Init)
}/

pub native sdlOpenFont(file: str, size: i32) -> SDLFont /{
    $ccall(TTF_OpenFont, $file, $size)
}/

native sdlRenderTextSolid(font: SDLFont, message: str, r: i32, g: i32, b: i32, a: i32) -> SDLSurface /{
    push    ebx
    push    ecx

    $call(rasmalloc, 5, " for temp mem for sdlRenderTextSolid") ; why 5???
    push    eax

    mov     ecx, [eax]
    mov     dword ebx, $r
    mov     byte [ecx], bl
    mov     dword ebx, $g
    mov     byte [ecx + 1], bl
    mov     dword ebx, $b
    mov     byte [ecx + 2], bl
    mov     dword ebx, $a
    mov     byte [ecx + 3], bl

    $ccall(TTF_RenderText_Solid, $font, $message, [ecx])
    pop     ecx
    $call(freeMem, ecx)
    pop     ecx
    pop     ebx
}/

pub native sdlRenderTextSolid(font: SDLFont, message: str, color: SDLColor) -> SDLSurface /{
    push    ebx
    push    ecx
    push    edx

    mov     dword edx, $color
    mov     dword edx, [edx]

    $call(rasmalloc, 5, " for temp for sdlRenderTextSolid") ; why 5???
    push    eax

    mov     ecx, [eax]
    mov     dword ebx, [edx]
    mov     byte [ecx], bl
    mov     dword ebx, [edx + 4]
    mov     byte [ecx + 1], bl
    mov     dword ebx, [edx + 8]
    mov     byte [ecx + 2], bl
    mov     dword ebx, [edx + 12]
    mov     byte [ecx + 3], bl

    $ccall(TTF_RenderText_Solid, $font, $message, [ecx])
    pop     ecx
    $call(freeMem, ecx)

    pop     edx
    pop     ecx
    pop     ebx
}/

pub native sdlRenderText(ren: SDLRenderer, message: SDLTexture, rect: SDLRect) /{
    push    eax
    mov     dword eax, $rect
    $ccall(SDL_RenderCopy, $ren, $message, 0, [eax])
    pop     eax
}/