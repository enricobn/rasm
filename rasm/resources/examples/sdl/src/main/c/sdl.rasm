pub type SDLRenderer /{ hasReferences = false, nativeType = SDL_Renderer* }/
pub type SDLWindow /{ hasReferences = false, nativeType = SDL_Window* }/
pub type SDLSurface /{ hasReferences = false, nativeType = SDL_Surface* }/
pub type SDLTexture /{ hasReferences = false, nativeType = SDL_Texture* }/
pub type SDLFont /{ hasReferences = false, nativeType = TTF_Font* }/
type NativeSDLRect /{ hasReferences = false, nativeType = SDL_Rect* }/

native isSDLNull<T>(value: T) -> bool /{
    return (value == NULL);
}/

native sdlFailure(message: str) /{
    printf(message, SDL_GetError());
    SDL_Quit();
    exit(1);
}/

pub native sdlInit() /{
    $include(<SDL.h>)
    // SDL_Init(SDL_INIT_EVERYTHING)
    SDL_Init(62001);
}/

pub native sdlCreateWindow(title: str, x: int, y: int, width: int, height: int) -> SDLWindow /{
    return SDL_CreateWindow(title, x, y, width, height, 4);
}/

pub native sdlDelay(millis: int) /{
    SDL_Delay(millis);
}/

pub native sdlCreateRenderer(win: SDLWindow) -> SDLRenderer /{
    // SDL_RENDERER_ACCELERATED = 0x00000002
    // SDL_RENDERER_PRESENTVSYNC = 0x00000004
    // TODO for now vsync is always disabled, pass a configuration struct instead
    return SDL_CreateRenderer(win, -1, 2);
}/

pub native sdlLoadBMP(file: str) -> SDLSurface /{
    SDL_RWops* rw = SDL_RWFromFile(file, "rb");
    return SDL_LoadBMP_RW(rw, 1);
}/

pub native sdlLoadSVG(file: str) -> SDLSurface /{
    $include(<SDL_image.h>)
    SDL_RWops* rw = SDL_RWFromFile(file, "rb");
    return IMG_LoadSVG_RW(rw);
}/

pub native sdlCreateTextureFromSurface(ren: SDLRenderer, surface: SDLSurface) -> SDLTexture /{
    return SDL_CreateTextureFromSurface(ren, surface);
}/

pub native sdlFreeSurface(surface: SDLSurface) /{
    SDL_FreeSurface(surface);
}/

pub native sdlRenderClear(ren: SDLRenderer) /{
    SDL_RenderClear(ren);
}/

pub native sdlRenderCopy(ren: SDLRenderer, tex: SDLTexture) /{
    SDL_RenderCopy(ren, tex, 0, 0);
}/

pub native sdlRenderPresent(ren: SDLRenderer) /{
    SDL_RenderPresent(ren);
}/

pub native sdlDestroyRenderer(ren: SDLRenderer) /{
    SDL_DestroyRenderer(ren);
}/

pub native sdlDestroyTexture(tex: SDLTexture) /{
    SDL_DestroyTexture(tex);
}/

pub native sdlDestroyWindow(win: SDLWindow) /{
    SDL_DestroyWindow(win);
}/

native sdlGetError() -> str /{
    return SDL_GetError();
}/

pub native sdlQuit() /{
    SDL_Quit();
}/

pub fn sdlSetRenderDrawColor(ren: SDLRenderer, color: SDLColor) {
    sdlSetRenderDrawColor(ren, r(color), g(color), b(color), a(color));
}

pub native sdlSetRenderDrawColor(ren: SDLRenderer, r: int, g: int, b: int, a: int) /{
    SDL_SetRenderDrawColor(ren, r, g, b, a);
}/

pub native sdlRenderFillRect(ren: SDLRenderer, rect: SDLRect) /{
    struct SDL_Rect result;
    result.x = $castAddress($rect)->x;
    result.y = $castAddress($rect)->y;
    result.w = $castAddress($rect)->width;
    result.h = $castAddress($rect)->height;

    SDL_RenderFillRect(ren, &result);
}/

native rectToSDL(rect: SDLRect) -> NativeSDLRect /{
    struct SDL_Rect *result = malloc(sizeof(struct SDL_Rect));
    result->x = $castAddress($rect)->x;
    result->y = $castAddress($rect)->y;
    result->w = $castAddress($rect)->width;
    result->h = $castAddress($rect)->height;

    return result;
}/

/*
SDL C types:

typedef union{
  Uint8 type;
  SDL_ActiveEvent active;
  SDL_KeyboardEvent key;
  SDL_MouseMotionEvent motion;
  SDL_MouseButtonEvent button;
  SDL_JoyAxisEvent jaxis;
  SDL_JoyBallEvent jball;
  SDL_JoyHatEvent jhat;
  SDL_JoyButtonEvent jbutton;
  SDL_ResizeEvent resize;
  SDL_ExposeEvent expose;
  SDL_QuitEvent quit;
  SDL_UserEvent user;
  SDL_SysWMEvent syswm;
} SDL_Event;

typedef struct{
  Uint8 type;
  Uint8 state;
  SDL_keysym keysym;
} SDL_KeyboardEvent;

typedef struct{
  Uint8 scancode;
  SDLKey sym;
  SDLMod mod;
  Uint16 unicode;
} SDL_keysym;

*/
pub native keyEvent() -> Option<KeyEvent> /{
    SDL_Event event;
    if (SDL_PollEvent(&event)) {
        void * state = NULL;

        if (event.type == SDL_KEYDOWN) {
            $enumSimple(tmp_state, Down, KeyState)
            state = tmp_state;
        } else if (event.type == SDL_KEYUP) {
            $enumSimple(tmp_state, Up, KeyState)
            state = tmp_state;
        }

        if (state != NULL) {
            $addRef(state:KeyState)
            void * keyEvent =
            $call(KeyEvent, event.key.keysym.scancode, state: KeyState)
            ;
            $addRef(keyEvent:KeyEvent)
            void *result = 
            $call(Some, keyEvent: KeyEvent)
            ;
            $deref(keyEvent:KeyEvent)
            $deref(state:KeyState)
            return result;
        }
    }

    $enumSimple(result_,None)
    return result_;
}/

// LOOP

pub native sdlLoop<CTX,MODEL>(ctx: CTX, model: MODEL, update: fn(Option<KeyEvent>, MODEL) -> MODEL, render: fn(CTX, MODEL) -> ()) /{
    void *currentModel = model;
    while (1) {
        void *newModel =
            $call(sdlSingleLoop, $ctx:CTX, currentModel:MODEL, $update, $render)
        ;

        if (newModel != currentModel) {
            $addRef(newModel:MODEL)
            if (currentModel != model) {
                $deref(currentModel:MODEL)
            }
        }
        currentModel = newModel;
    }
}/

// Text

pub native sdlTTFInit() -> int /{
    $include(<SDL_ttf.h>)
    return TTF_Init();
}/

pub native sdlOpenFont(file: str, size: int) -> SDLFont /{
    return TTF_OpenFont(file, size);
}/

native sdlRenderTextSolid(font: SDLFont, message: str, r: int, g: int, b: int, a: int) -> SDLSurface /{
    SDL_Color color = {r, g, b};
    return TTF_RenderText_Solid(font, message, color);
}/

pub native sdlRenderTextSolid(font: SDLFont, message: str, c: SDLColor) -> SDLSurface /{
    SDL_Color color = {$castAddress($c)->r, $castAddress($c)->g, $castAddress($c)->b};

    return TTF_RenderText_Solid(font, message, color);
}/

pub native sdlRenderText(ren: SDLRenderer, message: SDLTexture, rect: SDLRect) /{
    $include(<stdlib.h>)
    SDL_Rect *sdlRect =
        $call(rectToSDL, $rect)
    ;

    SDL_RenderCopy(ren, $message, NULL, sdlRect);

    free(sdlRect);
}/