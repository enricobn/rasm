pub enum XDirection {
    Left,
    Right
}

pub fn flip(xDir: XDirection) -> XDirection {
    match(xDir, { Right();}, { Left(); } );
}

pub fn move<T>(x: T, xDir: XDirection, diff: T) -> T {
    match(xDir, { sub(x, diff);} , { add(x, diff);});
}

pub enum YDirection {
    Up,
    Down
}

pub fn flip(yDir: YDirection) -> YDirection {
    match(yDir, { Down();}, { Up(); } );
}

pub fn move<T>(y: T, yDir: YDirection, diff: T) -> T {
    match(yDir, { sub(y, diff);} , { add(y, diff);});
}