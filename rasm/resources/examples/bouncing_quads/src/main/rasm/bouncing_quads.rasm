/*
time tmp/bouncing_quads 20

Nasmi386 backend
real    0m0,668s

C backend
real    0m3,772s

*/

struct Model {
    quads: Vec<Quad>,
    fps: FPS,
    font: SDLFont,
    count:i32
}

struct Quad {
    x: i32,
    y: i32,
    xDir: XDirection,
    yDir: YDirection
}

const QUADS = 10000;
const WIDTH = 1024;
const HEIGHT = 768;
const QUADWIDTH = 10;
const BLACK = SDLColor(0, 0, 0, 255);
const WHITE = SDLColor(255, 255, 255, 255);
const RED = SDLColor(255, 0, 0, 255);
const GREEN = SDLColor(0, 255, 0, 255);
const BLUE = SDLColor(0, 0, 255, 255);
const YELLOW = SDLColor(255, 255, 0, 255);

initRandom();

sdlInit();
if(sdlTTFInit().eq(1), { panic("TTFInit error."); }, { });

let font = sdlErrorIfNull(sdlOpenFont(resource("DejaVuSerif.ttf"), 24), "cannot open font: %s\n");
let quads = vecRange(0, QUADS).map(fn(it) {
                    let x = random(WIDTH);
                    let y = random(HEIGHT);
                    let xDir = if(random(2).eq(0), Right(), Left());
                    let yDir = if(random(2).eq(0), YDirection::Up(), YDirection::Down());
                    Quad(x, y, xDir, yDir);
                });
let initialModel = Model(quads, FPS(0, now(), 0), font, argv(1).fmap(fn(it) {it.toi32;}).getOrElse(5000));

let win = sdlErrorIfNull(sdlCreateWindow("Bouncing quads", 100, 100, WIDTH, HEIGHT), "SDL_CreateWindow Error: %s\n");
let ren = sdlErrorIfNull(sdlCreateRenderer(win), "SDL_CreateRenderer Error: %s\n");

sdlLoop(ren, initialModel,
    fn(event, model) { update(event, model);},
    fn(sdlRen, model) { render(sdlRen, model);}
);

fn update(event: Option<KeyEvent>, model: Model) -> Model {
    let newModel = model.quads(model.quads.map(fn(quad) { quad.update;})).fps(model.fps.update).count(model.count.sub(1));
    if(newModel.count.less(0), {sdlQuit(); exitMain(0);}, {});
    newModel;
}

fn update(quad: Quad) -> Quad {
    let px = update(quad.x, quad.xDir);
    let py = update(quad.y, quad.yDir);
    Quad(px.first, py.first, px.second, py.second);
}

fn update(x: i32, xDir: XDirection) -> Pair<i32, XDirection> {
    let newX = x.move(xDir, 1);

    if (x.greater(WIDTH),
        Pair(WIDTH, xDir.flip),
        x.less(0),
        Pair(0, xDir.flip),
        Pair(newX, xDir));
}

fn update(y: i32, yDir: YDirection) -> Pair<i32, YDirection> {
    let newY = y.move(yDir, 1);

    if (y.greater(HEIGHT),
        Pair(HEIGHT, yDir.flip),
        y.less(0),
        Pair(0, yDir.flip),
        Pair(newY, yDir));
}

fn render(ren: SDLRenderer, model: Model) {
    sdlSetRenderDrawColor(ren, BLACK);
    sdlRenderClear(ren);

    sdlSetRenderDrawColor(ren, WHITE);

    model.quads.forEach(fn(quad) {
        sdlRenderFillRect(ren, SDLRect(quad.x, quad.y, QUADWIDTH, QUADWIDTH));
    });

    let fpsText = createSDLText(ren, model.font, add("FPS: ", toString(model.fps.fps)), GREEN);
    renderAndRelease(ren, fpsText, SDLRect(400, 2, 100, 24));

    sdlRenderPresent(ren);
}