pub struct FullCell {
    cell: Cell,
    adjacents: List<Cell>
}

pub fn readCellFile(file: str) -> List<Cell> {
    let content = readFile(file);
    // println(content);
    let linesEnumerate = listEnumerate(filterLines(lines(content)));

    let result = linesEnumerate.fmap(fn(line) { lineCells(line); });
    // println(result);
    result;
}

pub fn allCells(width: int, height: int) -> Vec<FullCell> {
    cartesianProduct(vecRange(0, height), vecRange(0, width), fn(y, x) {
        let cell = Cell(x, y);

        FullCell(cell, cell.adjacents);
    });
}

pub fn moveCells(cells: Iter<Cell>, d: int) -> Iter<Cell> {
    cells.map(fn(it) { Cell(it.x.add(d), it.y.add(d)); }).toVec.iter;
}

pub fn next(cells: Iter<Cell>, allCells: Iter<FullCell>) -> Iter<Cell> {
    let r = allCells.filter(fn(it) {
        let adjsAlive = it.adjacents.count(fn(a) { isAlive(cells, a); });
        if(isAlive(cells, cell(it)),
            adjsAlive.eq(2).or(adjsAlive.eq(3)),
            adjsAlive.eq(3)
        );
    }).map(fn(it) { it.cell; });
    let now = now();
    let v = r.toVec; 
    let et = elapsedTime(now(), now);
    println(et);
    v.iter;
}

pub fn adjacents(cell: Cell) -> List<Cell> {
    let x = cell.x;
    let y = cell.y;

    let left = add(x, -1);
    let right = add(x, 1);
    let up = add(y, -1);
    let down = add(y, 1);

    listOf(
        Cell(left, up),
        Cell(left, y),
        Cell(left, down),
        Cell(x, up),
        Cell(x, down),
        Cell(right, up),
        Cell(right, y),
        Cell(right, down)
    );
}

/** false = 0 true = any other value **/
pub fn isAlive(cells: Iter<Cell>, cell: Cell) -> bool {
    // println("isAlive ", cell);

    let x = cell.x;
    let y = cell.y;

    let result = cells.anyMatch(fn(it) {
        x.eq(it.x).and(y.eq(it.y));
    });

    // println("isAlive end ", result);

    result;
}