pub struct Cell {
    x: int,
    y: int
}

pub fn lineCells(line: EnumerateEntry<str>) -> List<Cell> {
    let y = index(line);
    let lineStr = value(line);

    map(filter(listEnumerate(chars(lineStr)), fn(cell) {
        let c = value(cell);

        c.eq('O');
    }), fn(cell) { Cell(index(cell), y); });
}

pub fn filterLines(lines: List<str>) -> List<str> {
    filter(lines, fn(line) {
        match(chars(line), fn(head, tail) { not(eq(head, '!')); }, { false;});
    });
}

// https://man7.org/linux/man-pages/man4/console_codes.4.html
pub fn moveUp(count: int) {
    printESC();
    print("[");
    print(count);
    print("A");
}

pub fn toString(cell : Cell) -> str {
    "Cell(".add(cell.x).add(",").add(cell.y).add(")");
}