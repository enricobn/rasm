struct Ball {
    x: f32,
    y: f32,
    xDir: XDirection,
    yDir: YDirection,
    lastUpdate: TimeVal
}

fn initialBall(now: TimeVal) -> Ball {
    Ball(500.0, 200.0, XDirection::Right(), YDirection::Down(), now);
}

fn update(ball: Ball, actualTime: TimeVal) -> Ball {
    let x = ball.x;
    let y = ball.y;
    let xDir = ball.xDir;
    let yDir = ball.yDir;

    let lastUpdate = ball.lastUpdate;
    let elapsed = elapsedTime(actualTime, lastUpdate);

    let diff = divf(elapsed, 3000);

    let newX = match(xDir, { -> sub(x, diff);} , { -> add(x, diff);});
    let newY = match(yDir, { -> sub(y, diff);} , { -> add(y, diff);});

    let newXDir = if(or(greater(newX, sub(WIDTH, BALLSIZE)), less(newX, 1)), { -> flip(xDir); }, { -> xDir;});
    let newYDir = if(or(greater(newY, sub(HEIGHT, BALLSIZE)), less(newY, HEADERHEIGHT)), { -> flip(yDir); }, { -> yDir;});

    Ball(newX, newY, newXDir, newYDir, actualTime);
}

fn collides(ball: Ball, brick: Brick) -> bool {
    let x = ball.x;
    let y = ball.y;

    let bx = brick.x;
    let by = brick.y;

    let xColl = x.add(BALLSIZE).greater(bx).and(x.less(bx.add(BRICKWIDTH)));
    let yColl = y.add(BALLSIZE).greater(by).and(y.less(by.add(BRICKHEIGHT)));

    xColl.and(yColl);
}

fn collides(ball: Ball, barPos: f32) -> bool {
    let x = ball.x;
    let y = ball.y;
    let bx = barPos;
    let by = HEIGHT.sub(BARHEIGHT);

    let xColl = x.add(BALLSIZE).greater(bx).and(x.less(bx.add(BARWIDTH)));
    let yColl = y.add(BALLSIZE).greater(by);

    xColl.and(yColl);
}

fn ballAfterCollision(ball: Ball, brick: Brick) -> Ball {
    let ballX = ball.x;
    let ballY = ball.y;
    let xDir = ball.xDir;
    let yDir = ball.yDir;
    let lastUpdate = ball.lastUpdate;

    let brickX = brick.x;
    let brickY = brick.y;

    let xDiff1 = ballX.sub(brickX);
    let xDiff2 = brickX.add(BRICKWIDTH).sub(ballX);
    let yDiff1 = ballY.sub(brickY);
    let yDiff2 = brickY.add(BRICKHEIGHT).sub(ballY);

    let xDiff = min(xDiff1, xDiff2);
    let yDiff = min(yDiff1, yDiff2);

    if(xDiff.less(yDiff), { -> ball.xDir(xDir.flip);}, { -> ball.yDir(yDir.flip);});
}