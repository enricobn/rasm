/*
parse ended in 11.347163ms
type check ended in 87.284773ms
code generation ended in 30.556844ms
assembler ended in 185.226611ms
linker ended in 34.471721ms
finished in 351.85742ms
*/

/*
added support for unit type and fixed problems in type check

parse ended in 16.922886ms
type check ended in 133.284106ms
code generation ended in 31.320571ms
assembler ended in 188.869175ms
linker ended in 34.723392ms
finished in 408.42347ms
*/

/*
refactoring, using Result for type check

parse ended in 11.007671ms
type check ended in 193.246476ms
code generation ended in 34.639543ms
assembler ended in 188.135923ms
linker ended in 36.746701ms
finished in 471.147908ms
*/

/*
new type check

parse ended in 12.46228ms
type check ended in 906.919916ms
code generation ended in 29.835678ms
assembler ended in 186.695598ms
linker ended in 37.27556ms
finished in 1.177244801s
*/

/*
new type check

type check ended in 221.89785ms
*/

/*
optimized recursive expression transformation

type check ended in 111.299023ms
*/

/*
removed clone of ASTType

type check ended in 105.080644ms
*/

/*
added special case for determining the type of a parameterless lambda

type check ended in 117.623057ms
*/

/*
    removed print of stack in Display for TypeCheckError

    type check ended in 88.168403ms
*/

/*
    optimized Regex using lazy_static

    type check ended in 66.804596ms
*/

/*
to sign a mark

parse ended in 18.702616ms
type check ended in 67.796837ms
code generation ended in 31.794425ms
assembler ended in 189.078683ms
linker ended in 30.760407ms
finished in 340.395027ms
*/

/*
a lot of changes...

parse ended in 24.344907ms
type check ended in 72.598315ms
code generation ended in 38.22388ms
assembler ended in 205.848908ms
linker ended in 34.690992ms
finished in 378.460432ms

*/

/*
may be because loadHighScores is more complex, because toi32 returns an Option (a change that has been done a couple of
commits ago, but only now I have updated this perf. backlog)

type check ended in 78.464592ms
code generation ended in 42.02035ms
assembler ended in 211.553475ms
linker ended in 37.652852ms
finished in 399.254542ms
*/

/*
Some changes, the last adding a "not matching type" error and in that case cloning the stack


type check ended in 87.39312

*/

/*
    some changes, the main is collecting new functions in a Vec during type check

    type check ended in 146.112022ms
*/

/*
    C backend

    type check ended in 114.15174ms
    code generation ended in 27.682163ms
    compiler ended in 741.361392ms
    finished in 902.150321ms
*/

/*
    optimized type check for a call using first argument

    type check ended in 78.275627ms
*/

pub enum GameResult {
    Play(state: GameState),
    End(score: i32)
}

pub struct Resources {
    font: SDLFont
}

pub struct HighScore {
    score: i32,
    time: TimeVal
}

struct State {
    resources: Resources,
    keys: Vec<i32>,
    stage: Stage,
    highScores: Vec<HighScore>
}

pub enum Stage {
    Menu(menuState: MenuState),
    Game(gameState: GameState)
}

const WIDTH = 1024;
const HEIGHT = 768;
const BRICKWIDTH = 34;
const BRICKHEIGHT = 10;
const BARWIDTH = 80;
const BARHEIGHT = 10;
const HEADERHEIGHT = 25;
const BALLSIZE = 5;
const BLACK = SDLColor(0, 0, 0, 255);
const WHITE = SDLColor(255, 255, 255, 255);
const RED = SDLColor(255, 0, 0, 255);
const GREEN = SDLColor(0, 255, 0, 255);
const BLUE = SDLColor(0, 0, 255, 255);
const YELLOW = SDLColor(255, 255, 0, 255);

sdlInit();
if(sdlTTFInit().eq(1), { panic("TTFInit error."); }, { });

let font = sdlOpenFont(resource("DejaVuSerif.ttf"), 24);

let highScores = loadHighScores();

let initialState = State(Resources(font), Vec(), Stage::Menu(MenuState(highScores)), highScores);

let win = sdlErrorIfNull(sdlCreateWindow("Breakout", 100, 100, WIDTH, HEIGHT), "SDL_CreateWindow Error: %s\n");
let ren = sdlErrorIfNull(sdlCreateRenderer(win), "SDL_CreateRenderer Error: %s\n");

sdlLoop(ren, initialState,
    fn(event, state) { update(event, state);},
    fn(sdlRen, state) { render(sdlRen, state);}
);

sdlDestroyRenderer(ren);
sdlDestroyWindow(win);

// TODO keys are not as expected space is 44 but should be 32!
fn update(event: Option<KeyEvent>, state: State) -> State {
    let resources = resources(state);
    let keys = keys(state);
    let stage = stage(state);
    let highScores = highScores(state);

    let newKeys = match(event, fn(e) {
          let key = key(e);
          let keyState = state(e);

          match(keyState, {
            vecOf(key);
          }, {
            filter(keys, fn(k) { not(eq(k, key));});
          });
      }, { keys; });

    match(stage, fn(menuState) {
        let newStage = update(resources, newKeys, menuState);
        State(resources, newKeys, newStage, highScores);
    }, fn(gameState) {
        let gameResult = update(resources, newKeys, gameState);
        match(gameResult, fn(newGameState) {
            State(resources, newKeys, Stage::Game(newGameState), highScores);
        }, fn(score) {
            let newHighScores = addScore(highScores, score);
            writeHighScores(newHighScores);
            State(resources, newKeys, Stage::Menu(MenuState(newHighScores)), newHighScores);
        });

    });
}

fn addScore(highScores: Vec<HighScore>, score: i32) -> Vec<HighScore> {
    push(highScores, HighScore(score, now()));
}

fn render(ren: SDLRenderer, state: State) {
    sdlSetRenderDrawColor(ren, BLACK);
    sdlRenderClear(ren);

    let resources = resources(state);
    let stage = stage(state);

    match(stage, fn(menuState) { render(ren, resources, menuState);}, fn(gameState) { render(ren, resources, gameState);});

    sdlRenderPresent(ren);
}

fn loadHighScores() -> Vec<HighScore> {
    if(fileExists("scores.txt"), {
        let scores = readFile("scores.txt");
        let lines = lines(scores);
        fmap(lines, fn(line) {
            let splitted = splitToList(line, ",");
            splitted.map3(fn(score, sec, nano) {
                toi32(score).fmap(fn(sc) {
                    toi32(sec).fmap(fn(s) {
                        toi32(nano).map(fn(n) {
                            HighScore(sc, TimeVal(s, n));
                        });
                    });
                });
            }).flatten.toList;
        }).toVec;
    }, { Vec();});
}

fn printHighScores(highScores: Vec<HighScore>) {
    forEach(highScores, fn(highScore) {
        print("high score ", highScore.score);
        print(", ");
        println(highScore.time);
    });
}

fn writeHighScores(highScores: Vec<HighScore>) {
    let file = createFile("scores.txt");

    forEach(highScores, fn(it) {
        print(file, it.score)
        .orElse({print(file, ",");})
        .orElse({print(file, it.time.sec);})
        .orElse({print(file, ",");})
        .orElse({println(file, it.time.nano);})
        .forEach(fn(error) {
            println(error);
            exitMain(1);
        });
    });

    close(file);
}

fn splitToList(s: str, separator: str) -> List<str> {
    let chars = listEnumerate(chars(s));

    let separatorIndex = chars.indexOf(separator);

    match(separatorIndex,
        fn(index) {
            let item = substr(s, 0, index);
            let remainder = substr(s, add(index, 1), sub(sub(len(s), index), 1));
            match(item,
                fn(f) {
                    match(remainder,
                        fn(r) { listAppend(listOf(f), splitToList(r, separator));},
                        { listOf(f);}
                    );
                },
                { List::Empty();}
            );
        },
        { listOf(s);}
    );
}

fn indexOf<T>(list: List<EnumerateEntry<T>>, what: T) -> Option<i32> {
    list
        .filter(fn(entry) { entry.value.eq(what); })
        .first
        .map(fn(entry) { entry.index;});
}