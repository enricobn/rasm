pub struct GameState {
    stage: GameStage,
    world: World,
    fps: FPS
}

pub struct World {
    bricks: Vec<Brick>,
    ball: Ball,
    bar: Bar,
    score: i32,
    lives: i32
}

enum GameStage {
    RunBall,
    Run
}

pub fn initialGameState() -> GameState {
    GameState(GameStage::Run(), initialWorld(), FPS(0, now(), 0));
}

fn initialWorld() -> World {
    let bricks = cartesianProduct(vecRange(0, 30), vecRange(0, 10), fn(x, y) { Brick(mul(x, BRICKWIDTH), add(HEADERHEIGHT, mul(y, BRICKHEIGHT)) , RED); });

    let now = now();

    World(bricks, initialBall(now), Bar(500.0, 0, now), 0, 3);
}

pub fn update(resources: Resources, keys: Vec<i32>, gameState: GameState) -> GameResult {
    let stage = stage(gameState);
    let fps = gameState.fps.update();

    let newGameState = match(stage, { gameState.fps(fps);}, {
        let newWorld = update(resources, keys, gameState.world);

        // range(0, 100); // wait...
        GameState(stage, newWorld, fps);
    });

    let newWorld = world(newGameState);
    let lives = lives(newWorld);
    let score = score(newWorld);

    if(eq(lives, 0), { GameResult::End(score);}, { GameResult::Play(newGameState);});
}

fn update(resources: Resources, keys: Vec<i32>, world: World) -> World {
    // println(time());
    // sleep(0, 1500);
    let actualTime = now();
    let lives = world.lives;
    let ball = world.ball;
    let bricks = world.bricks;

    let newBar = update(world.bar, actualTime, keys);
    let newBall = update(ball, actualTime);
    let collision = collision(bricks, newBall);
    let newScore = match(collision, fn(b) { add(world.score, 10);}, { world.score;});
    let newBricks = match(collision, fn(b1) { filter(bricks, fn(b2) { not(eq(b1, b2)); }); }, { bricks; });

    if(collides(newBall, newBar.x), {
        let newBall2 = update(Ball(ball.x, ball.y, ball.xDir, flip(ball.yDir), actualTime), actualTime);
        World(newBricks, newBall2, newBar, newScore, lives);
    }, {
        match(collision, fn(brick) {
            let newBall2 = ballAfterCollision(ball, brick);
             World(newBricks, newBall2, newBar, newScore, lives);
        },
        {
            if(greater(ball.y, sub(HEIGHT, BALLSIZE)), {
                World(newBricks, initialBall(actualTime), newBar, newScore, sub(lives, 1));
            }, {
                World(newBricks, newBall, newBar, newScore, lives);
            });
        });
    });
}

fn collision(bricks: Vec<Brick>, ball: Ball) -> Option<Brick> {
    first(filter(bricks, fn(brick) { collides(ball, brick); }));
}

pub fn render(ren: SDLRenderer, resources: Resources, gameState : GameState) {
    match(gameState.stage, { }, {
        render(ren, resources, gameState.world, gameState.fps.fps);
    });
}

fn render(ren: SDLRenderer, resources: Resources, world: World, fps: i32) {
    let font = resources.font;

    forEach(world.bricks, fn(brick) {
        sdlSetRenderDrawColor(ren, brick.color);
        sdlRenderFillRect(ren, SDLRect(add(brick.x, 1), add(brick.y, 1), sub(BRICKWIDTH, 2), sub(BRICKHEIGHT, 2)));
    });

    sdlSetRenderDrawColor(ren, WHITE);

    sdlRenderFillRect(ren, SDLRect(toi32(world.bar.x, 0), sub(HEIGHT, BARHEIGHT), BARWIDTH, BARHEIGHT));

    sdlRenderFillRect(ren, SDLRect(toi32(world.ball.x, 0), toi32(world.ball.y, 0), BALLSIZE, BALLSIZE));

    sdlSetRenderDrawColor(ren, BLUE);
    sdlRenderFillRect(ren, SDLRect(0, 0, WIDTH, HEADERHEIGHT));

    let scoreText = createSDLText(ren, font, add("Score: ", toString(world.score)), GREEN);
    renderAndRelease(ren, scoreText, SDLRect(2, 2, 100, 24));

    let livesText = createSDLText(ren, font, add("Lives: ", toString(world.lives)), GREEN);
    renderAndRelease(ren, livesText, SDLRect(200, 2, 100, 24));

    let fpsText = createSDLText(ren, font, add("FPS: ", toString(fps)), GREEN);
    renderAndRelease(ren, fpsText, SDLRect(400, 2, 100, 24));
}