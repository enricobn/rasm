/*
parse ended in 11.347163ms
type check ended in 87.284773ms
code generation ended in 30.556844ms
assembler ended in 185.226611ms
linker ended in 34.471721ms
finished in 351.85742ms
*/

/*
added support for unit type and fixed problems in type check

parse ended in 16.922886ms
type check ended in 133.284106ms
code generation ended in 31.320571ms
assembler ended in 188.869175ms
linker ended in 34.723392ms
finished in 408.42347ms
*/

/*
refactoring, using Result for type check

parse ended in 11.007671ms
type check ended in 193.246476ms
code generation ended in 34.639543ms
assembler ended in 188.135923ms
linker ended in 36.746701ms
finished in 471.147908ms
*/

/*
new type check

parse ended in 12.46228ms
type check ended in 906.919916ms
code generation ended in 29.835678ms
assembler ended in 186.695598ms
linker ended in 37.27556ms
finished in 1.177244801s
*/

/*
new type check

type check ended in 221.89785ms
*/

/*
optimized recursive expression transformation

type check ended in 111.299023ms
*/

/*
removed clone of ASTType

type check ended in 105.080644ms
*/

enum GameResult {
    Play(state: GameState),
    End(score: i32)
}

struct Resources {
    font: SDLFont
}

struct HighScore {
    score: i32,
    time: TimeVal
}

struct State {
    resources: Resources,
    keys: Vec<i32>,
    stage: Stage,
    highScores: Vec<HighScore>
}

enum Stage {
    Menu(menuState: MenuState),
    Game(gameState: GameState)
}

const WIDTH = 1024;
const HEIGHT = 768;
const BRICKWIDTH = 34;
const BRICKHEIGHT = 10;
const BARWIDTH = 80;
const BARHEIGHT = 10;
const HEADERHEIGHT = 25;
const BALLSIZE = 5;
const BLACK = SDLColor(0, 0, 0, 255);
const WHITE = SDLColor(255, 255, 255, 255);
const RED = SDLColor(255, 0, 0, 255);
const GREEN = SDLColor(0, 255, 0, 255);
const BLUE = SDLColor(0, 0, 255, 255);
const YELLOW = SDLColor(255, 255, 0, 255);

sdlInit();
if(sdlTTFInit().eq(1), { -> panic("TTFInit error."); }, { -> });

let font = sdlOpenFont(add(RASMRESOURCEFOLDER, "/DejaVuSerif.ttf"), 24);

let highScores = loadHighScores();

let initialState = State(Resources(font), Vec(), Stage::Menu(MenuState(highScores)), highScores);

let win = sdlErrorIfNull(sdlCreateWindow("Breakout", 100, 100, WIDTH, HEIGHT), "SDL_CreateWindow Error: %s\n");
let ren = sdlErrorIfNull(sdlCreateRenderer(win), "SDL_CreateRenderer Error: %s\n");

sdlLoop(ren, initialState,
    { event, state -> update(event, state);},
    { sdlRen, state -> render(sdlRen, state);}
);

sdlDestroyRenderer(ren);
sdlDestroyWindow(win);

// TODO keys are not as expected space is 44 but should be 32!
fn update(event: Option<KeyEvent>, state: State) -> State {
    let resources = resources(state);
    let keys = keys(state);
    let stage = stage(state);
    let highScores = highScores(state);

    let newKeys = match(event, { e ->
          let key = key(e);
          let keyState = state(e);

          match(keyState, { ->
            vecOf(key);
          }, { ->
            filter(keys, { k -> not(eq(k, key));});
          });
      }, { -> keys; });

    match(stage, { menuState ->
        let newStage = update(resources, newKeys, menuState);
        State(resources, newKeys, newStage, highScores);
    }, { gameState ->
        let gameResult = update(resources, newKeys, gameState);
        match(gameResult, { newGameState ->
            State(resources, newKeys, Stage::Game(newGameState), highScores);
        }, { score ->
            let newHighScores = addScore(highScores, score);
            writeHighScores(newHighScores);
            State(resources, newKeys, Stage::Menu(MenuState(newHighScores)), newHighScores);
        });

    });
}

fn addScore(highScores: Vec<HighScore>, score: i32) -> Vec<HighScore> {
    push(highScores, HighScore(score, now()));
}

fn render(ren: SDLRenderer, state: State) {
    sdlSetRenderDrawColor(ren, BLACK);
    sdlRenderClear(ren);

    let resources = resources(state);
    let stage = stage(state);

    match(stage, { menuState -> render(ren, resources, menuState);}, { gameState -> render(ren, resources, gameState);});

    sdlRenderPresent(ren);
}

fn loadHighScores() -> Vec<HighScore> {
    if(fileExists("scores.txt"), { ->
        let scores = readFile("scores.txt");
        let lines = lines(scores);
        listToVec(fmap(lines, { line ->
            let splitted = splitToList(line, ",");
            let result = map3(splitted, { score, sec, nano -> HighScore(atoi(score), TimeVal(atoi(sec), atoi(nano)));});
            toList(result);
        }));
    }, { -> Vec();});
}

fn printHighScores(highScores: Vec<HighScore>) {
    forEach(highScores, { highScore ->
        print("high score ", highScore.score);
        print(", ");
        println(highScore.time);
    });
}

fn writeHighScores(highScores: Vec<HighScore>) {
    let file = createFile("scores.txt");

    forEach(highScores, { it ->
        print(file, it.score)
        .or(print(file, ","))
        .or(print(file, it.time.sec))
        .or(print(file, ","))
        .or(println(file, it.time.nano))
        .run({ error ->
            println(error);
            exitMain(1);
        });
    });

    sysClose(file);
}

fn print(file: File, highScore: HighScore) -> Option<IOError> {
    print(file, highScore.score)
    .or(print(file, ", "))
    .or(println(file, highScore.time));
}

fn splitToList(s: str, separator: str) -> List<str> {
    let chars = listEnumerate(chars(s));

    let separatorIndex = chars.indexOf(separator);

    match(separatorIndex,
        { index ->
            let item = substr(s, 0, index);
            let remainder = substr(s, add(index, 1), sub(sub(slen(s), index), 1));
            match(item,
                { f ->
                    match(remainder,
                        { r -> listAppend(listOf(f), splitToList(r, separator));},
                        { -> listOf(f);}
                    );
                },
                { -> List::Empty();}
            );
        },
        { -> listOf(s);}
    );
}

fn indexOf<T>(list: List<EnumerateEntry<T>>, what: T) -> Option<i32> {
    list
        .filter({ entry -> entry.value.eq(what); })
        .first
        .map({ entry -> entry.index;});
}