struct MenuState {
    highScores: Vec<HighScore>
}

fn update(resources: Resources, keys: Vec<i32>, menuState: MenuState) -> Stage {
    if(eq(length(keys), 0), { ->
        Stage::Menu(menuState);
    }, { ->
        Stage::Game(initialGameState());
    });
}

fn render(ren: SDLRenderer, resources: Resources, menuState : MenuState) {
    let font = Resources::font(resources);

    let title = createSDLText(ren, font, "Rasm BREAKOUT", GREEN);
    render(ren, title, SDLRect(380, 200, 200, 24));
    release(title);

    let highScores = take(sort(MenuState::highScores(menuState), { h1, h2 ->
        let s1 = HighScore::score(h1);
        let s2 = HighScore::score(h2);
        cmp(s2, s1);
    }), 10);

    let last = first(sort(MenuState::highScores(menuState), { h1, h2 ->
         let t1 = HighScore::time(h1);
         let t2 = HighScore::time(h2);
         cmp(t2, t1);
     }));

    forEach(enumerate(highScores), { enumerateEntry ->
        let index = EnumerateEntry::index(enumerateEntry);
        let highScore = EnumerateEntry::value(enumerateEntry);
        let score = HighScore::score(highScore);
        let time = HighScore::time(highScore);

        let color = Option::match(last, { h ->
            let lastTime = HighScore::time(h);
            ifImmediate(eq(lastTime, time), YELLOW, BLUE);
        }, { -> BLUE;});

        let sScore = padLeft(toString(score), 10);
        let scoreText = createSDLText(ren, font, sScore, color);
        let y = add(300, mul(index, 30));
        render(ren, scoreText, SDLRect(380, y, mul(slen(sScore), 24), 24));
        release(scoreText);
    });

    let footer = createSDLText(ren, font, "Press any key to start", RED);
    render(ren, footer, SDLRect(380, 700, 200, 24));
    release(footer);
}