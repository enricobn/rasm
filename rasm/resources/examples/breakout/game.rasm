include "fps.rasm"

struct GameState {
    stage: GameStage,
    world: World,
    fps: FPS
}

struct World {
    bricks: Vec<Brick>,
    ball: Ball,
    bar: Bar,
    score: i32,
    lives: i32
}

enum GameStage {
    RunBall,
    Run
}

fn initialGameState() -> GameState {
    GameState(GameStage::Run(), initialWorld(), FPS(0, now(), 0));
}

fn initialWorld() -> World {
    let bricks = cartesianProduct(vecRange(0, 30), vecRange(0, 10), {x, y -> Brick(mul(x, BRICKWIDTH), add(HEADERHEIGHT, mul(y, BRICKHEIGHT)) , RED); });

    let now = now();

    World(bricks, initialBall(now), Bar(500.0, 0, now), 0, 3);
}

fn update(resources: Resources, keys: Vec<i32>, gameState: GameState) -> GameResult {
    let stage = stage(gameState);
    let world = world(gameState);
    let fps = gameState.fps.update();

    let newGameState = match(stage, { -> gameState.fps(fps);}, { ->
        let newWorld = update(resources, keys, world);

        // range(0, 100); // wait...
        GameState(stage, newWorld, fps);
    });

    let newWorld = world(newGameState);
    let lives = lives(newWorld);
    let score = score(newWorld);

    if(eq(lives, 0) { -> GameResult::End(score);} { -> GameResult::Play(newGameState);});
}

fn update(resources: Resources, keys: Vec<i32>, world: World) -> World {
    // println(time());
    // sleep(0, 1500);
    let actualTime = now();
    let score = score(world);
    let lives = lives(world);

    let newBar = update(bar(world), actualTime, keys);

    let bricks = bricks(world);
    let ball = ball(world);
    let newBall = update(ball, actualTime);

    let collision = collision(bricks, newBall);

    let newScore = match(collision, { b -> add(score, 10);}, { -> score;});

    let newBricks = match(collision, { b1 -> filter(bricks, { b2 -> not(eq(b1, b2)); }); }, { -> bricks; });
    let barPos = x(newBar);

    if(collides(newBall, barPos), { ->
        let x = x(ball);
        let y = y(ball);
        let xDir = xDir(ball);
        let yDir = yDir(ball);

        let newBall2 = update(Ball(x, y, xDir, flip(yDir), actualTime), actualTime);
        World(newBricks, newBall2, newBar, newScore, lives);
    }, { ->
        let y = y(ball);

        match(collision, { brick ->
            let newBall2 = ballAfterCollision(ball, brick);
             World(newBricks, newBall2, newBar, newScore, lives);
        },
        { ->
            if(greater(y, sub(HEIGHT, BALLSIZE)), { ->
                World(newBricks, initialBall(actualTime), newBar, newScore, sub(lives, 1));
            }, { ->
                World(newBricks, newBall, newBar, newScore, lives);
            });
        });
    });
}

fn collision(bricks: Vec<Brick>, ball: Ball) -> Option<Brick> {
    first(filter(bricks, { brick -> collides(ball, brick); }));
}

fn render(ren: SDLRenderer, resources: Resources, gameState : GameState) {
    let stage = stage(gameState);
    let world = world(gameState);

    run(stage, { -> }, { ->
        render(ren, resources, world, gameState.fps.fps);
    });
}

fn render(ren: SDLRenderer, resources: Resources, world: World, fps: i32) {
    let font = font(resources);
    let bricks = bricks(world);
    let score = score(world);
    let lives = lives(world);

    forEach(bricks, { brick ->
        let x = x(brick);
        let y = y(brick);
        let color = color(brick);

        sdlSetRenderDrawColor(ren, color);

        sdlRenderFillRect(ren, SDLRect(add(x, 1), add(y, 1), sub(BRICKWIDTH, 2), sub(BRICKHEIGHT, 2)));
    });

    sdlSetRenderDrawColor(ren, WHITE);
    let bar = bar(world);
    let barPos = x(bar);

    sdlRenderFillRect(ren, SDLRect(toi32(barPos, 0), sub(HEIGHT, BARHEIGHT), BARWIDTH, BARHEIGHT));

    let ball = ball(world);
    let x = x(ball);
    let y = y(ball);

    sdlRenderFillRect(ren, SDLRect(toi32(x, 0), toi32(y, 0), BALLSIZE, BALLSIZE));

    sdlSetRenderDrawColor(ren, BLUE);
    sdlRenderFillRect(ren, SDLRect(0, 0, WIDTH, HEADERHEIGHT));

    let scoreText = createSDLText(ren, font, add("Score: ", toString(score)), GREEN);
    render(ren, scoreText, SDLRect(2, 2, 100, 24));
    release(scoreText);

    let livesText = createSDLText(ren, font, add("Lives: ", toString(lives)), GREEN);
    render(ren, livesText, SDLRect(200, 2, 100, 24));
    release(livesText);

    let fpsText = createSDLText(ren, font, add("FPS: ", toString(fps)), GREEN);
    render(ren, fpsText, SDLRect(400, 2, 100, 24));
    release(fpsText);
}

fn toi32(f: f32, default: i32) -> i32 {
    getOrElse(toi32(f), default);
}