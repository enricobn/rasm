pub struct Cell {
    x: int,
    y: int
}

argv(1).match(fn(file) {
    let start = readCellFile(file);

    argv(2)
    .fmap(fn(s) { s.toInt;})
    .match(
        fn(count) {
            run(moveCells(start, 20), 80, 50, count);
        }, 
        { println("A number for count must be specified."); }
    );
}, { println("A file must be specified."); });

fn run<M>(start: M<Cell>, width: int, height: int, count: int) {
    let allCells = allCells(width, height);

    printCells(
        foldLeft(vecRange(0, count), start, fn(prev, act) {
            printCells(prev, width, height);
            moveUp(height);
            //sleep(0, 250000000);
            next(prev, allCells);
          }), width, height);
}

pub fn lineCells(line: EnumerateEntry<str>) -> List<Cell> {
    let y = index(line);
    let lineStr = value(line);

    map(filter(listEnumerate(chars(lineStr)), fn(cell) {
        let c = value(cell);

        c.eq('O');
    }), fn(cell) { Cell(index(cell), y); });
}

pub fn filterLines(lines: List<str>) -> List<str> {
    filter(lines, fn(line) {
        match(chars(line), fn(head, tail) { not(eq(head, '!')); }, { false;});
    });
}

fn moveCells<M>(cells: M<Cell>, d: int) -> M<Cell> {
    map(cells, fn(it) { Cell(add(it.x, d), add(it.y, d)); });
}

fn next<M>(cells: M<Cell>, allCells: M<FullCell) -> M<Cell> {
    allCells
    .filter(fn(it) {
        let adjsAlive = count(adjacents(it), fn(a) { isAlive(cells, a); });
        if(isAlive(cells, it.cell),
            or(eq(adjsAlive, 2),eq(adjsAlive,3)),
            eq(adjsAlive, 3)
        );
    })
    .map(fn(it) { it.cell;});
}

fn isAlive<M>(cells: M<Cell>, cell: Cell) -> bool {
    let x = x(cell);
    let y = y(cell);

    cells.anyMatch(fn(it) {
        x.eq(it.x).and(y.eq(it.y));
    });
}

fn printCellsPlain<M>(cells: M<Cell>) {
    cells.forEach(fn(cell) {
        print(x(cell));
        print(",");
        print(y(cell));
        print(" ");
    });

    println();
}

fn printAllCellsPlain<M>(cells: M<FullCell>) {
    cells.forEach(fn(fullCell) {
        let cell = cell(fullCell);
        print(x(cell));
        print(",");
        print(y(cell));
        print(" ");
    });

    println();
}

fn printCells<M>(cells: M<Cell>, width: int, height: int) {
    vecRange(0, height).forEach(fn(y) {
        vecRange(0, width).forEach(fn(x) {
            let alive = isAlive(cells, Cell(x, y));
            if(alive, { print("*"); }, { print(" "); });
        });
        println("");
    });
}

// https://man7.org/linux/man-pages/man4/console_codes.4.html
fn moveUp(count: int) {
    printESC();
    print("[");
    print(count);
    print("A");
}