// run with: time ./gameoflife resources/examples/f116.cells 100
//
// 481228 bytes allocated
// 138093 table slots allocated
//
// real    0m24,496s
//
// with lambda space ref / deref
// run with: time ./gameoflife resources/examples/f116.cells 1
//
// 481240 bytes allocated
// 136486 table slots allocated
//
// real    0m16,599s
//
// optimized lambda space ref /deref
// run with: time ./gameoflife resources/examples/f116.cells 100
// 481240 bytes allocated
// 138332 table slots allocated
//
// real    0m28,633s
//
// optimized lambda space allocation (in stack)
// 481240 bytes allocated
// 125766 table slots allocated
//
// real    0m12,196s

// more on optimized lambda space allocation (in stack)
// real    0m11,322s

include "gameoflife_common.rasm"
include "gameoflife_common_list.rasm"

let file = argv(1);
let start = readCellFile(file);
let count = atoi(argv(2));

run(moveCells(start, 20), 80, 50, count);

fn run(start: List<Cell>, width: i32, height: i32, count: i32) {
    let allCells = allCells(width, height);

    printCells(
        foldLeft(range(0, count), start, { prev, act ->
            printCells(prev, width, height);
            moveUp(height);
            //sleep(0, 250000000);
            next(prev, allCells);
          }), width, height);
}

fn printCells(cells: List<Cell>, width: i32, height: i32) {
    let xRange = range(0, width);

    forEach(range(0, height), { y ->
        forEach(xRange, { x ->
            if(isAlive(cells, Cell(x, y)), { -> print("*"); }, { -> print(" "); });
        });
        println("");
    });
}