let module = printlnMacro("a print", ASTExpression::Value(ASTValueType::String("Hello, World!")));

pub fn printlnMacro(s: str, e: ASTExpression) -> ASTModule {
    ASTModule(
        vecOf(
            simpleCall("println", Vec())
        ), Vec(), Vec(), Vec(), Vec()
    );
}

fn simpleCall(f: str, parameters: Vec<ASTExpression>) -> ASTStatement {
    ASTStatement::Expression(ASTFunctionCallExpression(ASTFunctionCall(f, parameters, Vec(), None())));
}