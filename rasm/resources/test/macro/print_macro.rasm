printlnMacro!("a print", "Hello".append(", World!"));

pub fn printlnMacro(s: str, e: ASTExpression) -> MacroResult {
    MacroModule(ASTModule(
        vecOf(
            simpleCall("println", vecOf(ASTExpression::Value(ASTValueType::ASTString(s)), e))
        ), Vec(), Vec(), Vec(), Vec()
    ));
}

fn simpleCall(f: str, parameters: Vec<ASTExpression>) -> ASTStatement {
    ASTStatement::Expression(ASTFunctionCallExpression(ASTFunctionCall(f, parameters, Vec(), None())));
}