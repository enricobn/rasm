let v = vecRange(0, 2);
println(v);

let m = map(v, { n -> add(n, 10);});
println(m);

ifRun(anyMatch(v, { n -> eq(n, 0);}), { -> println("true");}, { -> println("false");});
ifRun(anyMatch(v, { n -> eq(n, 2);}), { -> println("true");}, { -> println("false");});

ifRun(anyMatch(vecRange(0, 2), { n -> eq(n, 0);}), { -> println("true");}, { -> println("false");});
ifRun(anyMatch(vecRange(0, 2), { n -> eq(n, 2);}), { -> println("true");}, { -> println("false");});

println(count(vecRange(0, 10), { n -> eq(n, 5);}));
println(count(vecRange(0, 10), { n -> lessOrEqual(n, 5);}));
println(count(vecRange(0, 10), { n -> lessOrEqual(n, 1);}));

println(filter(vecRange(0, 10), { n -> lessOrEqual(n, 5);}));
println(filter(vecRange(0, 10), { n -> eq(n, 5);}));

println(vecOf(10, 15, 21, 2, 2, 1, 4, 5));

println(length(vecRange(0, 10)));

let vecOfVecs = vecOf(vecOf(1), vecOf(2, 3));
println(flatten(vecOfVecs));

println(fmap(vecOf(1, 2), { n -> vecOf(n, add(n, 10));}));

println(listToVec(listOf(0, 1, 2)));

println(foldLeft(vecRange(0, 5), 0, { prev, act -> add(prev, act);}));

println(first(Vec()));

let vecOfOpt = vecOf(Option::Some("Hello"));

println(first(vecOfOpt));

println(push(vecOf(1), 2));