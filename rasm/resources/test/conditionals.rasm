if(false, fn() { println("True");}, fn() { println("False");});

if(true, fn() { println("True");},fn() { println("False");});

if(eq(0,0), fn() { println("equal");}, fn() { println("not equal");});

if(eq(0,1), fn() { println("equal");}, fn() { println("not equal");});

if(less(1,2), fn() { println("less");}, fn() { println("not less");});

if(less(0,0), fn() { println("less");}, fn() { println("not less");});

if(greater(1,0), fn() { println("greater");}, fn() { println("not greater");});

if(greater(0,1), fn() { println("greater");}, fn() { println("not greater");});

if(lessOrEqual(0,1), fn() { println("less or equal");}, fn() { println("not less or equal");});

if(lessOrEqual(1,1), fn() { println("less or equal");}, fn() { println("not less or equal");});

if(lessOrEqual(2,1), fn() { println("less or equal");}, fn() { println("not less or equal");});

println(if(false, 100, 200));
println(if(true, 100, 200));

// TODO I don't like it because, if an assertion fails I don't know which have failed and the program exits
Assertions()
.assertFalse(or(false, false))
.assertTrue(or(true, false))
.assertTrue(or(false, true))
.assertTrue(or(true, true))

.assertFalse(and(false, false))
.assertFalse(and(true, false))
.assertFalse(and(false, true))
.assertTrue(and(true, true))
.assertTrue(not(false))
.assertFalse(not(true))

.assertTrue("<", ifChar('<').eq('<'))
.assertTrue("=", ifChar('=').eq('='))
.assertTrue(">", ifChar('>').eq('>'))
.assertTrue("a", ifChar('a').eq('?'))

.assertTrue("<", ifChar2('<').eq('<'))
.assertTrue("=", ifChar2('=').eq('='))
.assertTrue(">", ifChar2('>').eq('>'))
.assertTrue("/", ifChar2('/').eq('/'))
.assertTrue("a", ifChar2('a').eq('?'))

.validate();

fn ifChar(c: char) -> char {
    if( c.eq('<'),
        fn() { '<'; },
        c.eq('='),
        fn() { '='; },
        c.eq('>'),
        fn() { '>'; },
        fn() { '?'; }
    );
}

fn ifChar2(c: char) -> char {
    if( c.eq('<'),
        fn() { '<'; },
        c.eq('='),
        fn() { '='; },
        c.eq('>'),
        fn() { '>'; },
        c.eq('/'),
        fn() { '/'; },
        fn() { '?'; }
    );
}