// time ./fibonacci 40
// 102334155

//real    0m4,345s

// with lambda space ref / deref
// real    0m6,390s

// optimized lambda space ref /deref
// 56 bytes allocated
// 110 table slots allocated

// real    0m4,716s

// optimized lambda space allocation (in stack)
//
// real    0m2,526s
//
// more on optimized lambda space allocation (in stack)
//
// real    0m1,966s
//
// ?
// real    0m1,894s

// C backend
// real    0m2,499s
// 
// added free
//
// real    0m2,642s
// -r real    0m0,898s
//
// some changes...
// real    0m3,388s
//
argv(1).fmap(fn(s) {s.toi32;}).match(fn(n) {
    println(fib(n));
}, { println("Expected a numeric parameter");});


fn fib(n: int) -> int {
    if(lessOrEqual(n, 1), n, {
        fib(n.sub(1)).add(fib(n.sub(2)));
    });
}

/*
native ff(n: int) -> int /{
    push    ebx

    mov     eax, $n
    cmp     eax, 1
    jbe     .end

    sub     eax, 1
    $call(ff, eax)
    mov     ebx, eax

    mov     eax, $n
    sub     eax, 2
    $call(ff, eax)
    add     eax, ebx
.end:
    pop     ebx
}/
*/