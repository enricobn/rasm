Assertions()
.assertTrue("greater".eq(compareInt(1, 0)))
.assertTrue("less".eq(compareInt(0, 1)))
.assertTrue("equal".eq(compareInt(0, 0)))
.assertTrue("greater".eq(compareInt1(1, 0)))
.assertTrue("less".eq(compareInt1(0, 1)))
.assertTrue("equal".eq(compareInt1(0, 0)))
.validate();

//println(vecRange(0, 100000).map({ it -> compareInt1(0, it); }).count({ it -> it.eq("equal");}));

fn compareInt(v1: i32, v2: i32) -> str {
    if(v1.greater(v2), "greater")
    .elseIf(v1.less(v2), "less")
    .else("equal");
}

fn compareInt1(v1: i32, v2: i32) -> str {
    if(v1.greater(v2), { -> "greater"; })
    .elseIf(v1.less(v2), { -> "less"; })
    .else({ -> "equal";})
    .call();
}

/*
fn compareInt2(v1: i32, v2: i32) -> str {
    if(v1.greater(v2), { -> "greater"; },
    v1.less(v2), { -> "less"; }, { -> "equal";});
}
*/