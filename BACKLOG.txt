Doing
------
- move all asm code to backend

Major
-----
- change the lambda syntax to be like rust ( |p1,p2| { } ) or fn(p1,p2) -> {}
- rename const to "let global" or "global let" or "let static" or "static let"
- separate core library (shipped with the compiler) from stdlib (an external library that must be used as a dependency)
- List library
- SDL library
- install library
  - in ~/.rasm/repository/library-name/library-version
- library from http (https)
- Unit type: ()
- cannot ignore a return value from a function:
    // This is an invalid code
    add(10, 10);
    ...

    // This is a valid code
    println(10);
    ...
    - check for unused parameters, let and static let
- cannot use .someFunction without parenthesis if the function does not return anything
- visibility
  - private
  - readonly
    - structs
        - cannot call constructor
        - cannot call setters
  - opaque
    - structs
      - cannot call constructor
      - cannot call setters
      - cannot call getters
- optimize
  - can a recursive function's lambda space be reused?
- native
  - rename asm to native
  - let specify attributes for native like native(nasmi386, linux)
- threads
- create and use Result in standard library
- standardize compiler errors with source

MINOR
- Vec
  - vecFilter and vecFoldL dereference
  - vecFilter shrink (add a shrink function that shrinks allocated memory)
- allocator
  - check for size >= allocated and use shrink
  - try to pack consecutive free "slots"
- TextMacro:
    - is it possible to use TextMacro in standard functions? (but for what?)
    - is it possible to inline the functions called with TextMacro?
- game of life: if we don't pass a number, it should run until no cells are alive
- type check
  - use Result
- delete asm, object and executable file before compile
- error if there's a function named the same way as a lambda parameter (or give precedence to parameter?)
- test inner lambda that get a value from a parent lambda parameter
- optimize memory for lambda space:
  - if there are more lambda in a call, all share the same lambda space (but not the address to the function), now it's duplicated:
    - I can create only one lambda space, then I can pass the address to the real function and the address to the lambda space, to the lambda,
      or a single pointer to a "structure" where the first word is the pointer to the function and the second the pointer to the lambda space
- refactor codegen lambda parameters: it's too complex
- I would like to have some namespace for functions, to be xx.yy.zz::function_name
- I can close an already closed TokensGroup (make a test)
- add command line arguments to the compiler:
  - to print the syntax tree
  - to print memory allocation
  - to debug asm
  - to run the program
- rename lambda to closure
- more on error source in codegen
