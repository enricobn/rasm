Doing
------
- function reference
  - fix ASTTypeChecker

Major
-----
- populate target for ASTFunctionDef, for regular functions (not builtin), with the name of the type of the first parameter, 
  even if generic when not completely generic (Option<T>)? Adjust code completion
- try:
  string and number literals should be specific types (strLit, intLit, decLit) that have a string representation,
  and let i64,i32,f64,f32 etc. be native types
- inline for fn (inline fn)
- const:
  - by default, as for all, const must be private, so they can be defined in multiple modules
  - rename const? 
  - are not reliable: if a const is defined with a function call, that uses a const that is defined after, 
    then it will compile, but it will crash at runtime!!! Add a verify
- "Universal Polymorphism" can create an infinite recursion, for example:
  we declare a function like
    add<T>(o1: str, o2: T) -> str {
        add(o1, toString(o2));
    }

  and a function like

    toString(s: str) -> str {
        s;
    }

  and we don't declare a non-generic function for add(s1: str, s2: str), calling add with two strings leads to an infinite recursion!!!
- types should be declared as "native type" and should be defined with /{ }/ : it will be a compiler responsibility to interpret the content,
  as in native functions
- sometimes are added structs / enum / functions that are not used. It can be verified compiling with c target the test/enum.rasm
- rename EnhancedASTModule: it is the untyped container for all the modules in the project
- move all asm code to backend
- List library
- SDL library
- install library
  - in ~/.rasm/repository/library-name/library-version
- library from http (https)
- library from git
- Unit type: ()
- cannot ignore a return value from a function:
    // This is an invalid code
    add(10, 10);
    ...

    // This is a valid code
    println(10);
    ...
    - check for unused parameters, let and static let, it should be an error
- it would be better if we cannot use .someFunction without parenthesis, if the function does not return anything
- visibility
  - private
  - readonly
    - structs
        - cannot call constructor from another namespace
        - cannot call setters from another namespace
  - opaque
    - structs
      - cannot call constructor from another namespace
      - cannot call setters from another namespace
      - cannot call getters from another namespace
- optimize
  - can a recursive function's lambda space be reused?
- native
  - let specify attributes for native like native(nasmi386, linux)... parked for now it is a compiler responsibility to locate native code
- threads
- create and use Result in standard library
- standardize compiler errors with source
- tests: there should not be a particular code generation of the compiler, it could be another source root that dependes on main,
  and there should be a library to define a test Suite, add tests (with a lambda that can be replaced by a function reference?) 
  or suites then run them an return the result that can be rendered in various formats, by default printed to the console

MINOR
- Vec
  - vecFilter and vecFoldL dereference
  - vecFilter shrink (add a shrink function that shrinks allocated memory)
- asm allocator
  - check for size >= allocated and use shrink
  - try to pack consecutive free "slots"
- TextMacro:
    - is it possible to use TextMacro in standard functions? (but for what?)
    - is it possible to inline the functions called with TextMacro?
- game of life: if we don't pass a number, it should run until no cells are alive
- type check
  - use Result
- delete asm, object and executable file before compile
- error if there's a function named the same way as a lambda parameter (or give precedence to parameter?)
- test inner lambda that get a value from a parent lambda parameter
- optimize memory for lambda space:
  - if there are more lambda in a call, all share the same lambda space (but not the address to the function), now it's duplicated:
    - I can create only one lambda space, then I can pass the address to the real function and the address to the lambda space, to the lambda,
      or a single pointer to a "structure" where the first word is the pointer to the function and the second the pointer to the lambda space
- refactor codegen lambda parameters: it's too complex
- I would like to have some namespace for functions, to be xx.yy.zz::function_name
- I can close an already closed TokensGroup (make a test)
- add command line arguments to the compiler:
  - to print the syntax tree
  - to print memory allocation
  - to debug asm
  - to run the program
- rename lambda to closure
- more on error source in codegen
