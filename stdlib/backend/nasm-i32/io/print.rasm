pub inline asm STDOut() -> File /{
    mov dword eax, 1
}/

/**
 * Prints a new line to standard output.
 */
pub fn println() {
    println(STDOut()).toUnit();
}

pub fn print<T>(v: T) {
    print(STDOut(), v).toUnit();
}

pub fn println<T>(file: File, v: T) -> Option<IOError> {
    print(file, v)
    .or(println(file));
}

/**
 * Prints the number to the File specified.
 * https://stackoverflow.com/questions/25064565/printing-an-integer-with-x86-32-bit-linux-sys-write-nasm
 **/
pub asm print(file: File, n: i32) -> Option<IOError>/{
    push    esi
    push    ebx
    push    ecx
    push    edx

    ; TODO I cannot allocate memory here, because when we use print inside malloc for debug we enter in an infinite loop
    ;      but I don't like it because it is not thread safe
    ; $call(rasmalloc, 20, " temp for print(i32)")
    ; we can immediately free the memory, because it is not "erased" and is not reused (malloc) in this function
    ; $call(freeMem, eax)
    ; mov     dword esi,[eax]
    mov     esi, _for_nprint

    add     esi,19

    mov     dword eax,$n ; integer value to convert
    mov     dword ecx,$n
    and     dword ecx,0x80000000
    jz      .positive
    xor     dword eax,0xFFFFFFFF
    inc     dword eax
    push    dword eax
    $call(print, $file, "-")
    gotoOnSome .end
    pop eax
.positive:
    mov     byte [esi],0    ; String terminator

    mov ebx,10
    xor ecx,ecx         ; initialize length
.next_digit:
    xor edx,edx         ; Clear edx prior to dividing edx:eax by ebx
    div ebx             ; eax /= 10
    add dl,'0'          ; Convert the remainder to ASCII
    dec esi             ; store characters in reverse order
    inc ecx             ; length

    mov [esi],dl
    test eax,eax
    jnz .next_digit     ; Repeat until eax==0

    $call(sysPrint,$file,esi,ecx)
.end:
    pop    edx
    pop    ecx
    pop    ebx
    pop    esi
}/

/**
 * Prints the number to the File specified.
  **/
pub asm print(file: File, n: f32) -> Option<IOError> /{
    push    ebx
    push    ecx
    push    edx

    mov     dword edx, $n
    and     dword edx, 0x80000000
    jz      .mantissa
    $call(print, $file, "-")
    gotoOnSome .end
.mantissa:
    ; mantissa
    mov     dword edx, $n
    and     dword edx, 0x7FFFFF

    mov     dword ebx, $n
    and     dword ebx, 0x7F800000
    shr     dword ebx, 23
    cmp     dword ebx, 255
    jne     .defined
.undefined:
    $call(print, $file, "undefined")
    jmp     .end
.defined:
    cmp     dword ebx, 0
    je      .denorm
    or      dword edx,0x800000
    cmp     dword ebx, 127
    jb      .below
    sub     ebx,126
    $call(printAligned, $file, edx, ebx)
    jmp      .end
.below:
    mov     dword ecx,126
    sub     dword ecx,ebx
    shr     edx,cl
    $call(printAligned, $file, edx, 0)
    jmp     .end
.denorm:
    $call(printAligned, $file, edx, 1)
.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

asm printAligned(file: File, alignedMantissa: i32, intNumbersCount: i32) -> Option<IOError> /{
    push    ecx

    mov     dword ecx, 24
    sub     dword ecx, $intNumbersCount
    mov     dword eax, $alignedMantissa
    shr     dword eax, cl
    $call(print, $file, eax)
    gotoOnSome .end

    mov     dword eax, 1
    shl     dword eax, cl
    dec     eax
    and     eax, $alignedMantissa
    $call(printDecimals, $file, eax, ecx)

.end:
    pop     ecx
}/

asm printDecimals(file: File, n: i32, count: i32) -> Option<IOError> /{
    ; local val for result
    sub     dword esp,4

    push    ebx
    push    ecx
    push    edx

    mov     dword eax,5             ; five_multiplier
    mov     dword ebx,0             ; temp_result
    mov     dword ecx,0             ; inner_count
    mov     dword edx,$count        ; actual_count
    mov     dword [ebp -4],0        ; result

.loop:
    cmp     dword edx,0
    jz      .end

    cmp     dword ecx, 9
    jne     .continue
    mov     dword [ebp -4], ebx
    mov     dword ebx,0
.continue:
    cmp     dword ecx,9
    jb      .continue2
    push    edx
    push    ecx
    mov     dword ecx,10
    xor     edx,edx
    div     ecx
    pop     ecx
    pop     edx
    jmp     .continue3
.continue2:
    push    edx
    imul    dword ebx,10
    pop     edx
.continue3:
    push    eax
    $call(getNthBit, $n, edx)
    cmp     dword eax,0
    je      .continue4
    pop     eax
    add     dword ebx,eax
    jmp     .continue5
.continue4:
    pop     eax
.continue5:
    push    edx
    imul    dword eax,5
    pop     edx
    dec     edx
    inc     ecx
    jmp     .loop
.end:
    mov     dword eax,[ebp -4]                     ; result
    add     dword eax, ebx
    mov     dword ebx,eax
    $call(print, $file, ".")
    gotoOnSome .end2
    $call(printPadLeft, $file, ebx, '0': char, 9)

.end2:
    pop    edx
    pop    ecx
    pop    ebx

    add    dword esp,4
}/

asm printPadLeft(file: File, n: i32, ch: char, count: i32) -> Option<IOError> /{
    push    ebx

    mov     dword ebx,$count
    $call(toString, $n)
    $call(len, eax: str)
    sub     dword ebx,eax
.loop:
    cmp     dword ebx, 0
    jz      .end
    $call(print, $file, $ch)
    gotoOnSome .end2
    dec     dword ebx
    jmp     .loop
.end:
    $call(print, $file, $n)
.end2:
    pop     ebx
}/

// false = 0 true = any other value
// false if not valid
asm getNthBit(value: i32, n: i32) -> bool /{
    push ecx

    mov     dword eax,1
    mov     dword ecx,$n
    dec     ecx
    shl     eax,cl
    and     dword eax,$value
    cmp     dword eax,0
    jz      .false
    mov     dword eax,1
    jmp     .end
.false:
    mov     dword eax,0
.end:
    pop     ecx
}/

/**
 * Prints a new line to file.
 */
pub asm println(file: File) -> Option<IOError> /{
    $call(sysPrint, $file, _NEW_LINE: i32, 1)
}/

/**
 * Prints the string to the file.
 **/
pub asm print(file: File, s: str) -> Option<IOError> /{
    push    ebx

    $call(slen, $s)
    mov     ebx, eax
    mov     eax, $s

    $call(sysPrint, $file, [eax], ebx)

    pop     ebx
}/

pub asm printESC() /{
    push    eax
    push    ebx
    push    ecx
    push    edx

    mov     edx, 1 ; num of chars
    mov     ecx, _ESC
    mov     ebx, 1
    mov     eax, 4
    int     80h

    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

pub asm print(file: File, c: char) -> Option<IOError> /{
    push    ecx
    push    ebx

    mov     dword   ebx,1
    mov     dword   eax,$c

    and     eax,0xFFFFFF00
    jz     .end
    inc     ebx
    and     eax,0xFFFF0000
    jz      .end
    inc     ebx
    and     eax,0xFF00000
    jz      .end
    inc     ebx
.end:
    ; we use the stack pointer as the address of the "string" to be printed
    push    dword $c
    mov     dword ecx,esp
    $call(sysPrint,$file,ecx,ebx)
    add     esp,4

    pop     ebx
    pop     ecx
}/

asm sysPrint(file: File, s: i32, len: i32) -> Option<IOError> /{
    push    dword edx
    push    dword ecx
    push    dword ebx

    mov     dword edx, $len
    mov     dword ecx, $s
    mov     ebx, $file
    mov     eax, 4
    int     80h

    cmp     dword eax, 0xfffff000   ; unsigned 2^32 - 4096, aka signed -4096
    ja      .error
    mov     dword eax, [_enum_Option_None]
    jmp     .end
.error:
    $call(someIOError, "Error writing to file.")
.end:
    pop     ebx
    pop     ecx
    pop     edx
}/

fn someIOError(msg: str) -> Option<IOError> {
    let error = IOError(msg);
    Option::Some(error);
}