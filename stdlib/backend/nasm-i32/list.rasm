pub native lines(s: str) -> List<str> /{
    sub  esp, 4 ; I save local space to store temporary address of list to dereference : [ebp -4]
    sub  esp, 4 ; I save local space to store a count of strings to dereference : [ebp -8]
    push ebx
    push ecx
    push edx

    mov  dword [ebp -8],0

    mov ebx, 0 ; pos of start of line
    mov edx, 0 ; actual pos
    mov eax, [_enum_List_Empty]
    mov     dword [ebp -4], eax
.loop:
    mov dword ecx, $s
    mov dword ecx, [ecx]
    add ecx, edx
    cmp     byte [ecx], 0
    jz  .endOfString
    cmp     byte [ecx], 10
    je  .endOfLine
    inc edx
    jmp .loop

.endOfLine:
    mov     ecx, edx
    sub     ecx, ebx
    push    eax
    $call(substr, $s, ebx, ecx)
    ; it's an option of string
    ; so we get the real address to the option
    mov     dword eax,[eax]
    ; then we skip the first word that is the value for the "Some" variant (TODO check)
    add     eax, 4
    ; then we get the pointer to the allocation table of the string, that is what we need
    mov     dword eax,[eax]
    mov     ebx, eax
    pop     eax

    mov     dword [ebp -4], eax
    $addRef(eax: List<str>, "for lines")
    $addRef(ebx: str, "for lines")
    $call(push, eax: List<str>, ebx: str)
    inc dword [ebp -8]
    push    dword ebx
    $deref([ebp -4]: List<str>, "for lines")
    inc edx
    mov ebx, edx
    jmp .loop

.endOfString:
    cmp     ebx, edx
    je      .end
    mov     ecx, edx
    sub     ecx, ebx
    push    eax
    $call(substr, $s, ebx, ecx)
    ; it's an option of string
    ; so we get the real address to the option
    mov     dword eax,[eax]
    ; then we skip the first word that is the value for the "Some" variant (TODO check)
    add     eax, 4
    ; then we get the pointer to the allocation table of the string, that is what we need
    mov     dword eax,[eax]
    mov     ebx, eax
    pop     eax

    mov     dword [ebp -4], eax
    $addRef(eax: List<str>, "for lines")
    $addRef(ebx: str, "for lines")
    $call(push, eax: List<str>, ebx: str)
    inc dword [ebp -8]
    push    dword ebx
    $deref([ebp -4]: List<str>, "for lines")
.end:
    mov dword ecx,[ebp -8]
.loopDereferencingStrings:
    test    ecx,ecx
    jz      .endDereferencingStrings
    pop     ebx
    $deref(ebx: str, "for lines")
    dec     ecx
    jmp     .loopDereferencingStrings
.endDereferencingStrings:
    pop edx
    pop ecx
    pop ebx
    add  esp, 8
}/

pub native chars(s: str) -> List<str> /{
    push ebx
    push ecx
    push edx

    mov dword ebx, $s
    mov dword ebx, [ebx]
    mov ecx,0

    mov eax, [_enum_List_Empty]

.loop:
    cmp     byte [ebx], 0
    je  .end
    mov     edx,0
    mov     dl, byte [ebx]
    push    eax
    $call(substr, $s, ecx, 1)
    ; it's an option of string
    ; so we get the real address to the option
    mov     dword eax,[eax]
    ; then we skip the first word that is the value for the "Some" variant (TODO check)
    add     eax, 4
    ; then we get the pointer to the allocation table of the string, that is what we need
    mov     dword eax,[eax]
    mov     edx, eax
    pop     eax
    $addRef(eax: List<str>, "for chars")
    $addRef(edx: str, "for chars")
    $call(push, eax: List<str>, edx: str)
    inc ebx
    inc ecx
    jmp .loop

.end:
    pop edx
    pop ecx
    pop ebx
}/