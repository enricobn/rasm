enum Option<T> {
  Some(value : T),
  None
}

fn toList<T>(o: Option<T>) -> List<T> {
    match(o, { v -> listOf(v);}, { -> List::Empty();});
}

fn print<T>(o: Option<T>) {
    run(o, { v -> print("Some("); print(v); print(")");}, { -> print("None");});
}

fn getOrElse<T>(o: Option<T>, default: T) -> T {
    match(o, { v -> v;}, { -> default;});
}

fn run<T>(o: Option<T>, f: fn(T) -> ()) {
    run(o, f, { -> });
}

fn map<T,T1>(o: Option<T>, f: fn(T) -> T1) -> Option<T1> {
    match(o, { v -> Option::Some(f(v)); }, { -> Option::None();});
}

fn flatten<T>(o: Option<Option<T>>) -> Option<T> {
    match(o, { v -> v; }, { -> Option::None(); });
}

fn fmap<T,T1>(o: Option<T>, f: fn(T) -> Option<T1>) -> Option<T1> {
    flatten(map(o, f));
}

fn or<T>(o: Option<T>, o1: Option<T>) -> Option<T> {
    match(o, { v -> o; }, { -> o1; });
}

fn orElse<T>(o: Option<T>, f: fn() -> Option<T>) -> Option<T> {
    match(o, { v -> o; }, f);
}