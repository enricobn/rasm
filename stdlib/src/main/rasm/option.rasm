pub enum Option<T> {
  Some(value : T),
  None
}

pub fn toList<T>(o: Option<T>) -> List<T> {
    match(o, fn(v) {listOf(v);}, {Empty();});
}

pub fn getOrElse<T>(o: Option<T>, defaultValue: T) -> T {
    match(o, fn(v) {v;}, {defaultValue;});
}

pub fn forEach<T>(o: Option<T>, f: fn(T) -> ()) {
    match(o, f, {});
}

pub fn map<T,T1>(o: Option<T>, f: fn(T) -> T1) -> Option<T1> {
    match(o, fn(v) {Some(f(v)); }, {None();});
}

pub fn flatten<T>(o: Option<Option<T>>) -> Option<T> {
    match(o, fn(v) {v;}, {None(); });
}

pub fn or<T>(o: Option<T>, o1: Option<T>) -> Option<T> {
    match(o, fn(v) { o; }, { o1; });
}

pub fn orElse<T>(o: Option<T>, f: fn() -> Option<T>) -> Option<T> {
    match(o, fn(v) {o; }, f);
}

pub fn isSome<T>(o: Option<T>) -> bool {
    o.match(fn(v) {true; }, {false; });
}

pub fn toString<T>(o: Option<T>) -> str {
    o.match( fn(value) {"Some(".append(value).append(")"); }, {"None"; });
}