pub enum Result<OK,ERROR> {
    Ok(value: OK),
    Error(error: ERROR)
}

pub fn map<OK,ERROR,T>(result: Result<OK,ERROR>, mapFun: fn(OK) -> T) -> Result<T,ERROR> {
    result.match(fn(value) { Result::Ok(mapFun(value)); }, fn(error) { Result::Error(error);});
}

pub fn fmap<OK,ERROR,T>(l: Result<OK,ERROR>, f: fn(OK) -> Result<T,ERROR>) -> Result<T,ERROR> {
    flatten(map(l, f));
}

pub fn flatten<OK,ERROR>(r: Result<Result<OK,ERROR>,ERROR>) -> Result<OK,ERROR> {
    r.match(
        fn(value) { value; },
        fn(error) { Result::Error(error); }
    );
}