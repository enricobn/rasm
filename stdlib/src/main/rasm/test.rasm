pub struct Suite {
    name: str,
    tests: Vec<RunTest>
}

pub fn Suite(name: str) -> Suite {
    Suite(name, Vec());
}

pub fn add(suite: Suite, name: str, index: str, function: fn() -> Assertions) -> Suite {
    let newSuite = suite.tests.push(RunTest(name, index, function));
    Suite(suite.name, newSuite);
}

pub fn run(suite: Suite) -> bool {
    println("running ", suite.name);
    let failures = suite.tests.filter(fn(it) { it.run();});
    if(failures.isEmpty.not, {
        println();
        println("failures:");
        failures.forEach(fn(it) { println(it.name);});
        false;
    } , { true; });
}

pub struct Assertions {
    failed: Vec<str>
}

pub struct RunTest {
   name: str,
   index: str,
   function: fn() -> Assertions
}

pub fn run(test: RunTest) -> bool {
    runTest(test.name, test.index, test.function);
}

pub fn Assertions() -> Assertions {
    Assertions(Vec());
}

pub fn fail(assertions: Assertions, message: str) -> Assertions {
    assertions.failed(assertions.failed.push(message));
}

pub fn validate(assertions: Assertions) {
    assertions.failed.first.match(fn(error) { panic("Assertion error: ".append(error)); }, {});
}

pub fn assertTrue(assertions: Assertions, value: bool) -> Assertions {
    if(value, {assertions; },{
        assertions.fail("assertion failed");
    });
}

pub fn assertFalse(assertions: Assertions, value: bool) -> Assertions {
    if(value,{
        assertions.fail("assertion failed");
    }, {assertions; });
}

pub fn assertTrue(assertions: Assertions, message: str, value: bool) -> Assertions {
    if(value,{assertions; },{
        assertions.fail("assertion failed: ".add(message));
    });
}

pub fn assertFalse(assertions: Assertions, message: str, value: bool) -> Assertions {
    if(value, {
        assertions.fail("assertion failed: ".add(message));
    }, {assertions; });
}

pub fn assertEquals<T>(assertions: Assertions, message: str, expected: T, current: T) -> Assertions {
    if(expected.eq(current).not, {
        assertions.fail("assertion failed: ".add(message));
    }, {assertions; });
}

pub fn assertEquals<T>(assertions: Assertions, expected: T, current: T) -> Assertions {
    if(expected.eq(current).not, {
        assertions.fail("assertion failed, expected ".append(expected).append(" but found ").append(current));
    }, {assertions; });
}

pub fn runTest(name: str, index: str, testRun: fn() -> Assertions) -> bool {
    print(name);
    let startTime = now();
    let runResult = testRun();
    let elapsedTime = elapsedTime(now(), startTime);
    print(" - ");
    print(elapsedTime.div(1000));
    print(" ms");

    runResult.failed.first.match(
        fn(error) {
            let message = " - \033[31mFAILED\033[0m : ".append(index).append(" : ");
            print(message);
            println(error);
            true;
        },
        {
            println(" - \033[32mok\033[0m");
            false;
        }
    );
}