pub struct Assertions {
    failed: Vec<str>
}

pub fn Assertions() -> Assertions {
    Assertions(Vec());
}

pub fn fail(assertions: Assertions, message: str) -> Assertions {
    assertions.failed(assertions.failed.push(message));
}

pub fn validate(assertions: Assertions) {
    assertions.failed.first.match(fn(error) { panic("Assertion error: ".add(error)); }, {});
}

pub fn assertTrue(assertions: Assertions, value: bool) -> Assertions {
    if(value, {assertions; },{
        assertions.fail("assertion failed");
    });
}

pub fn assertFalse(assertions: Assertions, value: bool) -> Assertions {
    if(value,{
        assertions.fail("assertion failed");
    }, {assertions; });
}

pub fn assertTrue(assertions: Assertions, message: str, value: bool) -> Assertions {
    if(value,{assertions; },{
        assertions.fail("assertion failed: ".add(message));
    });
}

pub fn assertFalse(assertions: Assertions, message: str, value: bool) -> Assertions {
    if(value, {
        assertions.fail("assertion failed: ".add(message));
    }, {assertions; });
}

pub fn assertEquals<T>(assertions: Assertions, message: str, expected: T, current: T) -> Assertions {
    if(expected.eq(current).not, {
        assertions.fail("assertion failed: ".add(message));
    }, {assertions; });
}

pub fn assertEquals<T>(assertions: Assertions, expected: T, current: T) -> Assertions {
    if(expected.eq(current).not, {
        assertions.fail("assertion failed, expected ".add(expected).add(" but found ").add(current));
    }, {assertions; });
}

pub fn runTest(name: str, index: str, testRun: fn() -> Assertions) -> bool {
    println("Running ".add(name));
    let startTime = now();
    let runResult = testRun();
    let elapsedTime = elapsedTime(now(), startTime);
    print("test run in ");
    print(elapsedTime.div(1000));
    println(" ms");

    runResult.failed.first.match(
        fn(error) {
            let message = "test failed ".add(index).add(" : ");
            print(message);
            println(error);
            println();
            true;
        },
        {
            println("test OK");
            println();
            false;
        }
    );
}