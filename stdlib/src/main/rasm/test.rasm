pub struct Assertions {
    failed: Vec<str>
}

pub fn Assertions() -> Assertions {
    Assertions(Vec());
}

pub fn fail(assertions: Assertions, message: str) -> Assertions {
    assertions.failed(assertions.failed.push(message));
}

pub fn validate(assertions: Assertions) {
    assertions.failed.first.match({ error -> panic("Assertion error: ".add(error)); }, { -> });
}

pub fn assertTrue(assertions: Assertions, value: bool) -> Assertions {
    if(value,{ -> assertions; },{ ->
        assertions.fail("assertion failed");
    });
}

pub fn assertFalse(assertions: Assertions, value: bool) -> Assertions {
    if(value,{ ->
        assertions.fail("assertion failed");
    }, { -> assertions; });
}

pub fn assertTrue(assertions: Assertions, message: str, value: bool) -> Assertions {
    if(value,{ -> assertions; },{ ->
        assertions.fail("assertion failed: ".add(message));
    });
}

pub fn assertFalse(assertions: Assertions, message: str, value: bool) -> Assertions {
    if(value,{ ->
        assertions.fail("assertion failed: ".add(message));
    }, { -> assertions; });
}

pub fn assertEquals<T>(assertions: Assertions, message: str, expected: T, current: T) -> Assertions {
    if(expected.eq(current).not,{ ->
        assertions.fail("assertion failed: ".add(message));
    }, { -> assertions; });
}

pub fn assertEquals<T>(assertions: Assertions, expected: T, current: T) -> Assertions {
    if(expected.eq(current).not,{ ->
        assertions.fail("assertion failed, expected ".add(expected).add(" but found ").add(current));
    }, { -> assertions; });
}

pub fn runTest(name: str, index: str, testRun: fn() -> Assertions) -> bool {
    testRun().failed.first.match(
        { error ->
            let message = add(add(add("Failed ", name), " : "), index);
            println(message);
            println(error);
            true;
        }, { -> false; }
    );
}