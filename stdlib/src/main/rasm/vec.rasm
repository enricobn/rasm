pub type Vec<T>(true);

pub fn cartesianProduct<T1,T2,T>(vec1: Vec<T1>, vec2: Vec<T2>, zipFunction: fn(T1, T2) -> T) -> Vec<T> {
    fmap(vec1, { v1 ->
        map(vec2, { v2 -> zipFunction(v1, v2); });
    });
}

pub fn fmap<T,T1>(l: Vec<T>, f: fn(T) -> Vec<T1>) -> Vec<T1> {
    flatten(map(l, f));
}

pub fn toVec<T>(l: List<T>) -> Vec<T> {
    match(l, { head, tail -> flatten(vecOf(vecOf(head), toVec(tail)));},
        { -> Vec(); });
}

pub fn print<T>(v: Vec<T>, printFunction: fn(T) -> ()) {
    forEach(v, { n -> printFunction(n); print(",");});
}

pub fn print<T>(file: File, v: Vec<T>) -> Option<IOError> {
    let v1 = map(v, { n -> print(file, n).or(print(file, ","));});
    let errors = v1.filter({ o -> o.isSome; });
    errors.first.match({ o -> o;} { -> Option::Some(IOError("Cannot happen"));});
}

pub fn enumerate<T>(vec: Vec<T>) -> Vec<EnumerateEntry<T>> {
    zip(vecRange(0, len(vec)), vec, { index, value -> EnumerateEntry(index, value);});
}

// TODO optimize
pub fn sort<T>(vec: Vec<T>) -> Vec<T> {
    if(less(len(vec), 2), vec, { ->
        let firstOfVec = first(vec);
        match(firstOfVec, { f ->
            let l = filter(vec, { v -> match(cmp(v, f), { -> true;}, { -> false;}, { -> false;});});
            let e = filter(vec, { v -> match(cmp(v, f), { -> false;}, { -> true;}, { -> false;});});
            let g = filter(vec, { v -> match(cmp(v, f), { -> false;}, { -> false;}, { -> true;});});
            add(sort(l), add(e, sort(g)));
        }, { -> Vec();});
    });
}

// TODO optimize
pub fn sort<T>(vec: Vec<T>, cmpFunction: fn(T, T) -> Compare) -> Vec<T> {
    if(less(len(vec), 2), vec, { ->
        let firstOfVec = first(vec);
        match(firstOfVec, { f ->
            let l = filter(vec, { v -> match(cmpFunction(v, f), { -> true;}, { -> false;}, { -> false;});});
            let e = filter(vec, { v -> match(cmpFunction(v, f), { -> false;}, { -> true;}, { -> false;});});
            let g = filter(vec, { v -> match(cmpFunction(v, f), { -> false;}, { -> false;}, { -> true;});});
            add(sort(l, cmpFunction), add(e, sort(g, cmpFunction)));
        }, { -> Vec();});
    });
}

pub fn eq<T>(vec1: Vec<T>, vec2: Vec<T>) -> bool {
    if(not(eq(len(vec1), len(vec2))), false, { ->
        let booleans = zip(vec1, vec2, { v1, v2 -> eq(v1, v2);});
        eq(count(booleans, { v -> not(v);}), 0);
    });
}

pub fn eq<T>(vec1: Vec<T>, vec2: Vec<T>, cmpFunction: fn(T, T) -> Compare) -> bool {
    if(not(eq(len(vec1), len(vec2))), false, { ->
        let booleans = zip(vec1, vec2, { v1, v2 ->
            match(cmpFunction(v1, v2), { -> false;}, { -> true;}, { -> false;});
        });
        eq(count(booleans, { v -> not(v);}), 0);
    });
}

pub fn take<T>(vec: Vec<T>, count: i32) -> Vec<T> {
    let es = enumerate(vec);

    let filtered = filter(es, { e -> less(index(e), count);});

    map(filtered, { e -> value(e);});
}

pub fn isEmpty<T>(vec: Vec<T>) -> bool {
    vec.len.eq(0);
}

// TODO slow
pub fn toList<T>(v: Vec<T>) -> List<T> {
    v.foldLeft(List::Empty<T>(), { prev, o -> prev.push(o); });
}

// TODO slow
pub fn pop<T>(v: Vec<T>) -> Pair<Option<T>,Vec<T>> {
    let popped = v.toList.pop;
    Pair(popped.first, popped.second.toVec);
}
