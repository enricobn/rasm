pub fn cartesianProduct<T1,T2,T>(vec1: Vec<T1>, vec2: Vec<T2>, zipFunction: fn(T1, T2) -> T) -> Vec<T> {
    fmap(vec1, fn(v1) {
        map(vec2, fn(v2) {zipFunction(v1, v2); });
    });
}

pub fn print<T>(v: Vec<T>, printFunction: fn(T) -> ()) {
    forEach(v, fn(n) {printFunction(n); print(",");});
}

pub fn enumerate<T>(vec: Vec<T>) -> Vec<EnumerateEntry<T>> {
    zip(vecRange(0, len(vec)), vec, fn(index, value) { 
        EnumerateEntry(index, value);
    });
}

// TODO optimize
pub fn sort<T>(vec: Vec<T>) -> Vec<T> {
    if(less(len(vec), 2), vec, {
        let firstOfVec = first(vec);
        match(firstOfVec, fn(f) {
            let l = filter(vec, fn(v) { match(cmp(v, f), {true;}, {false;}, {false;});});
            let e = filter(vec, fn(v) { match(cmp(v, f), {false;}, {true;}, {false;});});
            let g = filter(vec, fn(v) { match(cmp(v, f), {false;}, {false;}, {true;});});
            add(sort(l), add(e, sort(g)));
        }, {Vec();});
    });
}

// TODO optimize
pub fn sort<T>(vec: Vec<T>, cmpFunction: fn(T, T) -> Compare) -> Vec<T> {
    if(less(len(vec), 2), vec, {
        let firstOfVec = first(vec);
        match(firstOfVec, fn(f) {
            let l = filter(vec, fn(v) { match(cmpFunction(v, f), {true;}, {false;}, {false;});});
            let e = filter(vec, fn(v) { match(cmpFunction(v, f), {false;}, {true;}, {false;});});
            let g = filter(vec, fn(v) { match(cmpFunction(v, f), {false;}, {false;}, {true;});});
            add(sort(l, cmpFunction), add(e, sort(g, cmpFunction)));
        }, {Vec();});
    });
}

pub fn eq<T>(vec1: Vec<T>, vec2: Vec<T>) -> bool {
    if(not(eq(len(vec1), len(vec2))), false, {
        let booleans = zip(vec1, vec2, fn(v1, v2) {eq(v1, v2);});
        eq(count(booleans, fn(v) {not(v);}), 0);
    });
}

pub fn eq<T>(vec1: Vec<T>, vec2: Vec<T>, cmpFunction: fn(T, T) -> Compare) -> bool {
    if(not(eq(len(vec1), len(vec2))), false, {
        let booleans = zip(vec1, vec2, fn(v1, v2) {
            match(cmpFunction(v1, v2), {false;}, {true;}, {false;});
        });
        eq(count(booleans, fn(v) {not(v);}), 0);
    });
}

pub fn take<T>(vec: Vec<T>, count: int) -> Vec<T> {
    let es = enumerate(vec);

    let filtered = filter(es, fn(e) {
        less(index(e), count);}
    );

    map(filtered, fn(e) {value(e);});
}

pub fn isEmpty<T>(vec: Vec<T>) -> bool {
    vec.len.eq(0);
}

pub fn toVec<T>(l: List<T>) -> Vec<T> {
    match(l, fn(head, tail) { flatten(vecOf(vecOf(head), toVec(tail)));},
        {Vec(); });
}

// TODO slow
pub fn toList<T>(v: Vec<T>) -> List<T> {
    v.foldLeft(Empty<T>(), fn(prev, o) { prev.push(o); });
}

// TODO slow
pub fn pop<T>(v: Vec<T>) -> Pair<Option<T>,Vec<T>> {
    let popped = v.toList.pop;
    Pair(popped.first, popped.second.toVec);
}

pub fn toString<T>(v: Vec<T>) -> str {
    "[".add(v.join(",")).add("]");
}