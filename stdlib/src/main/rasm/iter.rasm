pub struct IterValue<T> {
    value: T,
    next: Iter<T>
}

pub struct Iter<T> {
    next: fn() -> Option<IterValue<T>>
}

pub fn iter<T>(o: Option<T>) -> Iter<T> {
    Iter({
        o.map(fn(it) {
            IterValue(it, Iter({ None();}));
        });
    });
}

pub fn iter<T>(o: List<T>) -> Iter<T> {
    Iter({
        o.match(fn(head,tail) {
            Some(IterValue(head, iter(tail)));
        }, { None(); });
    });
}

pub fn map<T,T1>(l: Iter<T>, f: fn(T) -> T1) -> Iter<T1> {
    Iter({
        l.callNext.map(fn(it) { IterValue(f(it.value), it.next.map(f)); });
    });

/*
    l.next.match(fn(it) { 
        Iter({ Some(IterValue(f(it.value), it.next.map(f)));}); 
    }, { emptyIter();});
*/
}

pub fn forEach<T>(l: Iter<T>, f: fn(T) -> ()) {
    l.callNext.match(fn(it) {f(it.value); it.next.forEach(f); }, {});
}

pub fn anyMatch<T>(l: Iter<T>, predicate: fn(T) -> bool) -> bool {
    l.callNext.match(fn(it) { if(predicate(it.value), true, { it.next.anyMatch(predicate); }); }, {false;});
}

pub fn count<T>(l: Iter<T>, predicate: fn(T) -> bool) -> i32 {
    l.callNext.match(fn(it) { add(it.next.count(predicate), if(predicate(it.value), 1, 0)); }, {0;});
}

pub fn foldLeft<T,T1>(iter: Iter<T>, zero: T1, accum: fn(T1,T) -> T1) -> T1 {
    iter.callNext.match(fn(it) {
        it.next.foldLeft(accum(zero, it.value), accum);
    }, {
        zero;
    });
}

pub fn filter<T>(l: Iter<T>, f: fn(T) -> bool) -> Iter<T> {
    Iter({
        l.callNext.match(fn(it) {
            if(f(it.value), { Some(IterValue(it.value, it.next.filter(f))); }, { it.next.filter(f).callNext; });
        }, { None(); });
    });

/*
    l.next.match(fn(it) {
        if(f(it.value), { Iter({ Some(IterValue(it.value, it.next.filter(f))); }); }, { it.next.filter(f);});
    }, { emptyIter<T>(); });
*/
}


pub fn add<T>(i1: Iter<T>, i2: Iter<T>) -> Iter<T> {
    i1.callNext.match(fn(it) {
        Iter({ Some(IterValue(it.value, it.next.add(i2))); });
    }, {
        i2;
    });
}

pub fn flatten<T>(l: Iter<Iter<T>>) -> Iter<T> {
    l.callNext.match(fn(it) {
        // it : IterValue<Iter<T>>
/*
        Iter({ 
            it.value.next.match(fn(i) {
                // i : IterValue<T>
                Some(IterValue(i.value, i.next.add(it.callNext.flatten)));
            }, { None(); });    
        });
*/


        it.value.callNext.match(fn(i) {
            Iter({ Some(IterValue(i.value, i.next.add(it.next.flatten))); });
        }, { emptyIter<T>(); });

    },
    { emptyIter<T>(); });
}

pub fn emptyIter<T>() -> Iter<T> {
    Iter({ None<IterValue<T>>(); });
}

pub fn print<T>(i: Iter<T>) {
    i.forEach(fn(it) { print(it); print(','); });
}

pub fn toVec<T>(iter: Iter<T>) -> Vec<T> {
    iter.foldLeft(Vec<T>(), fn(result,actual) {
        result.push(actual);
    });
}

pub fn toList<T>(iter: Iter<T>) -> List<T> {
    iter.callNext.match(fn(it) {
        Full(it.value, it.next.toList);
    }, { Empty<T>(); });
}