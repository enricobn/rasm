pub struct If<T> {
    value: Option<T>
}

pub fn if<T>(cond: bool, trueValue: T) -> If<T> {
    If(if(cond, Some(trueValue), None()));
}

pub fn elseIf<T>(ifValue: If<T>, cond: bool, trueValue: T) -> If<T> {
    ifValue.value.match(
        fn(value) { ifValue; },
        {if(cond, trueValue); }
    );
}

pub fn else<T>(ifValue: If<T>, elseValue: T) -> T {
    ifValue.value.getOrElse(elseValue);
}

/*
struct IfLambda<T> {
    value: Option<fn() -> T>
}

fn if<T>(cond: bool, trueValue: fn() -> T) -> IfLambda<T> {
    if(cond, IfLambda(Some(trueValue)), IfLambda(None()));
}

fn elseIf<T>(ifValue: IfLambda<T>, cond: bool, trueValue: fn() -> T) -> IfLambda<T> {
    ifValue.value.match(
        { value -> ifValue; },
        { -> if(cond, trueValue); }
    );
}

fn else<T>(ifValue: IfLambda<T>, elseValue: fn() -> T) -> T {
    let lambda = ifValue.value.match(
        { value -> value; },
        { -> elseValue; }
    );

    lambda();
}
*/