pub native if<T>(cond: bool, ftrue: fn() -> T, ffalse: fn() -> T) -> T /{
	if ($cond) {
		return $ftrue.functionPtr($ftrue);
	} else {
		return $ffalse.functionPtr($ffalse);
	}
}/

/**
    false = 0 true = 1
    it's a branch less implementation

    ATTENTION: it is not short circuit, it always evaluates both arguments,
    if you need a short circuit then use the version with lambda
**/
pub native if<T>(cond: bool, trueVal: T, falseVal: T) -> T /{
    if ($cond) {
        return $trueVal;
    } else {
        return $falseVal;
    }
}/

/**
    false = 0 true = any other value

    ATTENTION: it is not completely short circuit, the true value is always evaluated,
    if you need a short circuit then use if function with lambda
**/
pub native if<T>(cond: bool, vtrue: T, ffalse: fn() -> T) -> T /{
	if ($cond) {
		return $vtrue;
	} else {
		return $ffalse.functionPtr($ffalse);
	}
}/