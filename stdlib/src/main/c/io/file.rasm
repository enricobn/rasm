pub type File /{
    hasReferences = false,
    nativeType = FILE*
}/

pub native readFile(path: str) -> str /{
    $include(<stdio.h>)

    struct RasmPointer_ *buffer = 0;
    long length;
    FILE * f = fopen (path->address, "rb");

    if (f)
    {
      fseek (f, 0, SEEK_END);
      length = ftell (f);
      fseek (f, 0, SEEK_SET);
      buffer = rasmMalloc (length + sizeof(char));
      char *buffer_ = (char *) buffer->address;
      fread (buffer_, 1, length, f);
      fclose (f);
      buffer_[length] = 0;
    }

    return buffer;
}/

pub native createFile(path: str) -> File /{
    $include(<stdio.h>)

    return fopen(path->address, "w");
}/

pub native close(file: File) /{
    $include(<stdio.h>)

    /*
      TODO probably the creation of the file has failed, it should return an error, or better revise all file functions
       to return an error if a file cannot be created / opened
    */
    if (file != NULL) {
        fclose(file);
    }
}/

pub native delete(path: str) /{
    $include(<stdio.h>)

    remove(path->address);
}/

pub native fileExists(path: str) -> bool /{
    // TODO it's UNIX
    $include(<unistd.h>)

    return access(path->address, F_OK) == 0
}/