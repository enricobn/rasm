pub native tof32(n: int) -> float /{
    $inline()
    return ((float) $n);
}/

pub native toi32(n: float) -> Option<int> /{
    int result = (int)$n;
    return
        $call(Some, result)
    ;
}/

pub native divf(n1: int, n2: int) -> float /{
    $inline()
    return (((float)$n1) / ((float) $n2));
}/

pub native sub(a: float, b: float) -> float /{
    $inline()
    return ($a - $b);
}/

pub native add(a: float, b: float) -> float /{
    $inline()
    return ($a + $b);
}/

pub native add(a: float, b: int) -> float /{
    $inline()
    return ($a + $b);
}/

pub native mul(a: float, b: float) -> float /{
    $inline()
    return ($a * $b);
}/

pub native div(a: float, b: float) -> float /{
    $inline()
    return ($a / $b);
}/

pub native sub(a: float, b: int) -> float /{
    $inline()
    return ($a - $b);
}/

pub native sub(a: int, b: float) -> float /{
    $inline()
    return ($a - $b);
}/

pub native greater(a: float, b: float) -> bool /{
    $inline()
    return ($a > $b);
}/

pub native greater(a: float, b: int) -> bool /{
    $inline()
    return ($a > $b);
}/

pub native less(a: float, b: float) -> bool /{
    $inline()
    return ($a < $b);
}/

pub native less(a: float, b: int) -> bool /{
    $inline()
    return ($a < $b);
}/

pub native mul(f1: float, n2: int) -> float /{
    $inline()
    return ($f1 * $n2);
}/

pub native div(a: float, b: int) -> float /{
    $inline()
    return ($a / $b);
}/

// from https://stackoverflow.com/questions/8257714/how-can-i-convert-an-int-to-a-string-in-c
pub native toString(n: float) -> str /{
    $include(<math.h>)

    // TODO calculate max length
    //int s_len = (int)((ceil(log10((double)$n));
    int s_len = 20;

    char *_str = malloc((s_len + 1) * sizeof(char));
    sprintf(_str, "%f", $n);
    return _str;
}/