pub native if<T>(cond: bool, ftrue: fn() -> T, ffalse: fn() -> T) -> T /{
    $inline()
    mov     eax,$cond
    cmp     eax, 0
    jz      $+19
    mov     eax, $ftrue     ; ftrue points to the lambda space
    mov     dword eax,[eax]
    push    eax             ; the address to the lambda space is the last argument of every lambda
    call    [eax]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 4
    jmp     $+20
    nop
    nop
    nop
    nop
    mov     eax, $ffalse    ; ffalse points to the lambda space, we do the same as above
    mov     dword eax,[eax]
    push    eax
    call    [eax]           ; false value
    add     esp, 4
    nop
    nop
    nop
    nop
}/

/**
    false = 0 true = 1
    it's a branch less implementation

    ATTENTION: it is not short circuit, it always evaluates both arguments,
    if you need a short circuit then use the version with lambda
**/
pub native if<T>(cond: bool, trueVal: T, falseVal: T) -> T /{
    $inline()
    push  ebx
    push  edx

    mov   dword eax, $cond
    imul  dword eax, $trueVal
    mov   dword ebx, $cond
    xor   dword ebx, 1
    imul  dword ebx, $falseVal
    add   dword eax, ebx

    pop   edx
    pop   ebx
}/

/**
    false = 0 true = any other value

    ATTENTION: it is not completely short circuit, the true value is always evaluated,
    if you need a short circuit then use if function with lambda
**/
pub native if<T>(cond: bool, vtrue: T, ffalse: fn() -> T) -> T /{
    $inline()
    mov     eax,$cond
    cmp     eax, 0
    jz      $+11
    mov     eax, $vtrue
    jmp     $+18
    nop     ; nops are used because it's inlined and $vtrue could be an immediate value or an address so we don't know where to jump exactly...
    nop
    nop
    nop
    mov     eax, $ffalse
    mov     dword eax,[eax]
    push    eax
    call    [eax]
    add     dword esp, 4
    nop
    nop
}/