pub native tof32(n: i32) -> f32 /{
    push    ebx
    push    ecx

    ; $call(print, "tof32(", $n)
    ; $call(println, ")")
    mov     dword ebx,$n
    mov     dword eax,$n
    and     dword eax,0x80000000
    jz      .positive
    xor     dword ebx,0xFFFFFFFF
    add     dword ebx,1
.positive:
    $call(countBits, ebx)
    ; $call(println, " countBits ", eax)
    mov     dword ecx,24
    sub     dword ecx,eax
    add     dword eax,126
    shl     eax,23
    shl     dword ebx,cl
    and     dword ebx,0x7FFFFF
    or      dword eax,ebx
    ; $call(println, " = ", eax)
    ; sign
    mov     dword ebx,$n
    and     dword ebx,0x80000000
    or      dword eax,ebx

    pop     ecx
    pop     ebx
}/

native countBits(n: i32) -> i32 /{
    push    ebx
    mov     dword eax,0
    mov     dword ebx,$n
.loop:
    cmp     dword ebx,0
    jz      .end
    shr     ebx,1
    inc     eax
    jmp     .loop
.end:
    pop     ebx
}/

pub native toi32(n: f32) -> Option<i32> /{
    push    ebx
    push    ecx
    push    edx

    ; mantissa
    mov     dword edx, $n
    and     dword edx, 0x7FFFFF

    mov     dword ebx, $n
    and     dword ebx, 0x7F800000
    shr     dword ebx, 23
    ;$call(println, "exponent ", ebx)
    cmp     dword ebx, 255
    jne     .defined
.undefined:
    mov     dword eax,[_enum_stdlib_option_Option_None]
    jmp     .end
.defined:
    cmp     dword ebx, 0
    je      .denorm
    or      dword edx,0x800000
    cmp     dword ebx, 127
    jb      .below
    sub     ebx,126
    $call(getAligned, edx, ebx)
    jmp      .some
.below:
    mov     dword ecx,126
    sub     dword ecx,ebx
    shr     edx,cl
    $call(getAligned, edx, 0)
    jmp     .some
.denorm:
    $call(getAligned, edx, 1)
.some:
    mov     dword edx, $n
    and     dword edx, 0x80000000
    jz      .positive
    $call(negate, eax)
.positive:
    $call(Some, eax)
.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native negate(n: i32) -> i32 /{
    mov     dword eax,$n
    xor     dword eax,0xFFFFFFFF
    inc     dword eax
}/

native getAligned(alignedMantissa: i32, intNumbersCount: i32) -> i32 /{
    push    ecx

    mov     dword ecx, 24
    sub     dword ecx, $intNumbersCount
    mov     dword eax, $alignedMantissa
    shr     dword eax, cl

    pop     ecx
}/

// from https://stackoverflow.com/questions/42181811/how-to-add-two-numbers-integer-and-a-float-in-nasm
pub native mul(f1: f32, f2: f32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$f2
    mov     dword [ebp - 4],eax

    fmul    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native mul(f1: f32, n2: i32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$n2
    mov     dword [ebp - 4],eax

    fimul    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/


pub native div(f1: f32, f2: f32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$f2
    mov     dword [ebp - 4],eax

    fdiv    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native div(f1: f32, n2: i32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$n2
    mov     dword [ebp - 4],eax

    fidiv    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native divf(n1: i32, n2: i32) -> f32 /{
    sub     esp,4

    mov     dword eax,$n1
    mov     dword [ebp - 4],eax
    fild    dword [ebp - 4]
    mov     dword eax,$n2
    mov     dword [ebp - 4],eax

    fidiv    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native add(f1: f32, f2: f32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$f2
    mov     dword [ebp - 4],eax

    fadd    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native sub(f1: f32, f2: f32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$f2
    mov     dword [ebp - 4],eax

    fsub    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native add(f1: f32, n2: i32) -> f32 /{
    sub     esp,4

    mov     dword eax,$n2
    mov     dword [ebp - 4],eax
    fild    dword [ebp - 4]
    mov     dword eax,$f1
    mov     dword [ebp - 4],eax

    fadd    dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native sub(f1: f32, n2: i32) -> f32 /{
    sub     esp,4

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$n2
    mov     dword [ebp - 4],eax

    fisub   dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

pub native sub(n1: i32, f2: f32) -> f32 /{
    sub     esp,4

    mov     dword eax,$n1
    mov     dword [ebp - 4],eax
    fild    dword [ebp - 4]
    mov     dword eax,$f2
    mov     dword [ebp - 4],eax

    fsub   dword [ebp - 4]
    fstp    dword [ebp - 4]
    mov     dword eax,[ebp - 4]

    add     esp,4
}/

// false = 0 true = any other value
pub native greater(f1: f32, f2: f32) -> bool /{
    $call(cmp, $f1, $f2)
    cmp     dword eax,0
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
}/

pub native greater(f1: f32, n2: i32) -> bool /{
    $call(cmp, $f1, $n2)
    cmp     dword eax,0
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
}/

pub native less(f1: f32, f2: f32) -> bool /{
    $call(cmp, $f1, $f2)
    cmp     dword eax,0x100
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
}/

pub native less(f1: f32, n2: i32) -> bool /{
    $call(cmp, $f1, $n2)
    cmp     dword eax,0x100
    je      .true
    mov     dword eax,0
    jmp     .end
.true:
    mov     dword eax,1
.end:
}/

pub native cmp(f1: f32, f2: f32) -> i32 /{
    sub     esp,4

    finit

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$f2
    mov     dword [ebp - 4],eax

    fcom    dword [ebp - 4]
    fstsw   [ebp - 4]
    mov     dword eax,[ebp - 4]
    and     dword eax,0x4500    ; c0 bit 8 (0 based), c2 bit 10, c3 bit 14

    finit

    add     esp,4
}/

pub native cmp(f1: f32, n2: i32) -> i32 /{
    sub     esp,4

    finit

    mov     dword eax,$f1
    mov     dword [ebp - 4],eax
    fld     dword [ebp - 4]
    mov     dword eax,$n2
    mov     dword [ebp - 4],eax

    ficom    dword [ebp - 4]
    fstsw   [ebp - 4]
    mov     dword eax,[ebp - 4]
    and     dword eax,0x4500    ; c0 bit 8 (0 based), c2 bit 10, c3 bit 14

    finit

    add     esp,4
}/

// false = 0 true = any other value
pub native min(f1: f32, f2: f32) -> f32 /{
    $call(greater, $f1: f32, $f2: f32)
    cmp     dword eax,0
    jz      .false
    mov     dword eax,$f2
    jmp     .end
.false:
    mov     dword eax,$f1
.end:
}/