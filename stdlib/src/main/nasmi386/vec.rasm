pub type Vec<T> /{ hasReferences = true }/

pub native vecOf<T>(value: T) -> Vec<T> /{
    $call(rasmalloc, 8, " for vecOf")
    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 1
    push    ebx
    mov     dword ebx, $value
    mov     dword [eax + 4], ebx
    pop     ebx

    pop     eax
}/

pub native vecOf<T>(v1: T, v2: T) -> Vec<T> /{
    $call(rasmalloc, 12, " for vecOf 2")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 2

    push    ebx

    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx
    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx
    pop     ebx
    pop     eax
}/

pub native vecOf<T>(v1: T, v2: T, v3: T) -> Vec<T> /{
    $call(rasmalloc, 16, " for vecOf")
    push    eax

    mov     dword eax, [eax]
    mov     dword [eax], 3
    push    ebx
    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx
    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx
    mov     dword ebx, $v3
    mov     dword [eax + 12], ebx
    pop     ebx

    pop     eax
}/

pub native vecOf<T>(v1: T, v2: T, v3: T, v4: T) -> Vec<T> /{
    $call(rasmalloc, 20, " for vecOf 4")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 4

    push    ebx

    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx

    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx

    mov     dword ebx, $v3
    mov     dword [eax + 12], ebx

    mov     dword ebx, $v4
    mov     dword [eax + 16], ebx

    pop     ebx
    pop     eax
}/


pub native vecOf<T>(v1: T, v2: T, v3: T, v4: T, v5: T) -> Vec<T> /{
    $call(rasmalloc, 24, " for vecOf 5")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 5

    push    ebx

    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx

    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx

    mov     dword ebx, $v3
    mov     dword [eax + 12], ebx

    mov     dword ebx, $v4
    mov     dword [eax + 16], ebx

    mov     dword ebx, $v5
    mov     dword [eax + 20], ebx

    pop     ebx
    pop     eax
}/

pub native vecOf<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, v7: T, v8: T) -> Vec<T> /{
    $call(rasmalloc, 36, " for vecOf 8")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 8

    push    ebx

    mov     dword ebx, $v1
    mov     dword [eax + 4], ebx

    mov     dword ebx, $v2
    mov     dword [eax + 8], ebx

    mov     dword ebx, $v3
    mov     dword [eax + 12], ebx

    mov     dword ebx, $v4
    mov     dword [eax + 16], ebx

    mov     dword ebx, $v5
    mov     dword [eax + 20], ebx

    mov     dword ebx, $v6
    mov     dword [eax + 24], ebx

    mov     dword ebx, $v7
    mov     dword [eax + 28], ebx

    mov     dword ebx, $v8
    mov     dword [eax + 32], ebx

    pop     ebx
    pop     eax
}/

pub native forEach<T>(vec: Vec<T>, f: fn(T) -> ()) /{
    push    ebx
    push    ecx
    push    edx
    mov     dword ebx, $vec
    mov     dword ebx, [ebx]
    mov     dword ecx, [ebx]    ; count
    add     ebx, 4  ; address of first value
    mov     edx, $f         ; points to the lambda space
    mov     dword edx,[edx]
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    push    dword edx       ; the address to the lambda space is the last argument of every lambda
    call    [edx]           ; in the first 4 bytes of the lambda space there is the address of the lambda function to call
    add     esp, 8
    add     ebx, 4
    dec     ecx
    jmp     .loop

.end:
    pop     edx
    pop     ecx
    pop     ebx
}/

// end exclusive
pub native vecRange(start: int, end: int) -> Vec<int> /{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $end
    sub     dword ebx, $start
    push    ebx                 ; the size
    inc     ebx                 ; + 1 for the size
    add     ebx, ebx
    add     ebx, ebx
    $call(rasmalloc, ebx, " for vecRange")
    pop     ebx
    push    eax
    mov     dword ecx, [eax]
    mov     dword [ecx], ebx    ; the size
    add     ecx, 4              ; the pointer to the next value
    mov     dword edx, 0        ; the actual value
.loop:
    cmp     dword ebx, 0
    jz      .end
    mov     dword [ecx], edx

    add     ecx, 4
    dec     ebx
    inc     edx
    jmp     .loop
.end:
    pop     eax
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native map<T,T1>(vec: Vec<T>, f: fn(T) -> T1) -> Vec<T1>/{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    push    ecx
    inc     ecx                 ; + 1 for the size
    add     ecx, ecx
    add     ecx, ecx
    $call(rasmalloc, ecx, " for vec map")
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    $call(addRef, eax, "for map")
    pop     ecx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], ecx
    mov     edx, eax
    add     edx, 4          ; address of first value to write
    add     ebx, 4          ; address of first value to read
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    $addRef(eax:T1)
    mov     dword [edx], eax
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    $deref(eax:Vec<T1>)
    pop     edx
    pop     ecx
    pop     ebx
}/

/** false = 0 true = any other value **/
pub native anyMatch<T>(vec: Vec<T>, f: fn(T) -> bool) -> bool /{
    push    ebx
    push    ecx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    add     ebx, 4              ; the address of the first value
.loop:
    cmp     dword ecx, 0
    jz      .false
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jnz      .end
    add     ebx, 4
    dec     ecx
    jmp     .loop
.false:
    mov     dword eax, 0
.end:
    pop     ecx
    pop     ebx
}/

/** false = 0 true = any other value **/
pub native allMatch<T>(vec: Vec<T>, f: fn(T) -> bool) -> bool /{
    push    ebx
    push    ecx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    add     ebx, 4              ; the address of the first value
.loop:
    cmp     dword ecx, 0
    jz      .true
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .end
    add     ebx, 4
    dec     ecx
    jmp     .loop
.true:
    mov     dword eax, 1
.end:
    pop     ecx
    pop     ebx
}/

pub native count<T>(vec: Vec<T>, f: fn(T) -> bool) -> int /{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    add     ebx, 4              ; the address of the first value
    mov     dword edx, 0        ; result
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [ebx]
    mov     dword eax, $f
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    inc     edx
.false:
    add     ebx, 4
    dec     ecx
    jmp     .loop
.end:
    mov     dword eax, edx
    pop     edx
    pop     ecx
    pop     ebx
}/

// TODO the resulting vector is allocated with the size of the original vector, but the count of the elements is right
pub native filter<T>(vec: Vec<T>, filter: fn(T) -> bool) -> Vec<T> /{
    push    ebx
    push    ecx
    push    edx

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    push    ebx
    ; multiply ebx by 4
    shl     ebx, 2
    ; add the space for the size
    add     ebx, 4
    $call(rasmalloc, ebx, " for vec filter")
    $call(addRef, eax, "for vec filter")
    pop     ebx

    push    eax

    mov     dword edx, [eax]
    add     edx, 4  ; the address of the value in the new array
.loop:
    cmp     ebx, 0
    jz      .end
    push    dword [ecx]
    mov     dword eax, $filter
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 8
    cmp     dword eax, 0
    jz      .false
    mov     dword eax, [ecx]
    mov     dword [edx], eax
    add     edx, 4
.false:
    dec     ebx
    add     ecx, 4
    jmp     .loop
.end:
    pop     eax
    $call(deref, eax, "for vec filter")
    sub     dword edx, [eax]
    ; divide ebx by 4, we get the len
    shr     edx, 2
    dec     edx         ; we remove 1 for the size
    mov     dword ecx, [eax]
    mov     dword [ecx], edx
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native flatten<T>(vec: Vec<Vec<T>>) -> Vec<T> /{
    $call(vecFlattenCreate, $vec:int)
    push    eax

    push    ebx
    push    ecx
    push    edx

    mov     edx, [eax]
    add     edx, 4              ; the address of the value in the result array

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]    ; the address of the allocation table of the inner array
    mov     dword ecx, [ecx]    ; the address of the memory of the inner array
    mov     dword eax, [ecx]    ; the size of the inner array
    shl     eax, 2              ; the length in bytes

    add     ecx, 4
    $call(memcopy, ecx, edx, eax)
    pop     ecx

    add     ecx, 4
    add     edx, eax
    dec     ebx
    jmp     .loop
.end:
    pop     edx
    pop     ecx
    pop     ebx
    pop     eax
}/

/* TODO theoretically it should be native vecFlattenCreate<T>(vec: Vec<Vec<T>>) -> Vec<T>
 *      but for now there's no support for calling a generic function from assembly
 *      (the real function name is different for each real type)...
 */
native vecFlattenCreate(vec: int) -> int /{
    push    ebx
    push    ecx
    push    edx

    mov     dword eax, $vec
    mov     dword ecx, [eax]
    mov     dword ebx, [ecx]    ; the size of the original array
    add     ecx, 4              ; the address of the value in the original array
    mov     edx, 0              ; the size of the new array

.loop:
    cmp     ebx, 0
    jz      .end
    push    ecx
    mov     dword ecx, [ecx]
    mov     dword ecx, [ecx]
    add     dword edx, [ecx]
    pop     ecx
    add     ecx, 4
    dec     ebx
    jmp     .loop
.end:
    push    edx
    inc     edx
    shl     edx,2
    $call(rasmalloc, edx, " for vecFlattenCreate")
    pop     edx
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], edx
    pop     eax
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native len<T>(vec: Vec<T>) -> int /{
      mov     dword eax, $vec
      mov     dword eax, [eax]
      mov     dword eax, [eax]
}/

pub native foldLeft<T,T1>(vec: Vec<T>, zero: T1, accum: fn(T1,T) -> T1) -> T1 /{
    push    ebx
    push    ecx
    push    edx
    push    esi

    mov     dword ecx, $vec
    mov     dword ecx, [ecx]    ; the address of the value in the vector
    mov     dword esi, [ecx]    ; the size of the vector
    cmp     esi,0
    jz      .end

    mov     dword ebx, $accum
    mov     dword ebx,[ebx]     ; the lambda space

    mov     eax, $zero          ; the actual value
.loop:
    add     ecx, 4
    push    eax
    $addRef(eax: T1)
    push    dword [ecx]
    push    eax
    push    dword ebx
    call    [ebx]
    add     esp, 12
    pop     edx
    $deref(edx: T1)
    dec     esi
    jnz     .loop
.end:
    pop     esi
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native first<T>(vec: Vec<T>) -> Option<T> /{
    push    ebx
    mov     dword ebx, $vec
    mov     dword ebx, [ebx]
    mov     dword eax, [ebx]
    cmp     eax, 0
    jz      .empty
    mov     dword eax, [ebx + 4]
    $addRef(eax: T)
    $call(Some, eax:T)
    jmp     .end
.empty:
    mov     dword eax, [_enum_stdlib_option_Option_None]
.end:
    pop     ebx
}/

pub native last<T>(vec: Vec<T>) -> Option<T> /{
    push    ebx
    mov     dword ebx, $vec
    mov     dword ebx, [ebx]
    mov     dword eax, [ebx] ; length
    cmp     eax, 0
    jz      .empty
    shl     eax,2            ; eax * 4
    add     eax,ebx
    mov     dword eax, [eax]
    $addRef(eax: T)
    $call(Some, eax:T)
    jmp     .end
.empty:
    mov     dword eax, [_enum_stdlib_option_Option_None]
.end:
    pop     ebx
}/

pub native push<T>(vec: Vec<T>, o: T) -> Vec<T>/{
    push    ebx
    push    ecx
    push    edx

    mov     dword ebx, $vec
    mov     dword ebx, [ebx]    ; the address of the allocated memory
    mov     dword ecx, [ebx]    ; size
    inc     ecx               ; for the new element, now in ecx we have the new size

    mov     edx,ecx
    inc     edx               ; to store the size itself
    ; naive * 4
    add     edx, edx
    add     edx, edx
    ; now in edx we have the size, in bytes of the memory needed for the new vec
    $call(rasmalloc, edx, " for vec push")
    push    eax
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    ; $call(addRef, eax, "for map")
    sub     edx,4               ; the total size in bytes of the memory of old vec
    mov     dword eax, [eax]
    $call(memcopy, ebx, eax, edx)

    mov      dword [eax], ecx ; the size
    add     dword eax,edx
    mov     dword edx,$o
    mov     dword [eax],edx
    pop     eax
    ;$call(deref, eax, "for map")

    pop     edx
    pop     ecx
    pop     ebx
}/

pub fn VecReferences(vec: int, generic: int) -> int {
    vec;
}

pub native Vec<T>() -> Vec<T> /{
    $call(rasmalloc, 4, " for Vec")
    push    eax
    mov     dword eax, [eax]
    mov     dword [eax], 0
    pop     eax
}/

pub native zip<T1,T2,T>(vec1: Vec<T1>, vec2: Vec<T2>, zipFunction: fn(T1, T2) -> T) -> Vec<T> /{
    push    ebx
    push    ecx
    push    edx
    push    esi
    push    edi

    $call(len, $vec1)
    mov     dword ebx, eax
    $call(len, $vec2)
    $call(min, ebx, eax)
    push    eax                 ; the size of the new vec

    inc     eax                 ; + 1 for the size
    add     eax, eax
    add     eax, eax
    $call(rasmalloc, eax, " for vec zip")
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    $call(addRef, eax, "for vec zip")
    pop     ecx                 ; the size of the new vec

    push    eax

    mov     dword esi, [eax]
    mov     dword [esi], esi
    mov     dword [esi],ecx
    add     esi, 4          ; address of first value to write
    mov     dword ebx, $vec1
    mov     dword ebx, [ebx]
    add     ebx, 4          ; address of first value to read from vec1
    mov     dword edx, $vec2
    mov     dword edx, [edx]
    add     edx, 4          ; address of first value to read from vec2
.loop:
    cmp     dword ecx, 0
    jz      .end
    push    dword [edx]
    push    dword [ebx]
    mov     dword eax, $zipFunction
    mov     dword eax,[eax]
    push    dword eax
    call    [eax]
    add     esp, 12
    $addRef(eax:T)
    ; TODO do I need to dereference it?
    mov     dword [esi], eax
    add     esi, 4
    add     ebx, 4
    add     edx, 4
    dec     ecx
    jmp .loop
.end:
    pop     eax
    $call(deref, eax, "for map")

    pop     edi
    pop     esi
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native add<T>(vec1: Vec<T>, vec2: Vec<T>) -> Vec<T> /{
    push    ebx
    push    ecx
    push    edx

    $call(len, $vec1)
    mov     dword ebx, eax
    $call(len, $vec2)
    add     dword eax, ebx
    push    eax                 ; the size of the new vec

    inc     eax                 ; + 1 for the size
    add     eax, eax
    add     eax, eax
    $call(rasmalloc, eax, " for vec add")
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    $call(addRef, eax, "for vec add")
    pop     ecx                 ; the size of the new vec

    push    eax

    mov     dword eax, [eax]

    mov     dword ebx, $vec1
    mov     dword ebx, [ebx]
    mov     dword edx, ebx
    mov     dword edx, [edx]
    inc     edx
    add     edx, edx
    add     edx, edx
    $call(memcopy, ebx, eax, edx)
    add     dword eax,edx

    mov     dword ebx, $vec2
    mov     dword ebx, [ebx]    ; in ebx we have the address of the memory
    mov     dword edx, ebx      ;
    mov     dword edx, [edx]    ; the size of the vec
    add     dword ebx, 4        ; we skip the size
    add     edx, edx
    add     edx, edx
    $call(memcopy, ebx, eax, edx)

    pop     eax
    $call(deref, eax, "for add")
    mov     dword ebx, [eax]
    mov     dword [ebx], ecx

    pop     edx
    pop     ecx
    pop     ebx
}/

pub native charsVec(s: str) -> Vec<char> /{
    push    ebx
    push    ecx
    push    edx

    $call(len, $s)
    mov     dword ebx, eax
    inc     ebx
    add     ebx, ebx
    add     ebx, ebx
    $call(rasmalloc, ebx, "for charsVec")
    ; we add a simple reference to avoid the reuse of the memory, but we cannot do it as a typed addRef, because we dont yet have nothing added to it...
    $call(addRef, eax, "for charsVec")

    push    eax

    mov     dword ecx,[eax]     ; the nex address in the vec
    add     dword ecx,4
    mov     dword edx,0         ; the offset
.loop:
    ; $call(println, edx)

    $call(nextChar, $s, edx)
    cmp     dword eax,0
    jz      .end

    push    eax                 ; the next offset
    mov     dword ebx,$s
    mov     dword ebx,[ebx]
    add     dword ebx,edx       ; the source

    sub     eax,edx             ; the len to copy

    mov     dword [ecx],0       ; I initialize it with 4 zeroes
    $call(memcopy, ebx, ecx, eax)

    pop     edx
    add     ecx,4
    jmp     .loop

.end:
    ; $call(println, "end")
    pop     eax
    $call(deref, eax, "for charsVec")

    ; we set the length
    push    eax
    $call(len, $s)
    mov     ebx,eax
    pop     eax

    push    eax
    mov     dword eax,[eax]
    mov     dword [eax],ebx
    pop     eax

    ; $call(println, "end1")
    pop     edx
    pop     ecx
    pop     ebx
}/

pub native get<T>(vec: Vec<T>, i: int) -> Option<T> /{
    push    ebx
    mov     dword ebx, $vec  ; address to the allocation table
    mov     dword ebx, [ebx] ; address to the "Vec struct"
    mov     dword eax, [ebx] ; length
    cmp     eax, $i
    jle      .greater
    mov     eax, dword $i
    inc     eax              ; since now in ebx there's the address of length
    shl     eax,2            ; eax * 4
    add     eax,ebx
    mov     dword eax, [eax]
    $addRef(eax: T)
    $call(Some, eax:T)
    jmp     .end
.greater:
    mov     dword eax, [_enum_stdlib_option_Option_None]
.end:
    pop     ebx
}/