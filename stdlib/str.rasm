pub fn padLeft(s: str, len: i32) -> str {
    let l = len(s);
    if(not(less(l, len)), s, { -> padLeft(add(" ", s), len);});
}

pub fn isWhiteSpace(c: char) -> bool {
    c.eq(' ').or(c.eq('\t'));
}

pub fn isAlphaNumeric(c: char) -> bool {
    c.isAlpha().or(c.isNumber());
}

pub fn toString(s: str) -> str {
    s;
}

pub fn add<T1,T2>(a: T1, b: T2) -> str {
    add(toString(a), toString(b));
}

pub fn add<T1,T2,T3>(a: T1, b: T2, c: T3) -> str {
    add(add(toString(a), toString(b)), toString(c));
}

pub fn add<T1,T2,T3,T4>(a: T1, b: T2, c: T3, d: T4) -> str {
    add(add(toString(a), toString(b)), add(toString(c), toString(d)));
}

pub fn print<T>(file: File, s: T) -> Option<IOError> {
    print(file, toString(s));
}